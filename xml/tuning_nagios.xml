<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//Novell//DTD NovDoc XML V1.0//EN" "novdocx.dtd"
[
   <!ENTITY % NOVDOC.DEACTIVATE.IDREF "INCLUDE">
   <!ENTITY % entities SYSTEM "entity-decl.ent">
   %entities;
]>
<chapter id="cha.nagios">
 <title>Monitoring with Nagios</title>
 <abstract>
  <para>
   Nagios is a stable, scalable and extensible enterprise-class network and
   system monitoring tool which allows administrators to monitor network and
   host resources such as HTTP, SMTP, POP3, disk usage and processor load.
   Originally Nagios was designed to run under Linux, but it can also be
   used on several UNIX operating systems. This chapter covers the
   installation and parts of the configuration of Nagios
   (<ulink url="http://www.nagios.org/"/>).
  </para>
 </abstract>
 <sect1 id="sec.nagios.introduction.features">
  <title>Features of Nagios</title>

  <para>
   The most important features of Nagios are:
  </para>

  <itemizedlist>
   <listitem>
    <para>
     Monitoring of network services (SMTP, POP3, HTTP, NNTP, etc.).
    </para>
   </listitem>
   <listitem>
    <para>
     Monitoring of host resources (processor load, disk usage, etc.).
    </para>
   </listitem>
   <listitem>
    <para>
     Simple plug-in design that allows administrators to develop further
     service checks.
    </para>
   </listitem>
   <listitem>
    <para>
     Support for redundant Nagios servers.
    </para>
   </listitem>
  </itemizedlist>
 </sect1>
 <sect1 id="sec.nagios.installation">
  <title>Installing Nagios</title>

  <para>
   Install Nagios either with <command>zypper</command> or using &yast;.
  </para>

  <para>
   For further information on how to install packages see:
  </para>

  <itemizedlist>
   <listitem>
    <para>
     <xref linkend="sec.zypper"/>
    </para>
   </listitem>
   <listitem>
    <para>
     <xref linkend="sec.y2.sw.install"/>
    </para>
   </listitem>
  </itemizedlist>

  <para>
   Both methods install the packages
   <systemitem class="resource">nagios</systemitem> and
   <systemitem class="resource">nagios-www</systemitem>. The later RPM
   package contains a Web interface for Nagios which allows, for example, to
   view the service status and the problem history. However, this is not
   absolutely necessary.
  </para>

  <para>
   Nagios is modular designed and, thus, uses external check plug-ins to
   verify whether a service is available or not. It is recommended to
   install the <systemitem>nagios-plugin</systemitem> RPM package that
   contains ready-made check plug-ins. However, it is also possible to write
   your own, custom check plug-ins.
  </para>
 </sect1>
 <sect1 id="sec.nagios.config">
  <title>Nagios Configuration Files</title>

  <para>
   Nagios organizes the configuration files as follows:
  </para>

  <variablelist>
   <varlistentry>
    <term><filename>/etc/nagios/nagios.cfg</filename>
    </term>
    <listitem>
     <para>
      Main configuration file of Nagios containing a number of directives
      which define how Nagios operates. See
      <ulink url="http://nagios.sourceforge.net/docs/3_0/configmain.html"/>
      for a complete documentation.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><filename>/etc/nagios/resource.cfg</filename>
    </term>
    <listitem>
     <para>
      Containing path to all Nagios plug-ins (default:
      <filename>/usr/lib/nagios/plugins</filename>).
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><filename>/etc/nagios/command.cfg</filename>
    </term>
    <listitem>
     <para>
      Defining the programs to be used to determine the availability of
      services or the commands which are used to send e-mail notifications.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><filename>/etc/nagios/cgi.cfg</filename>
    </term>
    <listitem>
     <para>
      Contains options regarding the Nagios Web interface.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><filename>/etc/nagios/objects/</filename>
    </term>
    <listitem>
     <para>
      A directory containing object definition files. See
      <xref linkend="sec.nagios.config.objects"/> for a more complete
      documentation.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>

  <sect2 id="sec.nagios.config.objects">
   <title>Object Definition Files</title>
   <para>
    In addition to those configuration files Nagios comes with very flexible
    and highly customizable configuration files called <emphasis>Object
    Definition</emphasis> configuration files. Those configuration files are
    very important since they define the following objects:
   </para>
   <itemizedlist>
    <listitem>
     <para>
      Hosts
     </para>
    </listitem>
    <listitem>
     <para>
      Services
     </para>
    </listitem>
    <listitem>
     <para>
      Contacts
     </para>
    </listitem>
   </itemizedlist>
   <para>
    The flexibility lies in the fact that objects are easily enhanceable.
    Imagine you are responsible for a host with only one service running.
    However, you want to install another service on the same host machine
    and you want to monitor that service as well. It is possible to add
    another service object and assign it to the host object without huge
    efforts.
   </para>
   <para>
    Right after the installation, Nagios offers default templates for object
    definition configuration files. They can be found at
    <filename>/etc/nagios/objects</filename>. In the following see a
    description on how hosts, services and contacts are added:
   </para>
   <example>
    <title>A Host Object Definition</title>
<screen>define host {
 name                   SRV1             
 host_name              SRV1
 address                192.168.0.1
 use                    generic-host     
 check_period           24x7            
 check_interval         5           
 retry_interval         1              
 max_check_attempts     10            
 notification_period    workhours     
 notification_interval  120
 notification_options   d,u,r
}</screen>
   </example>
   <para>
    The <systemitem>host_name</systemitem> option defines a name to identify
    the host that has to be monitored. <systemitem>address</systemitem> is
    the IP address of this host. The <systemitem>use</systemitem> statement
    tells Nagios to inherit other configuration values from the generic-host
    template. <systemitem>check_period</systemitem> defines whether the
    machine has to be monitored 24x7.
    <systemitem>check_interval</systemitem> makes Nagios checking the
    service every 5 minutes and <systemitem>retry_interval</systemitem>
    tells Nagios to schedule host check retries at 1 minute intervals.
    Nagios tries to execute the checks multiple times when they do not pass.
    You can define how many attempts Nagios should do with the
    <systemitem>max_check_attempts</systemitem> directive. All configuration
    flags beginning with <systemitem>notification</systemitem> handle how
    Nagios should behave when a failure of a monitored service occurs. In
    the host definition above, Nagios notifies the administrators only on
    working hours. However, this can be adjusted with
    <systemitem>notification_period</systemitem>. According to
    <systemitem>notification_interval</systemitem> notifications will be
    resend every two hours. <systemitem>notification_options</systemitem>
    contains four different flags: <systemitem>d, u, r</systemitem> and
    <systemitem>n</systemitem>. They control in which state Nagios should
    notify the administrator. <systemitem>d</systemitem> stands for a
    <literal>down</literal> state, <systemitem>u</systemitem> for
    <literal>unreachable</literal> and <systemitem>r</systemitem> for
    <literal>recoveries</literal>. <systemitem>n</systemitem> does not send
    any notifications anymore.
   </para>
   <example>
    <title>A Service Object Definition</title>
<screen>define service {
 use                    generic-service
 host_name              SRV1
 service_description    PING
 contact_groups         router-admins
 check_command          check_ping!100.0,20%!500.0,60%
} </screen>
   </example>
   <para>
    The first configuration directive <systemitem>use</systemitem> tells
    Nagios to inherit from the <filename>generic-service</filename>
    template. <systemitem>host_name</systemitem> is the name that assigns
    the service to the host object. The host itself is defined in the host
    object definition. A description can be set with
    <systemitem>service_description</systemitem>. In the example above the
    description is just <literal>PING</literal>. Within the
    <systemitem>contact_groups</systemitem> option it is possible to refer
    to a group of people who will be contacted on a failure of the service.
    This group and its members are later defined in a contact group object
    definition. <systemitem>check_command</systemitem> sets the program that
    checks whether the service is available, or not.
   </para>
   <example>
    <title>A Contact and Contactgroup Definition</title>
<screen>define contact {
 contact_name           admins                
 use                    generic-contact        
 alias                  Nagios Admin
 email                  nagios@localhost        
}
                
define contactgroup {
 contactgroup_name      router-admins
 alias                  Administrators
 members                admins
}</screen>
   </example>
   <para>
    The example listing above shows the direct
    <systemitem>contact</systemitem> definition and its proper
    <systemitem>contactgroup</systemitem>. The
    <systemitem>contact</systemitem> definition contains the e-mail address
    and the name of the person who is contacted on a failure of a service.
    Usually this is the responsible administrator.
    <systemitem>use</systemitem> inherits configuration values from the
    generic-contact definition.
   </para>
   <para>
    An overview of all Nagios objects and further information about them can
    be found at:
    <ulink url="http://nagios.sourceforge.net/docs/3_0/objectdefinitions.html"/>.
   </para>
  </sect2>
 </sect1>
 <sect1>
  <title>Configuring Nagios</title>

  <para>
   Learn step-by-step how to configure Nagios to monitor different things
   like remote services or remote host-resources.
  </para>

  <sect2 id="sec.nagios.monitoringremoteservices">
   <title>Monitoring Remote Services with Nagios</title>
   <para>
    This section explains how to monitor remote services with Nagios.
    Proceed as follows to monitor a remote service:
   </para>
   <procedure>
    <title>Monitoring a Remote HTTP Service with Nagios</title>
    <step>
     <para>
      Create a directory inside <filename>/etc/nagios/objects</filename>
      using <systemitem>mkdir</systemitem>. You can use any desired name for
      it.
     </para>
    </step>
    <step>
     <para>
      Open <filename>/etc/nagios/nagios.conf</filename> and set
      <systemitem>cfg_dir</systemitem> (configuration directory) to the
      directory you have created in the first step.
     </para>
    </step>
    <step>
     <para>
      Change to the configuration directory created in the first step and
      create the following files: <filename>hosts.cfg</filename>,
      <filename>services.cfg</filename> and
      <filename>contacts.cfg</filename>
     </para>
    </step>
    <step>
     <para>
      Insert a host object in <filename>hosts.cfg</filename>:
     </para>
<screen>define host {
 name                   host.name.com
 host_name              host.name.com
 address                192.168.0.1
 use                    generic-host
 check_period           24x7
 check_interval         5
 retry_interval         1
 max_check_attempts     10
 contact_groups         admins
 notification_interval  60
 notification_options   d,u,r
}                        
                        </screen>
    </step>
    <step id="checkcommand">
     <para>
      Insert a service object in <filename>services.cfg</filename>:
     </para>
<screen>define service {
 use                    generic-service
 host_name              host.name.com
 service_description    HTTP
 contact_groups         router-admins
 check_command          check_http
}
                </screen>
    </step>
    <step>
     <para>
      Insert a contact and contactgroup object in
      <filename>contacts.cfg</filename>:
     </para>
<screen>define contact {
 contact_name           max-mustermann
 use                    generic-contact
 alias                  Webserver Administrator
 email                  mmustermann@localhost
}

define contactgroup {
 contactgroup_name      admins
 alias                  Administrators
 members                max-mustermann
}
                    </screen>
    </step>
    <step>
     <para>
      Execute <command>rcnagios restart</command> to (re)start Nagios.
     </para>
    </step>
    <step>
     <para>
      Execute <command>cat /var/log/nagios/nagios.log</command> and verify
      whether the following content appears:
     </para>
<screen> [1242115343] Nagios 3.0.6 starting... (PID=10915)
 [1242115343] Local time is Tue May 12 10:02:23 CEST 2009
 [1242115343] LOG VERSION: 2.0
 [1242115343] Finished daemonizing... (New PID=10916)</screen>
    </step>
   </procedure>
   <para>
    If you need to monitor a different remote service, it is possible to
    adjust <systemitem>check_command</systemitem> in step
    <xref linkend="checkcommand"/>. A full list of all available check
    programs can be obtained by executing <command>ls
    /usr/lib/nagios/plugins/check_*</command>
   </para>
   <para>
    See <xref linkend="sec.nagios.troubleshooting"/> if an error occurred.
   </para>
  </sect2>

  <sect2>
   <title>Monitoring Remote Host-Resources with Nagios</title>
   <para>
    This section explains how to monitor remote host resources with Nagios.
   </para>
   <para>
    Proceed as follows on the Nagios server:
   </para>
   <procedure>
    <title>Monitoring a Remote Host Resource with Nagios (Server)</title>
    <step>
     <para>
      Install <systemitem class="resource">nagios-nsca</systemitem> (for
      example, <command>zypper in nagios-nsca</command>).
     </para>
    </step>
    <step>
     <para>
      Set the following options in
      <filename>/etc/nagios/nagios.cfg</filename>:
     </para>
<screen>check_external_commands=1
 accept_passive_service_checks=1
 accept_passive_host_checks=1
 command_file=/var/spool/nagios/nagios.cmd</screen>
    </step>
    <step>
     <para>
      Set the <systemitem>command_file</systemitem> option in
      <filename>/etc/nagios/nsca.conf</filename> to the same file defined in
      <filename>/etc/nagios/nagios.conf</filename>.
     </para>
    </step>
    <step>
     <para>
      Add another host and service object:
     </para>
<screen>define host {
 name                            foobar
 host_name                       foobar
 address                         10.10.4.234
 use                             generic-host
 check_period                    24x7
 check_interval                  0
 retry_interval                  1
 max_check_attempts              1
 active_checks_enabled           0
 passive_checks_enabled          1
 contact_groups                  router-admins
 notification_interval           60
 notification_options            d,u,r
}</screen>
<screen>define service {
 use                             generic-service
 host_name                       foobar
 service_description             diskcheck
 active_checks_enabled           0
 passive_checks_enabled          1
 contact_groups                  router-admins
 check_command                   check_ping
}</screen>
    </step>
    <step>
     <para>
      Execute <command>rcnagios restart</command> and <command>rcnsca
      restart</command>.
     </para>
    </step>
   </procedure>
   <para>
    Proceed as follows on the client you want to monitor:
   </para>
   <procedure>
    <title>Monitoring a Remote Host Resource with Nagios (client)</title>
    <step>
     <para>
      Install <systemitem class="resource">nagios-nsca-client</systemitem>
      on the host you want to monitor.
     </para>
    </step>
    <step>
     <para>
      Write your test scripts (for example a script that checks the disk
      usage) like this:
     </para>
<screen>#!/bin/bash
                        
 NAGIOS_SERVER=10.10.4.166
 THIS_HOST=foobar
                        
 #
 # Write own test algorithm here
 #
                     
 # Execute On SUCCESS:
 echo "$THIS_HOST;diskcheck;0;OK: test ok" \
          | send_nsca -H $NAGIOS_SERVER -p 5667 -c /etc/nagios/send_nsca.cfg -d ";"
                        
 # Execute On Warning:
 echo "$THIS_HOST;diskcheck;1;Warning: test warning"  \
          | send_nsca -H $NAGIOS_SERVER -p 5667 -c /etc/nagios/send_nsca.cfg -d ";"
                        
 # Execute On FAILURE:
 echo "$THIS_HOST;diskcheck;2;CRITICAL: test critical"  \
          | send_nsca -H $NAGIOS_SERVER -p 5667 -c /etc/nagios/send_nsca.cfg -d ";"</screen>
    </step>
    <step>
     <para>
      Insert a new cron entry with <command>crontab -e</command>. A typical
      cron entry could look like this:
     </para>
<screen>*/5 * * * * /directory/to/check/program/check_diskusage
                        
                    </screen>
    </step>
   </procedure>
  </sect2>
 </sect1>
 <sect1 id="sec.nagios.troubleshooting">
  <title>Troubleshooting</title>

  <para/>

  <variablelist>
   <varlistentry>
    <term><literal>Error: ABC 'XYZ' specified in ... '...' is not defined anywhere!</literal>
    </term>
    <listitem>
     <para>
      Make sure that you have defined all necessary objects correctly. Be
      careful with the spelling.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><literal>(Return code of 127 is out of bounds - plugin may be missing)</literal>
    </term>
    <listitem>
     <para>
      Make sure that you have installed
      <systemitem class="resource">nagios-plugins.</systemitem>
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>E-mail notification does not work</term>
    <listitem>
     <para>
      Make sure that you have installed and configured a mail server like
      <systemitem>postfix</systemitem> or <systemitem>exim</systemitem>
      correctly. You can verify if your mail server works with <command>echo
      "Mail Server Test!" | mail foo@bar.com</command> which sends an e-mail
      to foo@bar.com. If this e-mail arrives, your mail server is working
      correctly. Otherwise, check the log files of the mail server.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </sect1>
 <sect1 id="sec.nagios.more-information">
  <title>For More Information</title>

  <variablelist>
   <varlistentry>
    <term>The complete Nagios documentation</term>
    <listitem>
     <para>
      <ulink url="http://nagios.sourceforge.net/docs/3_0/toc.html"/>
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Object Configuration Overview</term>
    <listitem>
     <para>
      <ulink url="http://nagios.sourceforge.net/docs/3_0/configobject.html"/>
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Object Definitions</term>
    <listitem>
     <para>
      <ulink url="http://nagios.sourceforge.net/docs/3_0/objectdefinitions.html"/>
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Nagios Plugins</term>
    <listitem>
     <para>
      <ulink url="http://nagios.sourceforge.net/docs/3_0/plugins.html"/>
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </sect1>
</chapter>
