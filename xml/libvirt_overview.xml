<?xml version="1.0"?>
<!DOCTYPE chapter PUBLIC "-//Novell//DTD NovDoc XML V1.0//EN" "novdocx.dtd"
[
  <!ENTITY % NOVDOC.DEACTIVATE.IDREF "INCLUDE">
  <!ENTITY % entities SYSTEM "entity-decl.ent">
  %entities;
]>
<!-- fs 2010-07-10: 

http://wiki.ubuntuusers.de/virsh
http://wiki.libvirt.org/page/TLSSetup
http://wiki.libvirt.org/page/VNCTLSSetu
-->
<chapter id="cha.libvirt.overview">
 <title>Overview</title>
 <para>
  &libvirt; is a library that provides a common API for managing popular
  virtualization solutions, among them &kvm; and &xen;. The library provides
  a normalized management API for these virtualization solutions, allowing a
  stable, cross-hypervisor interface for higher-level management tools. The
  library also provides APIs for management of virtual networks and storage
  on the &vmhost;. The configuration of each &vmguest; is stored in an XML
  file.
 </para>
 <para>
  With &libvirt; you can also manage your &vmguest;s remotely. It supports
  TLS encryption and x509 certificates as well as authentication with SASL.
 </para>
 <para>
  The communication between the virtualization solutions and &libvirt; is
  managed by the daemon &libvirtd;. It is also used by the management tools.
  &libvirtd; needs to run on the &vmhost; and on any remote machine on which
  the &libvirt;-based tools are started. Use the following commands to
  start, stop it or check its status:
 </para>
<screen>~ # rclibvirtd start
Starting libvirtd                              done
~ # rclibvirtd status
Checking status of libvirtd                 running
~ # rclibvirtd stop
Shutting down libvirtd                         done
~ # rclibvirtd status
Checking status of libvirtd                  unused</screen>
 <para>
  To automatically start &libvirtd; at boot time, either activate it using
  the &yast; <guimenu>System Services (Runlevel)</guimenu> module or by
  entering the following command:
 </para>
<screen>insserv libvirtd</screen>
 <para>
  The following &libvirt;-based tools are available on &productname;:
 </para>
 <variablelist>
  <varlistentry>
   <term>&vmm; (<command>virt-manager</command>)</term>
   <listitem>
    <para>
     The &vmm; is a desktop tool for managing &vmguest;s. It provides the
     ability to control the life cycle of existing machines
     (bootup/shutdown, pause/resume, suspend/restore). It lets you create
     new &vmguest;s and various types of storage, and manage virtual
     networks. Access the graphical console of &vmguest;s with the built-in
     VNC viewer, and view performance statistics, all done locally or
     remotely.
    </para>
    <informalfigure>
     <mediaobject>
      <imageobject role="fo">
       <imagedata fileref="virt_virt-manager.png" width="60%" format="PNG"/>
      </imageobject>
      <imageobject role="html">
       <imagedata fileref="virt_virt-manager.png" width="60%" format="PNG"/>
      </imageobject>
     </mediaobject>
    </informalfigure>
    <para>
     The &vmm; does not need to run on the &vmhost;, it also lets you
     control &vmguest;s via remote connections. This enables you to manage
     &vmguest;s centrally from a single workstation without having to log in
     on the &vmhost;.
    </para>
    <para>
     To start the &vmm;, enter <command>virt-manager</command> at the
     command prompt.
    </para>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term><command>virt-viewer</command>
   </term>
   <listitem>
    <para>
     A viewer for the graphical console of a &vmguest;. It uses the VNC
     protocol and supports TLS and x509 certificates. &vmguest;s can be
     accessed by name, ID, or UUID. If the guest is not already running, the
     viewer can be told to wait until the guest starts, before attempting to
     connect to the console.
    </para>
    <informalfigure>
     <mediaobject>
      <imageobject role="fo">
       <imagedata fileref="virt_virt-viewer.png" width="60%" format="PNG"/>
      </imageobject>
      <imageobject role="html">
       <imagedata fileref="virt_virt-viewer.png" width="60%" format="PNG"/>
      </imageobject>
     </mediaobject>
    </informalfigure>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term><command>vm-install</command>
   </term>
   <listitem>
    <para>
     A tool to set up a &vmguest;, configure its devices and start the
     operating system installation. Starts a GUI wizard when called from a
     graphical user interface. When invoked on a terminal, starts the wizard
     in command-line mode. <command>vm-install</command> is also started
     when creating a new virtual machine in the &vmm;.
    </para>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term><command>virsh</command>
   </term>
   <listitem>
    <para>
     A command line tool to manage &vmguest;s with similar functionality as
     the &vmm;. Allows you to change a &vmguest;'s status (start, stop,
     pause, etc.) to set up new guests and devices and to edit existing
     configurations. <command>virsh</command> is also useful to script
     &vmguest; management operations.
    </para>
    <para>
     <command>virsh</command> basically works like Subversion's
     <command>svn</command> command or <command>zypper</command>: it takes
     the first arguments as a command and further arguments as options to
     this command:
    </para>
<screen>virsh [-c <replaceable>URI</replaceable>] <replaceable>command</replaceable> <replaceable>domain-id</replaceable> [OPTIONS]</screen>
    <para>
     Just like <command>zypper</command>, <command>virsh</command> can also
     be called without a command. In this case it starts a shell waiting for
     your commands. This mode is useful when having to run subsequent
     commands:
    </para>
<screen>~&gt; virsh -c qemu+ssh://root@&wsIVname;/system
Enter passphrase for key '/home/&exampleuserII;/.ssh/id_rsa': 
Welcome to virsh, the virtualization interactive terminal.

Type:  'help' for help with commands
       'quit' to quit

virsh # hostname
&wsIVname;</screen>
   </listitem>
  </varlistentry>
 </variablelist>
</chapter>
