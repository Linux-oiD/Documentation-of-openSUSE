<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//Novell//DTD NovDoc XML V1.0//EN" "novdocx.dtd"
[
  <!ENTITY % NOVDOC.DEACTIVATE.IDREF "INCLUDE">
  <!ENTITY % entities SYSTEM "entity-decl.ent">
  %entities;
]>
<chapter role="General" id="cha.apparmor.commandline">
 <title>Building Profiles from the Command Line</title>
 <para>
  &naareg; provides the user the ability to use a command line interface
  rather than a graphical interface to manage and configure the system
  security. Track the status of &naa; and create, delete, or modify &aa;
  profiles using the &aa; command line tools.
 </para>
 <tip>
  <title>Background Information</title>
  <para>
   Before starting to manage your profiles using the &aa; command line
   tools, check out the general introduction to &aa; given in
   <xref
    linkend="cha.apparmor.concept"/> and
   <xref linkend="cha.apparmor.profiles"/>.
  </para>
 </tip>
 <sect1 id="sec.apparmor.commandline.status">
  <title>Checking the &aa; Module Status</title>

  <para>
   An &aa; module can be in any one of three states:
  </para>

  <variablelist>
   <varlistentry>
    <term>Unloaded</term>
    <listitem>
     <para>
      The &aa; module is not loaded into the kernel.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Running</term>
    <listitem>
     <para>
      The &aa; module is loaded into the kernel and is enforcing &aa;
      program policies.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Stopped</term>
    <listitem>
     <para>
      The &aa; module is loaded into the kernel, but no policies are
      enforced.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>

  <para>
   Detect the state of the &aa; module by inspecting
   <filename>/sys/kernel/security/apparmor/profiles</filename>. If
   <command>cat /sys/kernel/security/apparmor/profiles</command> reports a
   list of profiles, &aa; is running. If it is empty and returns nothing,
   &aa; is stopped. If the file does not exist, &aa; is unloaded.
  </para>

  <para>
   Manage &aa; through the script <filename>rcapparmor</filename>, which can
   perform the following operations:
  </para>

  <variablelist>
   <varlistentry>
    <term><command>rcapparmor start</command>
    </term>
    <listitem>
     <para>
      Behavior depends on the &aa; module state. If it is unloaded,
      <option>start</option> loads the module and starts it, putting it in
      the running state. If it is stopped, <option>start</option> causes the
      module to rescan the &aa; profiles usually found in
      <filename>/etc/apparmor.d</filename> and puts the module in the
      running state. If the module is already running,
      <option>start</option> reports a warning and takes no action.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><command>rcapparmor stop</command>
    </term>
    <listitem>
     <para>
      Stops the &aa; module if it is running by removing all profiles from
      kernel memory, effectively disabling all access controls, and putting
      the module into the stopped state. If the &aa; module is unloaded or
      already stopped, <option>stop</option> tries to unload the profiles
      again, but nothing happens.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><command>rcapparmor restart</command>
    </term>
    <listitem>
     <para>
      Causes the &aa; module to rescan the profiles in
      <filename>/etc/apparmor.d</filename> without unconfining running
      processes. Freshly created profiles are enforced and recently deleted
      ones are removed from the <filename>/etc/apparmor.d</filename>
      directory.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><command>rcapparmor kill</command>
    </term>
    <listitem>
     <para>
      Unconditionally removes the &aa; module from the kernel. However,
      unloading modules from the Linux kernel is unsafe. This command is
      provided only for debugging and emergencies (when the module might
      need to be removed).
     </para>
<?dbfo-need height="20em"?>
     <warning>
      <para>
       &aa; is a powerful access control system and it is possible to lock
       yourself out of your own machine to the point where you must boot the
       machine from a rescue medium (such as the first medium of
       <phrase os="sles;sled;osuse">&productname;</phrase><phrase os="slert"
        >&slert;</phrase>)
       to regain control.
      </para>
      <para>
       To prevent such a problem, always ensure that you have a running,
       unconfined, &rootuser; login on the machine being configured when you
       restart the &aa; module. If you damage your system to the point where
       logins are no longer possible (for example, by breaking the profile
       associated with the SSH daemon), you can repair the damage using your
       running &rootuser; prompt then restarting the &aa; module.
      </para>
     </warning>
    </listitem>
   </varlistentry>
  </variablelist>
 </sect1>
 <sect1 id="sec.apparmor.commandline.build">
  <title>Building &aa; Profiles</title>

  <para>
   The &aa; module profile definitions are stored in the
   <filename>/etc/apparmor.d</filename> directory as plain text files. For a
   detailed description of the syntax of these files, refer to
   <xref
    linkend="cha.apparmor.profiles"/>.
  </para>

  <para>
   All files in the <filename>/etc/apparmor.d</filename> directory are
   interpreted as profiles and are loaded as such. Renaming files in that
   directory is not an effective way of preventing profiles from being
   loaded. You must remove profiles from this directory to prevent them from
   being read and evaluated effectively.
  </para>

  <para>
   You can use a text editor, such as vim, to access and make changes to
   these profiles. The following options contain detailed steps for building
   profiles:
  </para>

  <variablelist>
   <varlistentry>
    <term>Adding or Creating &aa; Profiles</term>
    <listitem>
     <para>
      Refer to <xref linkend="sec.apparmor.commandline.add"/>
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Editing &aa; Profiles</term>
    <listitem>
     <para>
      Refer to <xref linkend="sec.apparmor.commandline.edit"/>
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Deleting &aa; Profiles</term>
    <listitem>
     <para>
      Refer to
      <xref xrefstyle="SectTitleOnPage" linkend="sec.apparmor.commandline.del"/>
     </para>
    </listitem>
   </varlistentry>
  </variablelist>

<!-- Code 10 doesn't have apparmor.vim. Maybe next release ...
   <para>
   Use vim to view and edit your profile by typing <command>vim</command> in a
   terminal window. To enable syntax highlighting when you edit an &aa; 
  profile in 
   vim, use the commands <command>:syntax on</command> then <command>:set
   syntax=apparmor</command>. For more information about vim and syntax
   coloring, refer to <xref
   linkend="sec.apparmor.commandline.profiling.summary.vim"/>.
  </para>
   -->
 </sect1>
 <sect1 id="sec.apparmor.commandline.add">
  <title>Adding or Creating an &aa; Profile</title>

  <para>
   To add or create an &aa; profile for an application, you can use a
   systemic or stand-alone profiling method, depending on your needs. Learn
   more about these two approaches in
   <xref
     linkend="sec.apparmor.commandline.profiling"/>.
  </para>
 </sect1>
 <sect1 id="sec.apparmor.commandline.edit">
  <title>Editing an &aa; Profile</title>

  <para>
   The following steps describe the procedure for editing an &aa; profile:
  </para>

  <procedure>
   <step>
    <para>
     If you are not currently logged in as &rootuser;, enter
     <command>su</command> in a terminal window.
    </para>
   </step>
   <step>
    <para>
     Enter the &rootuser; password when prompted.
    </para>
   </step>
   <step>
    <para>
     Go to the profile directory with <command>cd
     /etc/apparmor.d/</command>.
    </para>
   </step>
   <step>
    <para>
     Enter <command>ls</command> to view all profiles currently installed.
    </para>
   </step>
   <step>
    <para>
     Open the profile to edit in a text editor, such as vim.
    </para>
   </step>
   <step>
    <para>
     Make the necessary, changes then save the profile.
    </para>
   </step>
   <step>
    <para>
     Restart &aa; by entering <command>rcapparmor restart</command> in a
     terminal window.
    </para>
   </step>
  </procedure>
 </sect1>
 <sect1 id="sec.apparmor.commandline.del">
  <title>Deleting an &aa; Profile</title>

  <para>
   The following steps describe the procedure for deleting an &aa; profile.
  </para>

  <procedure>
   <step>
    <para>
     If you are not currently logged in as &rootuser;, enter
     <command>su</command> in a terminal window.
    </para>
   </step>
   <step>
    <para>
     Enter the &rootuser; password when prompted.
    </para>
   </step>
   <step>
    <para>
     Go to the &aa; directory with <command>cd /etc/apparmor.d/</command>.
    </para>
   </step>
   <step>
    <para>
     Enter <command>ls</command> to view all the &aa; profiles that are
     currently installed.
    </para>
   </step>
   <step>
    <para>
     Delete the profile with <command>rm
     <replaceable>profilename</replaceable></command>.
    </para>
   </step>
   <step>
    <para>
     Restart &aa; by entering <command>rcapparmor restart</command> in a
     terminal window.
    </para>
   </step>
  </procedure>
 </sect1>
 <sect1 id="sec.apparmor.commandline.profiling">
  <title>Two Methods of Profiling</title>

  <para>
   Given the syntax for &aa; profiles in
   <xref xrefstyle="SectTitleOnPage" linkend="cha.apparmor.profiles"/>, you
   could create profiles without using the tools. However, the effort
   involved would be substantial. To avoid such a hassle, use the &aa; tools
   to automate the creation and refinement of profiles.
  </para>

  <para>
   There are two ways to approach &aa; profile creation. Tools are available
   for both methods.
  </para>

  <variablelist>
   <varlistentry>
    <term>Stand-Alone Profiling</term>
    <listitem>
     <para>
      A method suitable for profiling small applications that have a finite
      run time, such as user client applications like mail clients. For more
      information, refer to
      <xref linkend="sec.apparmor.commandline.profiling.stand-alone"/>.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Systemic Profiling</term>
    <listitem>
     <para>
      A method suitable for profiling large numbers of programs all at once
      and for profiling applications that may run for days, weeks, or
      continuously across reboots, such as network server applications like
      Web servers and mail servers. For more information, refer to
      <xref linkend="sec.apparmor.commandline.profiling.systemic"/>.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>

  <para>
   Automated profile development becomes more manageable with the &aa;
   tools:
  </para>

  <procedure>
   <step>
    <para>
     Decide which profiling method suits your needs.
    </para>
   </step>
   <step>
    <para>
     Perform a static analysis. Run either aa-genprof or aa-autodep,
     depending on the profiling method chosen.
    </para>
   </step>
   <step>
    <para>
     Enable dynamic learning. Activate learning mode for all profiled
     programs.
    </para>
   </step>
  </procedure>

  <sect2 id="sec.apparmor.commandline.profiling.stand-alone">
   <title>Stand-Alone Profiling</title>
   <para>
    Stand-alone profile generation and improvement is managed by a program
    called aa-genprof. This method is easy because aa-genprof takes care of
    everything, but is limited because it requires aa-genprof to run for the
    entire duration of the test run of your program (you cannot reboot the
    machine while you are still developing your profile).
   </para>
   <para>
    To use aa-genprof for the stand-alone method of profiling, refer to
    <xref linkend="sec.apparmor.commandline.profiling.summary.genprof"/>.
   </para>
  </sect2>

  <sect2 id="sec.apparmor.commandline.profiling.systemic">
   <title>Systemic Profiling</title>
   <para>
    This method is called <emphasis>systemic profiling</emphasis> because it
    updates all of the profiles on the system at once, rather than focusing
    on the one or few targeted by aa-genprof or stand-alone profiling. With
    systemic profiling, profile construction and improvement are somewhat
    less automated, but more flexible. This method is suitable for profiling
    long-running applications whose behavior continues after rebooting, or a
    large number of programs all at once.
   </para>
   <para>
    Build an &aa; profile for a group of applications as follows:
   </para>
   <procedure>
    <step>
     <para>
      Create profiles for the individual programs that make up your
      application.
     </para>
     <para>
      Although this approach is systemic, &aa; only monitors those programs
      with profiles and their children. To get &aa; to consider a program,
      you must at least have aa-autodep create an approximate profile for
      it. To create this approximate profile, refer to
      <xref linkend="sec.apparmor.commandline.profiling.summary.autodep"/>.
     </para>
    </step>
    <step>
     <para>
      Put relevant profiles into learning or complain mode.
     </para>
     <para>
      Activate learning or complain mode for all profiled programs by
      entering <command>aa-complain /etc/apparmor.d/*</command> in a
      terminal window while logged in as &rootuser;. This functionality is
      also available through the &yast; Profile Mode module, described in
      <xref
	linkend="sec.apparmor.yast.manage.profmodes"/>.
     </para>
     <para>
      When in learning mode, access requests are not blocked, even if the
      profile dictates that they should be. This enables you to run through
      several tests (as shown in
      <xref linkend="st.apparmor.commandline.profiling.systemic.exec"/>) and
      learn the access needs of the program so it runs properly. With this
      information, you can decide how secure to make the profile.
     </para>
     <para>
      Refer to
      <xref linkend="sec.apparmor.commandline.profiling.summary.complain"/>
      for more detailed instructions for using learning or complain mode.
     </para>
    </step>
    <step id="st.apparmor.commandline.profiling.systemic.exec">
     <para>
      Exercise your application.
     </para>
     <para>
      Run your application and exercise its functionality. How much to
      exercise the program is up to you, but you need the program to access
      each file representing its access needs. Because the execution is not
      being supervised by aa-genprof, this step can go on for days or weeks
      and can span complete system reboots.
     </para>
    </step>
    <step id="st.apparmor.commandline.profiling.systemic.log">
     <para>
      Analyze the log.
     </para>
     <para>
      In systemic profiling, run aa-logprof directly instead of letting
      aa-genprof run it (as in stand-alone profiling). The general form of
      aa-logprof is:
     </para>
<screen>aa-logprof [ -d <replaceable>/path/to/profiles</replaceable> ] [ -f <replaceable>/path/to/logfile</replaceable> ]</screen>
     <para>
      Refer to
      <xref linkend="sec.apparmor.commandline.profiling.summary.logprof"/>
      for more information about using aa-logprof.
     </para>
    </step>
    <step>
     <para>
      Repeat
      <xref linkend="st.apparmor.commandline.profiling.systemic.exec"/> and
      <xref linkend="st.apparmor.commandline.profiling.systemic.log"/>.
     </para>
     <para>
      This generates optimum profiles. An iterative approach captures
      smaller data sets that can be trained and reloaded into the policy
      engine. Subsequent iterations generate fewer messages and run faster.
     </para>
    </step>
    <step>
     <para>
      Edit the profiles.
     </para>
     <para>
      You might want to review the profiles that have been generated. You
      can open and edit the profiles in
      <filename>/etc/apparmor.d/</filename> using vim.
<!-- For help using vim to its fullest capacity, refer to
       <xref xrefstyle="HeadingOnPage" linkend="sec.apparmor.commandline.profiling.summary.vim"/>. -->
<!-- no
       apparmor.vim in Code10-->
     </para>
    </step>
    <step>
     <para>
      Return to enforce mode.
     </para>
     <para>
      This is when the system goes back to enforcing the rules of the
      profiles, not just logging information. This can be done manually by
      removing the <literal>flags=(complain)</literal> text from the
      profiles or automatically by using the <command>aa-enforce</command>
      command, which works identically to the <command>aa-complain</command>
      command, except it sets the profiles to enforce mode. This
      functionality is also available through the &yast; Profile Mode
      module, described in
      <xref
	linkend="sec.apparmor.yast.manage.profmodes"/>.
     </para>
     <para>
      To ensure that all profiles are taken out of complain mode and put
      into enforce mode, enter <command>aa-enforce
      /etc/apparmor.d/*</command>.
     </para>
    </step>
    <step>
     <para>
      Rescan all profiles.
     </para>
     <para>
      To have &aa; rescan all of the profiles and change the enforcement
      mode in the kernel, enter <command>rcapparmor restart</command>.
     </para>
    </step>
   </procedure>
  </sect2>

  <sect2 id="sec.apparmor.commandline.profiling.summary">
   <title>Summary of Profiling Tools</title>
   <para>
    All of the &aa; profiling utilities are provided by the
    <systemitem>apparmor-utils</systemitem> RPM package and are stored in
    <filename>/usr/sbin</filename>. Each tool has a different purpose.
   </para>
   <sect3 id="sec.apparmor.commandline.profiling.summary.autodep">
    <title>aa-autodep&mdash;Creating Approximate Profiles</title>
    <para>
     This creates an approximate profile for the program or application
     selected. You can generate approximate profiles for binary executables
     and interpreted script programs. The resulting profile is called
     <quote>approximate</quote> because it does not necessarily contain all
     of the profile entries that the program needs to be properly confined
     by &aa;. The minimum aa-autodep approximate profile has, at minimum, a
     base include directive, which contains basic profile entries needed by
     most programs. For certain types of programs, aa-autodep generates a
     more expanded profile. The profile is generated by recursively calling
     <command>ldd(1)</command> on the executables listed on the command
     line.
    </para>
    <para>
     To generate an approximate profile, use the aa-autodep program. The
     program argument can be either the simple name of the program, which
     aa-autodep finds by searching your shell's path variable, or it can be
     a fully qualified path. The program itself can be of any type (ELF
     binary, shell script, Perl script, etc.). aa-autodep generates an
     approximate profile to improve through the dynamic profiling that
     follows.
    </para>
    <para>
     The resulting approximate profile is written to the
     <filename>/etc/apparmor.d</filename> directory using the &aa; profile
     naming convention of naming the profile after the absolute path of the
     program, replacing the forward slash (<literal>/</literal>) characters
     in the path with period (<literal>.</literal>) characters. The general
     form of aa-autodep is to enter the following in a terminal window when
     logged in as &rootuser;:
    </para>
<screen>aa-autodep [ -d <replaceable>/path/to/profiles</replaceable> ] [<replaceable>program1</replaceable> <replaceable>program2</replaceable>...]</screen>
    <para>
     If you do not enter the program name or names, you are prompted for
     them. <replaceable>/path/to/profiles</replaceable> overrides the
     default location of <filename>/etc/apparmor.d</filename>, should you
     keep profiles in a location other than the default.
    </para>
    <para>
     To begin profiling, you must create profiles for each main executable
     service that is part of your application (anything that might start
     without being a child of another program that already has a profile).
     Finding all such programs depends on the application in question. Here
     are several strategies for finding such programs:
    </para>
    <variablelist>
     <varlistentry>
      <term>Directories</term>
      <listitem>
       <para>
        If all the programs to profile are in one directory and there are no
        other programs in that directory, the simple command
        <command>aa-autodep
        <replaceable>/path/to/your/programs/*</replaceable></command>
        creates basic profiles for all programs in that directory.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>ps command</term>
      <listitem>
       <para>
        You can run your application and use the standard Linux
        <command>ps</command> command to find all processes running. Then
        manually hunt down the location of these programs and run the
        <command>aa-autodep</command> for each one. If the programs are in
        your path, aa-autodep finds them for you. If they are not in your
        path, the standard Linux command <command>find</command> might be
        helpful in finding your programs. Execute <command>find / -name
        '<replaceable>my_application</replaceable>' -print</command> to
        determine an application's path
        (<replaceable>my_application</replaceable> being an example
        application). You may use wild cards if appropriate.
       </para>
      </listitem>
     </varlistentry>
    </variablelist>
   </sect3>
   <sect3 id="sec.apparmor.commandline.profiling.summary.complain">
    <title>aa-complain&mdash;Entering Complain or Learning Mode</title>
    <para>
     The complain or learning mode tool (aa-complain) detects violations of
     &aa; profile rules, such as the profiled program accessing files not
     permitted by the profile. The violations are permitted, but also
     logged. To improve the profile, turn complain mode on, run the program
     through a suite of tests to generate log events that characterize the
     program's access needs, then postprocess the log with the &aa; tools to
     transform log events into improved profiles.
    </para>
    <para>
     Manually activating complain mode (using the command line) adds a flag
     to the top of the profile so that <literal>/bin/foo</literal> becomes
     <literal>/bin/foo flags=(complain)</literal>. To use complain mode,
     open a terminal window and enter one of the following lines as
     &rootuser;:
    </para>
    <itemizedlist>
     <listitem>
      <para>
       If the example program (<replaceable>program1</replaceable>) is in
       your path, use:
      </para>
<screen>aa-complain [<replaceable>program1</replaceable> <replaceable>program2</replaceable> ...]</screen>
     </listitem>
     <listitem>
      <para>
       If the program is not in your path, specify the entire path as
       follows:
      </para>
<screen>aa-complain /sbin/<replaceable>program1</replaceable>
</screen>
     </listitem>
     <listitem>
      <para>
       If the profiles are not in <filename>/etc/apparmor.d</filename>, use
       the following to override the default location:
      </para>
<screen>aa-complain <replaceable>/path/to/profiles/</replaceable> <replaceable>program1</replaceable>
     </screen>
     </listitem>
     <listitem>
      <para>
       Specify the profile for <replaceable>program1</replaceable> as
       follows:
      </para>
<screen>aa-complain /etc/apparmor.d/sbin.<replaceable>program1</replaceable></screen>
     </listitem>
    </itemizedlist>
    <para>
     Each of the above commands activates the complain mode for the profiles
     or programs listed. If the program name does not include its entire
     path, aa-complain searches <envar>$PATH</envar> for the program. For
     instance, <command>aa-complain /usr/sbin/*</command> finds profiles
     associated with all of the programs in <filename>/usr/sbin</filename>
     and puts them into complain mode. <command>aa-complain
     /etc/apparmor.d/*</command> puts all of the profiles in
     <filename>/etc/apparmor.d</filename> into complain mode.
    </para>
    <tip>
     <title>Toggling Profile Mode with &yast;</title>
     <para>
      &yast; offers a graphical front-end for toggling complain and enforce
      mode. See <xref linkend="sec.apparmor.yast.manage.profmodes"/> for
      information.
     </para>
    </tip>
   </sect3>
   <sect3 id="sec.apparmor.commandline.profiling.summary.enforce">
    <title>aa-enforce&mdash;Entering Enforce Mode</title>
    <para>
     The enforce mode detects violations of &aa; profile rules, such as the
     profiled program accessing files not permitted by the profile. The
     violations are logged and not permitted. The default is for enforce
     mode to be enabled. To log the violations only, but still permit them,
     use complain mode. Enforce toggles with complain mode.
    </para>
    <para>
     Manually activating enforce mode (using the command line) adds a flag
     to the top of the profile so that <literal>/bin/foo</literal> becomes
     <literal>/bin/foo flags=(enforce)</literal>. To use enforce mode, open
     a terminal window and enter one of the following lines as &rootuser;.
    </para>
    <itemizedlist>
     <listitem>
      <para>
       If the example program (<replaceable>program1</replaceable>) is in
       your path, use:
      </para>
<screen>aa-enforce [<replaceable>program1</replaceable> <replaceable>program2</replaceable> ...]</screen>
     </listitem>
     <listitem>
      <para>
       If the program is not in your path, specify the entire path, as
       follows:
      </para>
<screen>aa-enforce /sbin/<replaceable>program1</replaceable></screen>
     </listitem>
     <listitem>
      <para>
       If the profiles are not in
       <replaceable>/etc/apparmor.d</replaceable>, use the following to
       override the default location:
      </para>
<screen>aa-enforce <replaceable>/path/to/profiles/program1</replaceable></screen>
     </listitem>
     <listitem>
      <para>
       Specify the profile for <replaceable>program1</replaceable> as
       follows:
      </para>
<screen>aa-enforce /etc/apparmor.d/sbin.<replaceable>program1</replaceable></screen>
     </listitem>
    </itemizedlist>
    <para>
     Each of the above commands activates the enforce mode for the profiles
     and programs listed.
    </para>
    <para>
     If you do not enter the program or profile names, you are prompted to
     enter one. <replaceable>/path/to/profiles</replaceable> overrides the
     default location of <filename>/etc/apparmor.d</filename>.
    </para>
    <para>
     The argument can be either a list of programs or a list of profiles. If
     the program name does not include its entire path, aa-enforce searches
     <envar>$PATH</envar> for the program.
    </para>
    <tip>
     <title>Toggling Profile Mode with &yast;</title>
     <para>
      &yast; offers a graphical front-end for toggling complain and enforce
      mode. See <xref linkend="sec.apparmor.yast.manage.profmodes"/> for
      information.
     </para>
    </tip>
   </sect3>
   <sect3 id="sec.apparmor.commandline.profiling.summary.genprof">
    <title>aa-genprof&mdash;Generating Profiles</title>
    <para>
     aa-genprof is &aa;'s profile generating utility. It runs aa-autodep on
     the specified program, creating an approximate profile (if a profile
     does not already exist for it), sets it to complain mode, reloads it
     into &aa;, marks the log, and prompts the user to execute the program
     and exercise its functionality. Its syntax is as follows:
    </para>
<screen>aa-genprof [ -d <replaceable>/path/to/profiles</replaceable> ]  <replaceable>program</replaceable></screen>
    <para>
     To create a profile for the the Apache Web server program
     httpd2-prefork, do the following as &rootuser;:
    </para>
    <procedure>
     <step>
      <para>
       Enter <command>rcapache2 stop</command>.
      </para>
     </step>
     <step>
      <para>
       Next, enter <command>aa-genprof httpd2-prefork</command>.
      </para>
      <para>
       Now aa-genprof does the following:
      </para>
      <orderedlist>
       <listitem>
        <para>
         Resolves the full path of httpd2-prefork using your shell's path
         variables. You can also specify a full path. On
         <phrase
	  os="sles;sled;osuse">&productname;</phrase><phrase
	  os="slert">&slert;</phrase>,
         the default full path is
         <filename>/usr/sbin/httpd2-prefork</filename>.
        </para>
       </listitem>
       <listitem>
        <para>
         Checks to see if there is an existing profile for httpd2-prefork.
         If there is one, it updates it. If not, it creates one using the
         aa-autodep as described in
         <xref linkend="sec.apparmor.commandline.profiling.summary"/>.
        </para>
       </listitem>
       <listitem>
        <para>
         Puts the profile for this program into learning or complain mode so
         that profile violations are logged, but are permitted to proceed. A
         log event looks like this (see
         <filename>/var/log/audit/audit.log</filename>):
        </para>
<screen>type=APPARMOR_ALLOWED msg=audit(1189682639.184:20816): operation="file_mmap" requested_mask="::r" denied_mask="::r" fsuid=30 name="/srv/www/htdocs/index.html" pid=27471 profile="null-complain-profile"
</screen>
        <para>
         If you are not running the audit daemon, the &aa; events are logged
         to <filename>/var/log/messages</filename>:
        </para>
<screen>Sep 13 13:20:30 K23 kernel: audit(1189682430.672:20810): operation="file_mmap" requested_mask="::r" denied_mask="::r" fsuid=30 name="/srv/www/htdocs/phpsysinfo/templates/bulix/form.tpl" pid=30405 profile="/usr/sbin/httpd2-prefork///phpsysinfo/"</screen>
        <para>
         They also can be viewed using the <command>dmesg</command> command:
        </para>
<screen>audit(1189682430.672:20810): operation="file_mmap" requested_mask="::r" denied_mask="::r" fsuid=30 name="/srv/www/htdocs/phpsysinfo/templates/bulix/form.tpl" pid=30405 profile="/usr/sbin/httpd2-prefork///phpsysinfo/"</screen>
       </listitem>
       <listitem>
        <para>
         Marks the log with a beginning marker of log events to consider.
         For example:
        </para>
<screen>
Sep 13 17:48:52 figwit root: GenProf: e2ff78636296f16d0b5301209a04430d</screen>
       </listitem>
      </orderedlist>
     </step>
     <step>
      <para>
       When prompted by the tool, run the application to profile in another
       terminal window and perform as many of the application functions as
       possible. Thus, the learning mode can log the files and directories
       to which the program requires access in order to function properly.
       For example, in a new terminal window, enter <command>rcapache2
       start</command>.
      </para>
     </step>
     <step>
      <para>
       Select from the following options that are available in the
       aa-logprof terminal window after you have executed the program
       function:
      </para>
      <itemizedlist>
       <listitem>
        <para>
         <keycap>S</keycap> runs aa-logprof on the system log from where it
         was marked when aa-genprof was started and reloads the profile. If
         system events exist in the log, &aa; parses the learning mode log
         files. This generates a series of questions that you must answer to
         guide aa-genprof in generating the security profile.
        </para>
       </listitem>
       <listitem>
        <para>
         <keycap>F</keycap> exits the tool and returns to the main menu.
        </para>
       </listitem>
      </itemizedlist>
      <note>
       <para>
        If requests to add hats appear, proceed to
        <xref linkend="cha.apparmor.hat"/>.
       </para>
      </note>
     </step>
     <step>
      <para>
       Answer two types of questions:
      </para>
      <itemizedlist>
       <listitem>
        <para>
         A resource is requested by a profiled program that is not in the
         profile (see
         <xref linkend="ex.apparmor.commandline.profiling.summary.genprof.learn"/>).
        </para>
       </listitem>
       <listitem>
        <para>
         A program is executed by the profiled program and the security
         domain transition has not been defined (see
         <xref
	  linkend="ex.apparmor.commandline.profiling.summary.genprof.perms"/>).
        </para>
       </listitem>
      </itemizedlist>
      <para>
       Each of these categories results in a series of questions that you
       must answer to add the resource or program to the profile.
       <xref
	linkend="ex.apparmor.commandline.profiling.summary.genprof.learn"/>
       and
       <xref
	linkend="ex.apparmor.commandline.profiling.summary.genprof.perms"/>
       provide examples of each one. Subsequent steps describe your options
       in answering these questions.
      </para>
      <itemizedlist>
       <listitem>
        <para>
         Dealing with execute accesses is complex. You must decide how to
         proceed with this entry regarding which execute permission type to
         grant to this entry:
        </para>
        <example id="ex.apparmor.commandline.profiling.summary.genprof.learn">
         <title>Learning Mode Exception: Controlling Access to Specific Resources</title>
<screen>Reading log entries from /var/log/audit/audit.log.
Updating AppArmor profiles in /etc/apparmor.d.

Profile:  /usr/sbin/xinetd
Program:  xinetd
Execute:  /usr/lib/cups/daemon/cups-lpd
Severity: unknown

[(I)nherit] / (P)rofile / (U)nconfined / (D)eny / Abo(r)t / (F)inish
</screen>
        </example>
        <variablelist>
         <varlistentry>
          <term>Inherit (ix)</term>
          <listitem>
           <para>
            The child inherits the parent's profile, running with the same
            access controls as the parent. This mode is useful when a
            confined program needs to call another confined program without
            gaining the permissions of the target's profile or losing the
            permissions of the current profile. This mode is often used when
            the child program is a <emphasis>helper application</emphasis>,
            such as the <command>/usr/bin/mail</command> client using
            <command>less</command> as a pager or the Mozilla* Web browser
            using Adobe Acrobat* to display PDF files.
           </para>
          </listitem>
         </varlistentry>
         <varlistentry>
          <term>Profile (px)</term>
          <listitem>
           <para>
            The child runs using its own profile, which must be loaded into
            the kernel. If the profile is not present, attempts to execute
            the child fail with permission denied. This is most useful if
            the parent program is invoking a global service, such as DNS
            lookups or sending mail with your system's MTA.
           </para>
           <para>
            Choose the <guimenu>profile with clean exec</guimenu> (Px)
            option to scrub the environment of environment variables that
            could modify execution behavior when passed to the child
            process.
           </para>
          </listitem>
         </varlistentry>
         <varlistentry>
          <term>Unconfined (ux)</term>
          <listitem>
           <para>
            The child runs completely unconfined without any &aa; profile
            applied to the executed resource.
           </para>
           <para>
            Choose the <guimenu>unconfined with clean exec</guimenu> (Ux)
            option to scrub the environment of environment variables that
            could modify execution behavior when passed to the child
            process. This option introduces a security vulnerability that
            could be used to exploit &aa;. Only use it as a last resort.
           </para>
          </listitem>
         </varlistentry>
         <varlistentry>
          <term>mmap (m)</term>
          <listitem>
           <para>
            This permission denotes that the program running under the
            profile can access the resource using the mmap system call with
            the flag <envar>PROT_EXEC</envar>. This means that the data
            mapped in it can be executed. You are prompted to include this
            permission if it is requested during a profiling run.
           </para>
          </listitem>
         </varlistentry>
         <varlistentry>
          <term>Deny</term>
          <listitem>
           <para>
            Prevents the program from accessing the specified directory path
            entries. &aa; then continues to the next event.
           </para>
          </listitem>
         </varlistentry>
         <varlistentry>
          <term>Abort</term>
          <listitem>
           <para>
            Aborts aa-logprof, losing all rule changes entered so far and
            leaving all profiles unmodified.
           </para>
          </listitem>
         </varlistentry>
         <varlistentry>
          <term>Finish</term>
          <listitem>
           <para>
            Closes aa-logprof, saving all rule changes entered so far and
            modifying all profiles.
           </para>
          </listitem>
         </varlistentry>
        </variablelist>
       </listitem>
       <listitem>
        <para>
         <xref linkend="ex.apparmor.commandline.profiling.summary.genprof.perms"/>
         shows &aa; suggesting directory path entries that have been
         accessed by the application being profiled. It might also require
         you to define execute permissions for entries.
        </para>
        <example id="ex.apparmor.commandline.profiling.summary.genprof.perms">
         <title>Learning Mode Exception: Defining Execute Permissions for an Entry</title>
<screen>Adding /bin/ps ix to profile.

Profile:  /usr/sbin/xinetd
Path:     /etc/hosts.allow
New Mode: r

 [1 - /etc/hosts.allow]

[(A)llow] / (D)eny / (N)ew / (G)lob / Glob w/(E)xt / Abo(r)t / (F)inish
</screen>
        </example>
        <para>
         &aa; provides one or more paths or includes. By entering the option
         number, select the desired options then proceed to the next step.
        </para>
        <note>
         <para>
          All of these options are not always presented in the &aa; menu.
         </para>
        </note>
        <variablelist>
         <varlistentry>
          <term><literal>#include</literal>
          </term>
          <listitem>
           <para>
            This is the section of an &aa; profile that refers to an include
            file, which procures access permissions for programs. By using
            an include, you can give the program access to directory paths
            or files that are also required by other programs. Using
            includes can reduce the size of a profile. It is good practice
            to select includes when suggested.
           </para>
          </listitem>
         </varlistentry>
         <varlistentry>
          <term>Globbed Version</term>
          <listitem>
           <para>
            This is accessed by selecting <guimenu>Glob</guimenu> as
            described in the next step. For information about globbing
            syntax, refer to <xref linkend="sec.apparmor.profiles.glob"/>.
           </para>
          </listitem>
         </varlistentry>
         <varlistentry>
          <term>Actual Path</term>
          <listitem>
           <para>
            This is the literal path to which the program needs access so
            that it can run properly.
           </para>
          </listitem>
         </varlistentry>
        </variablelist>
        <para>
         After you select the path or include, process it as an entry into
         the &aa; profile by selecting <guimenu>Allow</guimenu> or
         <guimenu>Deny</guimenu>. If you are not satisfied with the
         directory path entry as it is displayed, you can also
         <guimenu>Glob</guimenu> it.
        </para>
        <para>
         The following options are available to process the learning mode
         entries and build the profile:
        </para>
        <variablelist>
         <varlistentry>
          <term>Select <keycap function="enter"/>
          </term>
          <listitem>
           <para>
            Allows access to the selected directory path.
           </para>
          </listitem>
         </varlistentry>
         <varlistentry>
          <term>Allow</term>
          <listitem>
           <para>
            Allows access to the specified directory path entries. &aa;
            suggests file permission access. For more information, refer to
            <xref linkend="sec.apparmor.profiles.perm"/>.
           </para>
          </listitem>
         </varlistentry>
         <varlistentry>
          <term>Deny</term>
          <listitem>
           <para>
            Prevents the program from accessing the specified directory path
            entries. &aa; then continues to the next event.
           </para>
          </listitem>
         </varlistentry>
         <varlistentry>
          <term>New</term>
          <listitem>
           <para>
            Prompts you to enter your own rule for this event, allowing you
            to specify a regular expression. If the expression does not
            actually satisfy the event that prompted the question in the
            first place, &aa; asks for confirmation and lets you reenter the
            expression.
           </para>
          </listitem>
         </varlistentry>
         <varlistentry>
          <term>Glob</term>
          <listitem>
           <para>
            Select a specific path or create a general rule using wild cards
            that match a broader set of paths. To select any of the offered
            paths, enter the number that is printed in front of the path
            then decide how to proceed with the selected item.
           </para>
           <para>
            For more information about globbing syntax, refer to
            <xref linkend="sec.apparmor.profiles.glob"/>.
           </para>
          </listitem>
         </varlistentry>
         <varlistentry>
          <term>Glob w/Ext</term>
          <listitem>
           <para>
            This modifies the original directory path while retaining the
            filename extension. For example,
            <filename>/etc/apache2/file.ext</filename> becomes
            <filename>/etc/apache2/*.ext</filename>, adding the wild card
            (asterisk) in place of the filename. This allows the program to
            access all files in the suggested directory that end with the
            <literal>.ext</literal> extension.
           </para>
          </listitem>
         </varlistentry>
         <varlistentry>
          <term>Abort</term>
          <listitem>
           <para>
            Aborts aa-logprof, losing all rule changes entered so far and
            leaving all profiles unmodified.
           </para>
          </listitem>
         </varlistentry>
         <varlistentry>
          <term>Finish</term>
          <listitem>
           <para>
            Closes aa-logprof, saving all rule changes entered so far and
            modifying all profiles.
           </para>
          </listitem>
         </varlistentry>
        </variablelist>
       </listitem>
      </itemizedlist>
     </step>
     <step>
      <para>
       To view and edit your profile using vim, enter <command>vim
       /etc/apparmor.d/<replaceable>profilename</replaceable></command> in a
       terminal window.
<!-- To enable syntax highlighting when editing an
       &aa; profile in vim, use the commands
       <command>:syntax on</command> then <command>:set
       syntax=apparmor</command>. For more information about about vim and
       syntax highlighting, refer to
       <xref linkend="sec.apparmor.commandline.profiling.summary.vim"/>. -->
      </para>
     </step>
     <step>
      <para>
       Restart &aa; and reload the profile set including the newly created
       one using the <command>rcapparmor <option>restart</option></command>
       command.
      </para>
     </step>
    </procedure>
    <para>
     Like the graphical front-end for building &aa; profiles, the &yast; Add
     Profile Wizard, aa-genprof also supports the use of the local profile
     repository under
     <filename>/etc/apparmor/profiles/extras</filename><phrase
      os="sles;osuse;sled">
     and the remote &aa; profile repository</phrase>.
    </para>
    <para>
     To use a profile from the local repository, proceed as follows:
    </para>
    <procedure>
     <step>
      <para>
       Start aa-genprof as described above.
      </para>
      <para>
       If aa-genprof finds an inactive local profile, the following lines
       appear on your terminal window:
      </para>
<screen>Profile: /usr/bin/opera

 [1 - Inactive local profile for /usr/bin/opera]

[(V)iew Profile] / (U)se Profile / (C)reate New Profile / Abo(r)t / (F)inish</screen>
     </step>
     <step>
      <para>
       If you want to just use this profile, hit <keycap>U</keycap>
       (<guimenu>Use Profile</guimenu>) and follow the profile generation
       procedure outlined above.
      </para>
      <para>
       If you want to examine the profile before activating it, hit
       <keycap>V</keycap> (<guimenu>View Profile</guimenu>).
      </para>
      <para>
       If you want to ignore the existing profile, hit <keycap>C</keycap>
       (<guimenu>Create New Profile</guimenu>) and follow the profile
       generation procedure outlined above to create the profile from
       scratch.
      </para>
     </step>
     <step>
      <para>
       Leave aa-genprof by hitting <keycap>F</keycap>
       (<guimenu>Finish</guimenu>) when you are done and save your changes.
      </para>
     </step>
    </procedure>
    <para os="sles;sled;osuse">
     To use the remote &aa; profile repository with aa-genprof, proceed as
     follows:
    </para>
    <procedure os="sles;sled;osuse">
     <step>
      <para>
       Start aa-genprof as described above.
      </para>
      <para>
       If aa-genprof detects a suitable profile on the repository server,
       the following lines appear on your terminal window:
      </para>
<screen>Repository: http://apparmor.opensuse.org/backend/api

Would you like to enable access to the profile repository?

(E)nable Repository / (D)isable Repository / Ask Me (L)ater
</screen>
     </step>
     <step>
      <para>
       Hit <keycap>E</keycap> (<guimenu>Enable Repository</guimenu>) to
       enable the repository.
      </para>
     </step>
     <step>
      <para>
       Determine whether you want to aa-genprof to upload any profiles to
       the repository server:
      </para>
<screen>Would you like to upload newly created and changed profiles to
      the profile repository?

(Y)es / (N)o / Ask Me (L)ater
</screen>
      <para>
       Hit <keycap>Y</keycap> (<guimenu>Yes</guimenu>), if you want to
       enable profile upload or select <keycap>N</keycap>
       (<guimenu>No</guimenu>), if you want aa-genprof to just pull profiles
       from the repository, but not to upload any.
      </para>
     </step>
     <step>
      <para>
       Create a new user on the profile repository server to be able to
       upload profiles. Provide username and password.
      </para>
     </step>
     <step>
      <para>
       Determine whether you want to use the profile downloaded from the
       server or whether you would just like to review it:
      </para>
<screen>Profile: /usr/bin/opera

 [1 - novell]

[(V)iew Profile] / (U)se Profile / (C)reate New Profile / Abo(r)t / (F)inish
</screen>
      <para>
       If you want to just use this profile, hit <keycap>U</keycap>
       (<guimenu>Use Profile</guimenu>) and follow the profile generation
       procedure outlined above.
      </para>
      <para>
       If you want to examine the profile before activating it, hit
       <keycap>V</keycap> (<guimenu>View Profile</guimenu>).
      </para>
      <para>
       If you want to ignore the existing profile, hit <keycap>C</keycap>
       (<guimenu>Create New Profile</guimenu>) and follow the profile
       generation procedure outlined above to create the profile from
       scratch.
      </para>
     </step>
     <step>
      <para>
       Leave aa-genprof by hitting <keycap>F</keycap>
       (<guimenu>Finish</guimenu>) when you are done and save the profile.
      </para>
      <para>
       If you opted for uploading your profile, provide a short change log
       and push it to the repository.
      </para>
     </step>
    </procedure>
   </sect3>
   <sect3 id="sec.apparmor.commandline.profiling.summary.logprof">
    <title>aa-logprof&mdash;Scanning the System Log</title>
    <para>
     aa-logprof is an interactive tool used to review the learning or
     complain-mode output found in the log entries in
     <filename>/var/log/audit/audit.log</filename> or
     <filename>/var/log/messages</filename> (if auditd is not running) and
     generate new entries in &aa; security profiles.
    </para>
    <para>
     When you run aa-logprof, it begins to scan the log files produced in
     learning or complain mode and, if there are new security events that
     are not covered by the existing profile set, it gives suggestions for
     modifying the profile. The learning or complain mode traces program
     behavior and enters it in the log. aa-logprof uses this information to
     observe program behavior.
    </para>
    <para>
     If a confined program forks and executes another program, aa-logprof
     sees this and asks the user which execution mode should be used when
     launching the child process. The execution modes
     <emphasis>ix</emphasis>, <emphasis>px</emphasis>,
     <emphasis>Px</emphasis>, <emphasis>ux</emphasis>, and
     <emphasis>Ux</emphasis> are options for starting the child process. If
     a separate profile exists for the child process, the default selection
     is <emphasis>px</emphasis>. If one does not exist, the profile defaults
     to <emphasis>ix</emphasis>. Child processes with separate profiles have
     aa-autodep run on them and are loaded into &aa;, if it is running.
    </para>
    <para>
     When aa-logprof exits, profiles are updated with the changes. If the
     &aa; module is running, the updated profiles are reloaded and, if any
     processes that generated security events are still running in the
     null-complain-profile, those processes are set to run under their
     proper profiles.
    </para>
    <tip os="sles;sled;osuse">
     <title>Support for the External Profile Repository</title>
     <para>
      Similar to the aa-genprof, aa-logprof also supports profile exchange
      with the external repository server. For background information on the
      use of the external &aa; profile repository, refer to
      <xref
     linkend="cha.apparmor.repos"/>. For details on how to
      configure access and access mode to the server, check the procedure
      described under
      <xref
     linkend="sec.apparmor.commandline.profiling.summary.genprof"/>.
     </para>
    </tip>
    <para>
     To run aa-logprof, enter <command>aa-logprof</command> into a terminal
     window while logged in as &rootuser;. The following options can be used
     for aa-logprof:
    </para>
    <variablelist>
     <varlistentry>
      <term><command>aa-logprof -d <replaceable>/path/to/profile/directory/</replaceable></command>
      </term>
      <listitem>
       <para>
        Specifies the full path to the location of the profiles if the
        profiles are not located in the standard directory,
        <filename>/etc/apparmor.d/</filename>.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><command>aa-logprof -f <replaceable>/path/to/logfile/</replaceable></command>
      </term>
      <listitem>
       <para>
        Specifies the full path to the location of the log file if the log
        file is not located in the default directory,
        <filename>/var/log/audit/audit.log</filename> or
        <filename>/var/log/messages</filename> (if auditd is not running).
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><command>aa-logprof -m "string marker in logfile"</command>
      </term>
      <listitem>
       <para>
        Marks the starting point for aa-logprof to look in the system log.
        aa-logprof ignores all events in the system log before the specified
        mark. If the mark contains spaces, it must be surrounded by quotes
        to work correctly. For example:
       </para>
<screen>aa-logprof -m"17:04:21"</screen>
       <para>
        or
       </para>
<screen>logprof -m e2ff78636296f16d0b5301209a04430d</screen>
      </listitem>
     </varlistentry>
    </variablelist>
    <para>
     aa-logprof scans the log, asking you how to handle each logged event.
     Each question presents a numbered list of &aa; rules that can be added
     by pressing the number of the item on the list.
    </para>
    <para>
     By default, aa-logprof looks for profiles in
     <filename>/etc/apparmor.d/</filename> and scans the log in
     <filename>/var/log/messages</filename>. In many cases, running
     <command>aa-logprof</command> as &rootuser; is enough to create the
     profile.
    </para>
    <para>
     However, there might be times when you need to search archived log
     files, such as if the program exercise period exceeds the log rotation
     window (when the log file is archived and a new log file is started).
     If this is the case, you can enter <command>zcat -f `ls -1tr
     /var/log/messages*` | aa-logprof -f -</command>.
    </para>
   </sect3>
   <sect3 id="sec.apparmor.commandline.profiling.summary.logprof_ex1">
    <title>aa-logprof Example 1</title>
    <para>
     The following is an example of how aa-logprof addresses httpd2-prefork
     accessing the file <filename>/etc/group</filename>.
     <literal>[]</literal> indicates the default option.
    </para>
    <para>
     In this example, the access to <command>/etc/group</command> is part of
     httpd2-prefork accessing name services. The appropriate response is
     <literal>1</literal>, which includes a predefined set of &aa; rules.
     Selecting <literal>1</literal> to <literal>#include</literal> the name
     service package resolves all of the future questions pertaining to DNS
     lookups and also makes the profile less brittle in that any changes to
     DNS configuration and the associated name service profile package can
     be made just once, rather than needing to revise many profiles.
    </para>
<screen>
Profile:  /usr/sbin/httpd2-prefork
Path:     /etc/group
New Mode: r

[1 - #include &lt;abstractions/nameservice&gt;]
 2 - /etc/group
[(A)llow] / (D)eny / (N)ew / (G)lob / Glob w/(E)xt / Abo(r)t / (F)inish
</screen>
    <para>
     Select one of the following responses:
    </para>
    <variablelist>
     <varlistentry>
      <term>Select <keycap function="enter"/>
      </term>
      <listitem>
       <para>
        Triggers the default action, which is, in this example, allowing
        access to the specified directory path entry.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>Allow</term>
      <listitem>
       <para>
        Allows access to the specified directory path entries. &aa; suggests
        file permission access. For more information about this, refer to
        <xref linkend="sec.apparmor.profiles.perm"/>.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>Deny</term>
      <listitem>
       <para>
        Prevents the program from accessing the specified directory path
        entries. &aa; then continues to the next event.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>New</term>
      <listitem>
       <para>
        Prompts you to enter your own rule for this event, allowing you to
        specify whatever form of regular expression you want. If the
        expression entered does not actually satisfy the event that prompted
        the question in the first place, &aa; asks for confirmation and lets
        you reenter the expression.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>Glob</term>
      <listitem>
       <para>
        Select either a specific path or create a general rule using wild
        cards that matches on a broader set of paths. To select any of the
        offered paths, enter the number that is printed in front of the
        paths then decide how to proceed with the selected item.
       </para>
       <para>
        For more information about globbing syntax, refer to
        <xref linkend="sec.apparmor.profiles.glob"/>.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>Glob w/Ext</term>
      <listitem>
       <para>
        This modifies the original directory path while retaining the
        filename extension. For example,
        <filename>/etc/apache2/file.ext</filename> becomes
        <filename>/etc/apache2/*.ext</filename>, adding the wild card
        (asterisk) in place of the filename. This allows the program to
        access all files in the suggested directory that end with the
        <literal>.ext</literal> extension.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>Abort</term>
      <listitem>
       <para>
        Aborts aa-logprof, losing all rule changes entered so far and
        leaving all profiles unmodified.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>Finish</term>
      <listitem>
       <para>
        Closes aa-logprof, saving all rule changes entered so far and
        modifying all profiles.
       </para>
      </listitem>
     </varlistentry>
    </variablelist>
   </sect3>
   <sect3 id="sec.apparmor.commandline.profiling.summary.logprof_ex2">
    <title>aa-logprof Example 2</title>
    <para>
     For example, when profiling vsftpd, see this question:
    </para>
<screen>Profile:  /usr/sbin/vsftpd
Path:     /y2k.jpg
New Mode: r

[1 - /y2k.jpg]

(A)llow / [(D)eny] / (N)ew / (G)lob / Glob w/(E)xt / Abo(r)t / (F)inish
</screen>
    <remark role="clarity">
     2006-11-14 - jjaeger: awkward wording. Rephrase for SP1, if possible
     </remark>
    <para>
     Several items of interest appear in this question. First, note that
     vsftpd is asking for a path entry at the top of the tree, even though
     vsftpd on
     <phrase os="sles;sled;osuse">&productname;</phrase><phrase
      os="slert">&slert;</phrase>
     serves FTP files from <filename>/srv/ftp</filename> by default. This is
     because httpd2-prefork uses chroot and, for the portion of the code
     inside the chroot jail, &aa; sees file accesses in terms of the chroot
     environment rather than the global absolute path.
    </para>
    <para>
     The second item of interest is that you might want to grant FTP read
     access to all JPEG files in the directory, so you could use
     <guimenu>Glob w/Ext</guimenu> and use the suggested path of
     <literal>/*.jpg</literal>. Doing so collapses all previous rules
     granting access to individual <literal>.jpg</literal> files and
     forestalls any future questions pertaining to access to
     <filename>.jpg</filename> files.
    </para>
    <para>
     Finally, you might want to grant more general access to FTP files. If
     you select <guimenu>Glob</guimenu> in the last entry, aa-logprof
     replaces the suggested path of <filename>/y2k.jpg</filename> with
     <filename>/*</filename>. Alternatively, you might want to grant even
     more access to the entire directory tree, in which case you could use
     the <guimenu>New</guimenu> path option and enter
     <literal>/**.jpg</literal> (which would grant access to all
     <literal>.jpg</literal> files in the entire directory tree) or
     <filename>/**</filename> (which would grant access to all files in the
     directory tree).
    </para>
    <para>
     These items deal with read accesses. Write accesses are similar, except
     that it is good policy to be more conservative in your use of regular
     expressions for write accesses. Dealing with execute accesses is more
     complex. Find an example in
     <xref
      linkend="ex.apparmor.commandline.profiling.summary.genprof.learn"/>.
    </para>
    <para>
     In the following example, the <filename>/usr/bin/mail</filename> mail
     client is being profiled and aa-logprof has discovered that
     <command>/usr/bin/mail</command> executes
     <command>/usr/bin/less</command> as a helper application to
     <quote>page</quote> long mail messages. Consequently, it presents this
     prompt:
    </para>
<screen>
/usr/bin/nail -&gt; /usr/bin/less
(I)nherit / (P)rofile / (U)nconfined / (D)eny
</screen>
    <tip>
     <para>
      The actual executable file for <filename>/usr/bin/mail</filename>
      turns out to be <filename>/usr/bin/nail</filename>, which is not a
      typographical error.
     </para>
    </tip>
    <para>
     The program <filename>/usr/bin/less</filename> appears to be a simple
     one for scrolling through text that is more than one screen long and
     that is in fact what <filename>/usr/bin/mail</filename> is using it
     for. However, less is actually a large and powerful program that makes
     use of many other helper applications, such as tar and rpm.
    </para>
    <tip>
     <para>
      Run <command>less</command> on a tar file or an RPM file and it shows
      you the inventory of these containers.
     </para>
    </tip>
    <para>
     You do not want to run <command>rpm</command> automatically when
     reading mail messages (that leads directly to a Microsoft*
     Outlook&ndash;style virus attack, because rpm has the power to install
     and modify system programs), so, in this case, the best choice is to
     use <guimenu>Inherit</guimenu>. This results in the less program
     executed from this context running under the profile for
     <filename>/usr/bin/mail</filename>. This has two consequences:
    </para>
    <itemizedlist>
     <listitem>
      <para>
       You need to add all of the basic file accesses for
       <filename>/usr/bin/less</filename> to the profile for
       <filename>/usr/bin/mail</filename>.
      </para>
     </listitem>
     <listitem>
      <para>
       You can avoid adding the helper applications, such as tar and rpm, to
       the <filename>/usr/bin/mail</filename> profile so that when
       <filename>/usr/bin/mail</filename> runs
       <filename>/usr/bin/less</filename> in this context, the less program
       is far less dangerous than it would be without &aa; protection.
      </para>
     </listitem>
    </itemizedlist>
    <para>
     In other circumstances, you might instead want to use the
     <guimenu>Profile</guimenu> option. This has two effects on aa-logprof:
    </para>
    <itemizedlist>
     <listitem>
      <para>
       The rule written into the profile uses px, which forces the
       transition to the child's own profile.
      </para>
     </listitem>
     <listitem>
      <para>
       aa-logprof constructs a profile for the child and starts building it,
       in the same way that it built the parent profile, by assigning events
       for the child process to the child's profile and asking the
       aa-logprof user questions.
      </para>
     </listitem>
    </itemizedlist>
    <para>
     If a confined program forks and executes another program, aa-logprof
     sees this and asks the user which execution mode should be used when
     launching the child process. The execution modes of inherit, profile,
     unconfined or an option to deny the execution are presented.
    </para>
    <para>
     If a separate profile exists for the child process, the default
     selection is profile. If a profile does not exist, the default is
     inherit. The inherit option, or <literal>ix</literal>, is described in
     <xref
      linkend="sec.apparmor.profiles.perm"/>.
    </para>
    <para>
     The profile option indicates that the child program should run in its
     own profile. A secondary question asks whether to sanitize the
     environment that the child program inherits from the parent. If you
     choose to sanitize the environment, this places the execution modifier
     <literal>Px</literal> in your &aa; profile. If you select not to
     sanitize, <literal>px</literal> is placed in the profile and no
     environment sanitizing occurs. The default for the execution mode is
     <literal>px</literal> if you select profile execution mode.
    </para>
    <para>
     The unconfined execution mode is not recommended and should only be
     used in cases where there is no other option to generate a profile for
     a program reliably. Selecting unconfined opens a warning dialog asking
     for confirmation of the choice. If you are sure and choose
     <guimenu>Yes</guimenu>, a second dialog ask whether to sanitize the
     environment. Choosing <guimenu>Yes</guimenu> uses the execution mode
     <literal>Ux</literal> in your profile. Choosing <guimenu>No</guimenu>
     uses the execution mode <literal>ux</literal> for your profile. The
     default value selected is <literal>Ux</literal> for unconfined
     execution mode.
    </para>
    <important>
     <title>Running Unconfined</title>
     <para>
      Choosing <literal>ux</literal> is very dangerous and provides no
      enforcement of policy (from a security perspective) of the resulting
      execution behavior of the child program.
     </para>
    </important>
   </sect3>
<!-- not in Code 10. Will maybe be back later
    <sect3 id="sec.apparmor.commandline.profiling.summary.vim">
     <title>apparmor.vim</title>

   <para>
   A syntax highlighting file for the vim text editor highlights various
   features of an &aa; profile with colors. Using vim and
   the &aa; syntax mode for vim, you can see the semantic
   implications of your profiles with color highlighting. Use vim to view
   and edit your profile by typing vim at a terminal window.
  </para>
   <para>
   To enable the syntax coloring when you edit an &aa;
   profile in vim, use the commands <literal>:syntax on</literal> then
   <literal>:set syntax=apparmor</literal>. Alternatively, you can place
   these lines in your <filename>~/.vimrc</filename> file:
  </para>
   <screen>
syntax on
set modeline
set modelines=5
</screen>
     <para>
   When you enable this feature, vim colors the lines of the profile for
   you: 
  </para>
   
   <variablelist>
   <varlistentry>
   <term>Blue</term> 
   <listitem>
   <para><literal>#include</literal> lines that pull in other &aa; rules
   and comments that begin with <literal>#</literal>
  </para>
  </listitem>
  </varlistentry>      
   <varlistentry>
   <term>White</term>
   <listitem>
   <para>Ordinary read access lines</para>
  </listitem>
  </varlistentry>
   <varlistentry>
   <term>Brown</term>
   <listitem>
   <para>Capability statements and complain flags</para>
  </listitem>
  </varlistentry>
   <varlistentry>
   <term>Yellow</term>
   <listitem>
   <para>Lines that grant write access</para>
  </listitem>
  </varlistentry>
   <varlistentry>
   <term>Green</term>
   <listitem>
   <para>Lines that grant execute permission (either ix or px)</para>
  </listitem></varlistentry>
   <varlistentry>
   <term>Red</term>
   <listitem>
   <para>Lines that grant unconfined access (ux)</para>
  </listitem>
  </varlistentry>
   <varlistentry>
   <term>Red background</term>
   <listitem>
   <para>Syntax errors that are not loading properly into the &aa;
   modules
  </para>
  </listitem>
  </varlistentry>
  </variablelist>     
   
   <note>
   <para>
   There is a security risk when using these lines in your
   <filename>.vimrc</filename> file, because it causes vim to trust the
   syntax mode presented in files you are editing. It might enable an
   attacker to send you a file to open with vim that might do
   something unsafe.
  </para>
  </note>

   <para>
   Use the <systemitem>apparmor.vim</systemitem> and
   <systemitem>vim</systemitem> man pages and the <option>:help</option>
   syntax 
   from within the vim editor for further vim help about syntax
   highlighting. The &aa; syntax is stored in
   <filename>/usr/share/vim/current/syntax/apparmor.vim.</filename>
  </para>
  </sect3>
   -->
   <sect3 id="sec.apparmor.commandline.profiling.summary.unconfined">
    <title>aa-unconfined&mdash;Identifying Unprotected Processes</title>
    <para>
     The <command>aa-unconfined</command> command examines open network
     ports on your system, compares that to the set of profiles loaded on
     your system, and reports network services that do not have &aa;
     profiles. It requires &rootuser; privileges and that it not be confined
     by an &aa; profile.
    </para>
    <para>
     aa-unconfined must be run as &rootuser; to retrieve the process
     executable link from the <filename>/proc</filename> file system. This
     program is susceptible to the following race conditions:
    </para>
    <itemizedlist>
     <listitem>
      <para>
       An unlinked executable is mishandled
      </para>
     </listitem>
     <listitem>
      <para>
       A process that dies between <command>netstat(8)</command> and further
       checks is mishandled
      </para>
     </listitem>
    </itemizedlist>
    <note>
     <para>
      This program lists processes using TCP and UDP only. In short, this
      program is unsuitable for forensics use and is provided only as an aid
      to profiling all network-accessible processes in the lab.
     </para>
    </note>
   </sect3>
  </sect2>
 </sect1>
 <sect1 id="sec.apparmor.commandline.filenames">
  <title>Important Filenames and Directories</title>

  <para>
   The following list contains the most important files and directories used
   by the &aa; framework. If you intend to manage and troubleshoot your
   profiles manually, make sure that you know about these files and
   directories:
  </para>

  <variablelist>
   <varlistentry>
    <term><filename>/sys/kernel/security/apparmor/profiles</filename>
    </term>
    <listitem>
     <para>
      Virtualized file representing the currently loaded set of profiles.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><filename>/etc/apparmor/</filename>
    </term>
    <listitem>
     <para>
      Location of &aa; configuration files.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><filename>/etc/apparmor/profiles/extras/</filename>
    </term>
    <listitem>
     <para>
      A local repository of profiles shipped with &aa;, but not enabled by
      default.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><filename>/etc/apparmor.d/</filename>
    </term>
    <listitem>
     <para>
      Location of profiles, named with the convention of replacing the
      <literal>/</literal> in paths with <literal>.</literal> (not for the
      root <literal>/</literal>) so profiles are easier to manage. For
      example, the profile for the program
      <filename>/usr/sbin/ntpd</filename> is named
      <filename>usr.sbin.ntpd</filename>.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><filename>/etc/apparmor.d/abstractions/</filename>
    </term>
    <listitem>
     <para>
      Location of abstractions.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><filename>/etc/apparmor.d/program-chunks/</filename>
    </term>
    <listitem>
     <para>
      Location of program chunks.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><filename>/proc/*/attr/current</filename>
    </term>
    <listitem>
     <para>
      Check this file to review the confinement status of a process and the
      profile that is used to confine the process. The <command>ps
      <option>auxZ</option></command> command retrieves this information
      automatically.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </sect1>
</chapter>
