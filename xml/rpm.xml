<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//Novell//DTD NovDoc XML V1.0//EN" "novdocx.dtd"
[
  <!ENTITY % NOVDOC.DEACTIVATE.IDREF "INCLUDE">
  <!ENTITY % entities SYSTEM "entity-decl.ent">
  %entities;
]>
<sect1 id="sec.rpm">
 <title>RPM&mdash;the Package Manager</title><indexterm id="idx.RPM" class="startofrange">

 <primary>RPM</primary></indexterm><indexterm>

 <primary>packages</primary>

 <secondary>RPMs</secondary></indexterm><indexterm>

 <primary>packages</primary>

 <secondary>package manager</secondary></indexterm><indexterm>

 <primary>commands</primary>

 <secondary>rpm</secondary></indexterm>

 <para>
  RPM (RPM Package Manager) is used for managing software packages. Its main
  commands are <command>rpm</command> and <command>rpmbuild</command>. The
  powerful RPM database can be queried by the users, system administrators
  and package builders for detailed information about the installed
  software.
 </para><indexterm>

 <primary>rpmbuild</primary></indexterm><indexterm>

 <primary>commands</primary>

 <secondary>rpmbuild</secondary></indexterm>

 <para>
  Essentially, <command>rpm</command> has five modes: installing,
  uninstalling (or updating) software packages, rebuilding the RPM database,
  querying RPM bases or individual RPM archives, integrity checking of
  packages and signing packages. <command>rpmbuild</command> can be used to
  build installable packages from pristine sources.
 </para>

 <para>
  Installable RPM archives are packed in a special binary format. These
  archives consist of the program files to install and certain meta
  information used during the installation by <command>rpm</command> to
  configure the software package or stored in the RPM database for
  documentation purposes. RPM archives normally have the extension
  <filename>.rpm</filename>.
 </para><indexterm>

 <primary>packages</primary>

 <secondary>LSB</secondary></indexterm><indexterm>

 <primary>LSB</primary>

 <secondary>installing packages</secondary></indexterm>

 <tip>
  <title>Software Development Packages</title>
  <para>
   For a number of packages, the components needed for software development
   (libraries, headers, include files, etc.) have been put into separate
   packages. These development packages are only needed if you want to
   compile software yourself (for example, the most recent GNOME packages).
   They can be identified by the name extension <literal>-devel</literal>,
   such as the packages
   <systemitem class="resource">alsa-devel</systemitem>,
   <systemitem
   class="resource">gimp-devel</systemitem>, and
   <systemitem
   class="resource">libkde4-devel</systemitem>.
  </para>
 </tip>

 <sect2 id="sec.rpm.package_auth">
  <title>Verifying Package Authenticity</title><indexterm>
  <primary>RPM</primary>
  <secondary>verifying</secondary></indexterm><indexterm>
  <primary>packages</primary>
  <secondary>verifying</secondary></indexterm>
  <para>
   RPM packages have a GnuPG signature. To verify the signature of an RPM
   package, use the command <command>rpm
   --checksig&nbsp;<replaceable>package</replaceable>-1.2.3.rpm</command> to
   determine whether the package originates from &novell;/&suse; or from
   another trustworthy facility. This is especially recommended for update
   packages from the Internet.
  </para>
 </sect2>

 <sect2 id="sec.rpm.packages_manage">
  <title>Managing Packages: Install, Update, and Uninstall</title><indexterm>
  <primary>installing</primary>
  <secondary>packages</secondary></indexterm><indexterm>
  <primary>packages</primary>
  <secondary>installing</secondary></indexterm><indexterm>
  <primary>packages</primary>
  <secondary>uninstalling</secondary></indexterm><indexterm>
  <primary>RPM</primary>
  <secondary>rpmorig</secondary></indexterm><indexterm>
  <primary>RPM</primary>
  <secondary>rpmsave</secondary></indexterm><indexterm>
  <primary>RPM</primary>
  <secondary>rpmnew</secondary></indexterm>
  <para>
   Normally, the installation of an RPM archive is quite simple:
   <command>rpm -i <replaceable>package</replaceable>.rpm</command>. With
   this command the package is installed, but only if its dependencies are
   fulfilled and if there are no conflicts with other packages. With an
   error message, <command>rpm</command> requests those packages that need
   to be installed to meet dependency requirements. In the background, the
   RPM database ensures that no conflicts arise&mdash;a specific file can
   only belong to one package. By choosing different options, you can force
   <command>rpm</command> to ignore these defaults, but this is only for
   experts. Otherwise, you risk compromising the integrity of the system and
   possibly jeopardize the ability to update the system.
  </para><indexterm>
  <primary>RPM</primary>
  <secondary>dependencies</secondary></indexterm>
  <para>
   The options <option>-U</option> or <option>--upgrade</option> and
   <option>-F</option> or <option>--freshen</option> can be used to update a
   package (for example, <command>rpm -F
   <replaceable>package</replaceable>.rpm</command>). This command removes
   the files of the old version and immediately installs the new files. The
   difference between the two versions is that <option>-U</option> installs
   packages that previously did not exist in the system, but
   <option>-F</option> merely updates previously installed packages. When
   updating, <command>rpm</command> updates configuration files carefully
   using the following strategy:
  </para><indexterm>
  <primary>RPM</primary>
  <secondary>updating</secondary></indexterm>
  <itemizedlist>
   <listitem>
    <para>
     If a configuration file was not changed by the system administrator,
     <command>rpm</command> installs the new version of the appropriate
     file. No action by the system administrator is required.
    </para>
   </listitem>
   <listitem>
    <para>
     If a configuration file was changed by the system administrator before
     the update, <command>rpm</command> saves the changed file with the
     extension <filename>.rpmorig</filename> or
     <filename>.rpmsave</filename> (backup file) and installs the version
     from the new package (but only if the originally installed file and the
     newer version are different). If this is the case, compare the backup
     file (<filename>.rpmorig</filename> or <filename>.rpmsave</filename>)
     with the newly installed file and make your changes again in the new
     file. Afterwards, be sure to delete all <filename>.rpmorig</filename>
     and <filename>.rpmsave</filename> files to avoid problems with future
     updates.
    </para>
   </listitem>
   <listitem>
    <para>
     <filename>.rpmnew</filename> files appear if the configuration file
     already exists <emphasis>and</emphasis> if the
     <option>noreplace</option> label was specified in the
     <filename>.spec</filename> file.
    </para>
   </listitem>
  </itemizedlist>
  <para>
   Following an update, <filename>.rpmsave</filename> and
   <filename>.rpmnew</filename> files should be removed after comparing
   them, so they do not obstruct future updates. The
   <filename>.rpmorig</filename> extension is assigned if the file has not
   previously been recognized by the RPM database.
  </para>
  <para>
   Otherwise, <filename>.rpmsave</filename> is used. In other words,
   <filename>.rpmorig</filename> results from updating from a foreign format
   to RPM. <filename>.rpmsave</filename> results from updating from an older
   RPM to a newer RPM. <filename>.rpmnew</filename> does not disclose any
   information as to whether the system administrator has made any changes
   to the configuration file. A list of these files is available in
   <filename>/var/adm/rpmconfigcheck</filename>. Some configuration files
   (like <filename>/etc/httpd/httpd.conf</filename>) are not overwritten to
   allow continued operation.
  </para>
  <para>
   The <option>-U</option> switch is <emphasis>not</emphasis> just an
   equivalent to uninstalling with the <option>-e</option> option and
   installing with the <option>-i</option> option. Use <option>-U</option>
   whenever possible.
  </para>
  <para>
   To remove a package, enter <command>rpm -e
   <replaceable>package</replaceable></command>. <command>rpm</command>,
   which only deletes the package if there are no unresolved dependencies.
   It is theoretically impossible to delete Tcl/Tk, for example, as long as
   another application requires it. Even in this case, RPM calls for
   assistance from the database. If such a deletion is, for whatever reason,
   impossible (even if <emphasis>no</emphasis> additional dependencies
   exist), it may be helpful to rebuild the RPM database using the option
   <option>--rebuilddb</option>.
  </para><indexterm>
  <primary>RPM</primary>
  <secondary>uninstalling</secondary></indexterm><indexterm>
  <primary>RPM</primary>
  <secondary>database</secondary>
  <tertiary>rebuilding</tertiary></indexterm>
 </sect2>

 <sect2 id="sec.rpm.patches">
  <title>RPM and Patches</title><indexterm>
  <primary>RPM</primary>
  <secondary>patches</secondary></indexterm>
  <para>
   To guarantee the operational security of a system, update packages must
   be installed in the system from time to time. Previously, a bug in a
   package could only be eliminated by replacing the entire package. Large
   packages with bugs in small files could easily result in this scenario.
   However the &suse; RPM offers a feature enabling the installation of
   patches in packages.
  </para>
  <para>
   The most important considerations are demonstrated using
   <command>pine</command> as an example:
  </para>
  <variablelist>
   <varlistentry>
    <term>Is the patch RPM suitable for my system?</term>
    <listitem>
     <para>
      To check this, first query the installed version of the package. For
      <command>pine</command>, this can be done with
     </para>
<screen>rpm -q pine
pine-4.44-188</screen>
     <para>
      Then check if the patch RPM is suitable for this version of
      <command>pine</command>:
     </para>
<screen>rpm -qp --basedon pine-4.44-224.i586.patch.rpm 
pine = 4.44-188
pine = 4.44-195
pine = 4.44-207</screen>
     <para>
      This patch is suitable for three different versions of pine. The
      installed version in the example is also listed, so the patch can be
      installed.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Which files are replaced by the patch?</term>
    <listitem>
     <para>
      The files affected by a patch can easily be seen in the patch RPM. The
      <command>rpm</command> parameter <option>-P</option> allows selection
      of special patch features. Display the list of files with the
      following command:
     </para>
<screen>rpm -qpPl pine-4.44-224.i586.patch.rpm
/etc/pine.conf
/etc/pine.conf.fixed
/usr/bin/pine</screen>
     <para>
      or, if the patch is already installed, with the following command:
     </para>
<screen>rpm -qPl pine
/etc/pine.conf
/etc/pine.conf.fixed
/usr/bin/pine</screen>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>How can a patch RPM be installed in the system?</term>
    <listitem>
     <para>
      Patch RPMs are used just like normal RPMs. The only difference is that
      a suitable RPM must already be installed.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>
     Which patches are already installed in the system and for which
     package versions?
    </term>
    <listitem>
     <para>
      A list of all patches installed in the system can be displayed with
      the command <command>rpm <option>-qPa</option></command>. If only one
      patch is installed in a new system (as in this example), the list
      appears as follows:
     </para>
<screen>rpm -qPa
pine-4.44-224</screen>
     <para>
      If, at a later date, you want to know which package version was
      originally installed, this information is also available in the RPM
      database. For <command>pine</command>, this information can be
      displayed with the following command:
     </para>
<screen>rpm -q --basedon pine
pine = 4.44-188</screen>
    </listitem>
   </varlistentry>
  </variablelist>
  <para>
   More information, including information about the patch feature of RPM,
   is available in the man pages of <command>rpm</command> and
   <command>rpmbuild</command>.
  </para>
  <note>
   <title>Official Updates for &productname;</title>
   <para>
    In order to make the download size of updates as small as possible,
    official updates for &productname; are not provided as Patch RPMs, but
    as Delta RPM packages. For details, see <xref linkend="sec.rpm.delta"/>.
   </para>
  </note>
 </sect2>

 <sect2 id="sec.rpm.delta">
  <title>Delta RPM Packages</title><indexterm>
  <primary>RPM</primary>
  <secondary>deltarpm</secondary></indexterm><indexterm>
  <primary>deltarpm</primary></indexterm>
  <para>
   Delta RPM packages contain the difference between an old and a new
   version of an RPM package. Applying a delta RPM onto an old RPM results
   in a completely new RPM. It is not necessary to have a copy of the old
   RPM because a delta RPM can also work with an installed RPM. The delta
   RPM packages are even smaller in size than patch RPMs, which is an
   advantage when transferring update packages over the Internet. The
   drawback is that update operations with delta RPMs involved consume
   considerably more CPU cycles than plain or patch RPMs.
  </para>
  <para>
   The <command>prepdeltarpm</command>, <command>writedeltarpm</command> and
   <command>applydeltarpm</command> binaries are part of the delta RPM suite
   (package <systemitem>deltarpm</systemitem>) and help you create and apply
   delta RPM packages. With the following commands, create a delta RPM
   called <filename>new.delta.rpm</filename>. The following command assumes
   that <filename>old.rpm</filename> and <filename>new.rpm</filename> are
   present:
  </para>
<screen><![CDATA[prepdeltarpm -s seq -i info old.rpm > old.cpio
prepdeltarpm -f new.rpm > new.cpio
xdelta delta -0 old.cpio new.cpio delta
writedeltarpm new.rpm delta info new.delta.rpm]]>
</screen>
  <para>
   Finally, remove the temporary working files
   <filename>old.cpio</filename>, <filename>new.cpio</filename>, and
   <filename>delta</filename>.
  </para>
  <para>
   Using <command>applydeltarpm</command>, you can reconstruct the new RPM
   from the file system if the old package is already installed:
  </para>
<screen>applydeltarpm new.delta.rpm new.rpm</screen>
  <para>
   To derive it from the old RPM without accessing the file system, use the
   <option>-r</option> option:
  </para>
<screen>applydeltarpm -r old.rpm new.delta.rpm new.rpm</screen>
  <para>
   See <filename>/usr/share/doc/packages/deltarpm/README</filename> for
   technical details.
  </para>
 </sect2>

 <sect2 id="sec.rpm.query">
  <title>RPM Queries</title><indexterm>
  <primary>RPM</primary>
  <secondary>queries</secondary></indexterm>
  <para>
   With the <option>-q</option> option <command>rpm</command> initiates
   queries, making it possible to inspect an RPM archive (by adding the
   option <option>-p</option>) and also to query the RPM database of
   installed packages. Several switches are available to specify the type of
   information required. See <xref linkend="tab.rpm.query"/>.
  </para>
  <table id="tab.rpm.query">
   <title>The Most Important RPM Query Options</title>
   <tgroup cols="2">
    <tbody>
     <row>
      <entry>
       <para>
        <option>-i</option>
       </para>
      </entry>
      <entry>
       <para>
        Package information
       </para>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        <option>-l</option>
       </para>
      </entry>
      <entry>
       <para>
        File list
       </para>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        <option>-f FILE</option>
       </para>
      </entry>
      <entry>
       <para>
        Query the package that contains the file
        <replaceable>FILE</replaceable> (the full path must be specified
        with <replaceable>FILE</replaceable>)
       </para>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        <option>-s</option>
       </para>
      </entry>
      <entry>
       <para>
        File list with status information (implies <option>-l</option>)
       </para>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        <option>-d</option>
       </para>
      </entry>
      <entry>
       <para>
        List only documentation files (implies <literal>-l</literal>)
       </para>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        <option>-c</option>
       </para>
      </entry>
      <entry>
       <para>
        List only configuration files (implies <option>-l</option>)
       </para>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        <option>--dump</option>
       </para>
      </entry>
      <entry>
       <para>
        File list with complete details (to be used with
        <option>-l</option>, <option>-c</option>, or <option>-d</option>)
       </para>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        <option>--provides</option>
       </para>
      </entry>
      <entry>
       <para>
        List features of the package that another package can request with
        <option>--requires</option>
       </para>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        <option>--requires</option>, <option>-R</option>
       </para>
      </entry>
      <entry>
       <para>
        Capabilities the package requires
       </para>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        <option>--scripts</option>
       </para>
      </entry>
      <entry>
       <para>
        Installation scripts (preinstall, postinstall, uninstall)
       </para>
      </entry>
     </row>
    </tbody>
   </tgroup>
  </table>
  <para>
   For example, the command <command>rpm -q -i wget</command> displays the
   information shown in <xref linkend="aus.update.rpm-i"/>.
  </para>
  <example id="aus.update.rpm-i">
   <title>rpm -q -i wget</title>
<screen>Name        : wget                         Relocations: (not relocatable)
Version     : 1.11.4                            Vendor: openSUSE
Release     : 1.70                          Build Date: Sat 01 Aug 2009 09:49:48 CEST
Install Date: Thu 06 Aug 2009 14:53:24 CEST      Build Host: build18
Group       : Productivity/Networking/Web/Utilities   Source RPM: wget-1.11.4-1.70.src.rpm
Size        : 1525431                          License: GPL v3 or later
Signature   : RSA/8, Sat 01 Aug 2009 09:50:04 CEST, Key ID b88b2fd43dbdc284
Packager    : http://bugs.opensuse.org
URL         : http://www.gnu.org/software/wget/
Summary     : A Tool for Mirroring FTP and HTTP Servers
Description :
Wget enables you to retrieve WWW documents or FTP files from a server.
This can be done in script files or via the command line.
[...]</screen>
  </example>
  <para>
   The option <option>-f</option> only works if you specify the complete
   filename with its full path. Provide as many filenames as desired. For
   example, the following command
  </para>
<screen>rpm -q -f /bin/rpm /usr/bin/wget</screen>
  <para>
   results in:
  </para>
<screen>rpm-4.8.0-4.3.x86_64
wget-1.11.4-11.18.x86_64</screen>
  <para>
   If only part of the filename is known, use a shell script as shown in
   <xref linkend="dat.rpm.search"/>. Pass the partial filename to the script
   shown as a parameter when running it.
  </para>
  <example id="dat.rpm.search">
   <title>Script to Search for Packages</title>
<screen>#! /bin/sh
for i in $(rpm -q -a -l | grep $1); do
    echo "\"$i\" is in package:"
    rpm -q -f $i
    echo ""
done</screen>
  </example>
  <para>
   The command <command>rpm -q --changelog rpm</command> displays a detailed
   list of change information about a specific package (in this case, the
   <literal>rpm</literal>package), sorted by date.
<!-- - Obsolete since 4.0.1 according to mls -
   However, only the last five change
   entries in the RPM database are listed. All entries (dating back the last
   two years) are included in the package itself. This query only works if
   CD&nbsp;1 is mounted at <filename>/media/cdrom</filename>: 
   <screen>rpm -qp -\-changelog /media/cdrom/suse/i586/rpm-4*.rpm</screen>
   -->
  </para>
  <para>
   With the help of the installed RPM database, verification checks can be
   made. Initiate these with <option>-V</option>, <option>-y</option> or
   <option>--verify</option>. With this option, <command>rpm</command> shows
   all files in a package that have been changed since installation.
   <command>rpm</command> uses eight character symbols to give some hints
   about the following changes:
  </para><indexterm>
  <primary>RPM</primary>
  <secondary>verify</secondary></indexterm>
  <table id="tab.rpm.verify">
   <title>RPM Verify Options</title>
   <tgroup cols="2">
    <tbody>
     <row>
      <entry>
       <para>
        <option>5</option>
       </para>
      </entry>
      <entry>
       <para>
        MD5 check sum
       </para>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        <option>S</option>
       </para>
      </entry>
      <entry>
       <para>
        File size
       </para>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        <option>L</option>
       </para>
      </entry>
      <entry>
       <para>
        Symbolic link
       </para>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        <option>T</option>
       </para>
      </entry>
      <entry>
       <para>
        Modification time
       </para>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        <option>D</option>
       </para>
      </entry>
      <entry>
       <para>
        Major and minor device numbers
       </para>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        <option>U</option>
       </para>
      </entry>
      <entry>
       <para>
        Owner
       </para>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        <option>G</option>
       </para>
      </entry>
      <entry>
       <para>
        Group
       </para>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        <option>M</option>
       </para>
      </entry>
      <entry>
       <para>
        Mode (permissions and file type)
       </para>
      </entry>
     </row>
    </tbody>
   </tgroup>
  </table>
  <para>
   In the case of configuration files, the letter <option>c</option> is
   printed. For example, for changes to <filename>/etc/wgetrc</filename>
   (<systemitem class="resource">wget</systemitem> package):
  </para>
<screen>rpm -V wget
S.5....T c /etc/wgetrc</screen>
  <para>
   The files of the RPM database are placed in
   <filename>/var/lib/rpm</filename>. If the partition
   <filename>/usr</filename> has a size of 1&nbsp;GB, this database can
   occupy nearly 30&nbsp;MB, especially after a complete update. If the
   database is much larger than expected, it is useful to rebuild the
   database with the option <option>--rebuilddb</option>. Before doing this,
   make a backup of the old database. The <command>cron</command> script
   <command>cron.daily</command> makes daily copies of the database (packed
   with gzip) and stores them in <filename>/var/adm/backup/rpmdb</filename>.
   The number of copies is controlled by the variable
   <systemitem>MAX_RPMDB_BACKUPS</systemitem> (default: <option>5</option>)
   in <filename>/etc/sysconfig/backup</filename>. The size of a single
   backup is approximately 1&nbsp;MB for 1&nbsp;GB in
   <filename>/usr</filename>.
  </para><indexterm>
  <primary>RPM</primary>
  <secondary>database</secondary>
  <tertiary>rebuilding</tertiary></indexterm>
 </sect2>

 <sect2 id="sec.rpm.sources">
  <title>Installing and Compiling Source Packages</title><indexterm>
  <primary>packages</primary>
  <secondary>compiling</secondary></indexterm><indexterm>
  <primary>source</primary>
  <secondary>compiling</secondary></indexterm><indexterm>
  <primary>software</primary>
  <secondary>compiling</secondary></indexterm><indexterm>
  <primary>spm</primary></indexterm>
  <para>
   All source packages carry a <filename>.src.rpm</filename> extension
   (source RPM).
  </para>
  <note>
   <title>Installed Source Packages</title>
   <para>
    Source packages can be copied from the installation medium to the hard
    disk and unpacked with &yast;. They are not, however, marked as
    installed (<literal>[i]</literal>) in the package manager. This is
    because the source packages are not entered in the RPM database. Only
    <emphasis>installed</emphasis> operating system software is listed in
    the RPM database. When you <quote>install</quote> a source package, only
    the source code is added to the system.
   </para>
  </note>
  <para>
   The following directories must be available for <command>rpm</command>
   and <command>rpmbuild</command> in <filename>/usr/src/packages</filename>
   (unless you specified custom settings in a file like
   <filename>/etc/rpmrc</filename>):
  </para>
  <variablelist>
   <varlistentry>
    <term><filename>SOURCES</filename>
    </term>
    <listitem>
     <para>
      for the original sources (<filename>.tar.bz2</filename> or
      <filename>.tar.gz</filename> files, etc.) and for
      distribution-specific adjustments (mostly <filename>.diff</filename>
      or <filename>.patch</filename> files)
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><filename>SPECS</filename>
    </term>
    <listitem>
     <para>
      for the <filename>.spec</filename> files, similar to a meta Makefile,
      which control the <emphasis>build</emphasis> process
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><filename>BUILD</filename>
    </term>
    <listitem>
     <para>
      all the sources are unpacked, patched and compiled in this directory
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><filename>RPMS</filename>
    </term>
    <listitem>
     <para>
      where the completed binary packages are stored
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><filename>SRPMS</filename>
    </term>
    <listitem><indexterm>
     <primary>RPM</primary>
     <secondary>SRPMS</secondary></indexterm>
     <para>
      here are the source RPMs
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
  <para>
   When you install a source package with &yast;, all the necessary
   components are installed in <filename>/usr/src/packages</filename>: the
   sources and the adjustments in <filename>SOURCES</filename> and the
   relevant <filename>.spec</filename> file in <filename>SPECS</filename>.
  </para>
  <warning>
   <para>
    Do not experiment with system components
    (<systemitem class="resource">glibc</systemitem>,
    <systemitem class="resource">rpm</systemitem>,
    <systemitem class="resource">sysvinit</systemitem>, etc.), because this
    endangers the stability of your system.
   </para>
  </warning>
  <para>
   The following example uses the <filename>wget.src.rpm</filename> package.
   After installing the source package, you should have files similar to
   those in the following list:
  </para>
<screen>/usr/src/packages/SOURCES/wget-1.11.4.tar.bz2
/usr/src/packages/SOURCES/wgetrc.patch
/usr/src/packages/SPECS/wget.spec</screen>
  <para>
   <command>rpmbuild -b<replaceable>X</replaceable>
   /usr/src/packages/SPECS/wget.spec</command> starts the compilation.
   <replaceable>X</replaceable> is a wild card for various stages of the
   build process (see the output of <option>--help</option> or the RPM
   documentation for details). The following is merely a brief explanation:
  </para>
  <variablelist>
   <varlistentry>
    <term><option>-bp</option>
    </term>
    <listitem>
     <para>
      Prepare sources in <filename>/usr/src/packages/BUILD</filename>:
      unpack and patch.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><option>-bc</option>
    </term>
    <listitem>
     <para>
      Do the same as <option>-bp</option>, but with additional compilation.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><option>-bi</option>
    </term>
    <listitem>
     <para>
      Do the same as <option>-bp</option>, but with additional installation
      of the built software. Caution: if the package does not support the
      BuildRoot feature, you might overwrite configuration files.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><option>-bb</option>
    </term>
    <listitem>
     <para>
      Do the same as <option>-bi</option>, but with the additional creation
      of the binary package. If the compile was successful, the binary
      should be in <filename>/usr/src/packages/RPMS</filename>.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><option>-ba</option>
    </term>
    <listitem>
     <para>
      Do the same as <option>-bb</option>, but with the additional creation
      of the source RPM. If the compilation was successful, the binary
      should be in <filename>/usr/src/packages/SRPMS</filename>.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><option>--short-circuit</option>
    </term>
    <listitem>
     <para>
      Skip some steps.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
  <para>
   The binary RPM created can now be installed with <command>rpm
   <option>-i</option></command> or, preferably, with <command>rpm
   <option>-U</option></command>. Installation with <command>rpm</command>
   makes it appear in the RPM database.
  </para>
 </sect2>

 <sect2 id="sec.rpm.build">
  <title>Compiling RPM Packages with build</title><indexterm>
  <primary>packages</primary>
  <secondary>compiling with build</secondary></indexterm>
  <para>
   The danger with many packages is that unwanted files are added to the
   running system during the build process. To prevent this use
   <systemitem>build</systemitem>, which creates a defined environment in
   which the package is built. To establish this chroot environment, the
   <command>build</command> script must be provided with a complete package
   tree. This tree can be made available on the hard disk, via NFS, or from
   DVD. Set the position with <command>build --rpms
   <replaceable>directory</replaceable></command>. Unlike
   <command>rpm</command>, the <command>build</command> command looks for
   the <filename>.spec</filename> file in the source directory. To build
   <filename>wget</filename> (like in the above example) with the DVD
   mounted in the system under <filename>/media/dvd</filename>, use the
   following commands as <systemitem class="username">root</systemitem>:
  </para>
<screen>cd /usr/src/packages/SOURCES/
mv ../SPECS/wget.spec .
build --rpms /media/dvd/suse/ wget.spec</screen>
  <para>
   Subsequently, a minimum environment is established at
   <filename>/var/tmp/build-root</filename>. The package is built in this
   environment. Upon completion, the resulting packages are located in
   <filename>/var/tmp/build-root/usr/src/packages/RPMS</filename>.
  </para>
  <para>
   The <command>build</command> script offers a number of additional
   options. For example, cause the script to prefer your own RPMs, omit the
   initialization of the build environment or limit the
   <command>rpm</command> command to one of the above-mentioned stages.
   Access additional information with <command>build
   <option>--help</option></command> and by reading the
   <command>build</command> man page.
  </para>
 </sect2>

 <sect2 id="sec.rpm.tools">
  <title>Tools for RPM Archives and the RPM Database</title><indexterm>
  <primary>RPM</primary>
  <secondary>tools</secondary></indexterm>
  <para>
   Midnight Commander (<command>mc</command>) can display the contents of
   RPM archives and copy parts of them. It represents archives as virtual
   file systems, offering all usual menu options of Midnight Commander.
   Display the <filename>HEADER</filename> with <keycap>F3</keycap>. View
   the archive structure with the cursor keys and <keycap>Enter</keycap>.
   Copy archive components with <keycap>F5</keycap>.
  </para>
  <para>
<!--taroth 2010-07-20: kpackage no longer available, not sure if
   kpackagekit offers the same functions-->
<!--<productname>KDE</productname> offers the kpackage tool as a front-end
   for <command>rpm</command>.-->
   A full-featured package manager is available as a &yast; module. For
   details, see <xref linkend="cha.y2.sw"/>.
  </para><indexterm class="endofrange" startref="idx.RPM"/>
<!--  <indexterm class="endofrange" startref="idx.updating"/>
  <indexterm class="endofrange" startref="idx.system_updating"/> -->
 </sect2>
</sect1>
