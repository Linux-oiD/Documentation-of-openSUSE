<?xml version="1.0"?>
<!DOCTYPE chapter PUBLIC "-//Novell//DTD NovDoc XML V1.0//EN" "novdocx.dtd"
[
  <!ENTITY % NOVDOC.DEACTIVATE.IDREF "INCLUDE">
  <!ENTITY % entities SYSTEM "entity-decl.ent">
  %entities;
]>
<chapter id="cha.libvirt.managing">
 <title>Basic &vmguest; Management</title>
 <para>
  Basic management tasks such as starting or stopping a &vmguest;, can
  either be done using the graphical application &vmm; or on the command
  line using <command>virsh</command>. Connecting to the graphical console
  via VNC is only possible from a graphical user interface.
 </para>
 <sect1 id="sec.libvirt.managing.list">
  <title>Listing &vmguest;s</title>

  <para>
   In order to be able to list &vmguest;s, you need to connect to a &vmhost;
   first. If you start the management tool on the &vmhost; itself, you are
   automatically connected. When operating from remote, refer to
   <xref
    linkend="sec.libvirt.connect.connecting"/> for instructions.
  </para>

  <sect2 id="sec.libvirt.managing.list.vmm">
   <title>Listing &vmguest;s with &vmm;</title>
   <para>
    The main Window of the &vmm; shows a list of all &vmguest;s for each
    &vmhost; it is connected to. Each &vmguest; entry contains the machine's
    name, its status (<guimenu>Running</guimenu>, <guimenu>Paused</guimenu>,
    or <guimenu>Shutoff</guimenu>) displayed as icon and literal, and a CPU
    usage bar.
   </para>
  </sect2>

  <sect2 id="sec.libvirt.managing.list.virsh">
   <title>Listing &vmguest;s with <command>virsh</command></title>
   <para>
    Use the command <command>virsh <option>list</option></command> to get a
    list of &vmguest;s:
   </para>
<screen># list running guests on localhost
virsh -c qemu:///system list
# list running + inactive guests on &wsIV; over TLS connection
virsh -c qemu+tls://&wsIVname;/system list --all
# list running + inactive guests on &wsIV; over SSH connection
virsh -c qemu+ssh://&exampleuser;@&wsIVname;/system list --inactive</screen>
  </sect2>
 </sect1>
 <sect1 id="sec.libvirt.managing.vnc">
  <title>Opening a Graphical Console</title>

  <para>
   Opening a Graphical Console to a &vmguest; lets you interact with the
   machine like a physical host via a VNC connection. If accessing the VNC
   server requires authentication, you are prompted to enter a user name (if
   applicable) and a password.
  </para>

  <para>
   Once you click into the VNC console, the cursor is <quote>grabbed</quote>
   and cannot be used outside the console anymore. To release it, press
   <keycombo> <keycap function="alt"/> <keycap function="control"/>
   </keycombo>.
  </para>

  <tip>
   <title>Absolute Cursor Movement</title>
   <para>
    In order to prevent the console from grabbing the cursor and to enable
    absolute (seamless) cursor movement, add a tablet input device to the
    &vmguest;.
<!-- See FIXME for instructions. -->
   </para>
  </tip>

  <para>
   Certain key combinations such as <keycombo> <keycap function="control"/>
   <keycap function="alt"/> <keycap function="delete"/> </keycombo> are
   interpreted by the host system and are not passed to the &vmguest;.
  </para>

  <para>
   To pass such key combinations to a &vmguest;, open the <guimenu>Send
   Key</guimenu> menu from the VNC window and choose the desired key
   combination entry.
  </para>

  <note>
   <title>Supported VNC Viewer</title>
   <para>
    Principally all VNC viewers are able to connect to the console of a
    &vmguest;. However, if you are using SASL authentication and/or TLS/SSL
    connection to access the guest, the options become limited. Common VNC
    viewers such as <literal>tightvnc</literal> or
    <literal>tigervnc</literal> support neither SASL authentication or
    TSL/SSL. The only supported alternative to &vmm; and
    <command>virt-viewer</command> is <command>vinagre</command>.
   </para>
  </note>

  <sect2 id="sec.libvirt.managing.vnc.vmm">
   <title>Opening a Graphical Console with &vmm;</title>
   <procedure>
    <step>
     <para>
      In the &vmm;, right-click on a &vmguest; entry.
     </para>
    </step>
    <step>
     <para>
      Choose <guimenu>Open</guimenu> from the pop-up menu.
     </para>
    </step>
   </procedure>
  </sect2>

  <sect2 id="sec.libvirt.managing.vnc.viewer">
   <title>Opening a Graphical Console with <command>virt-viewer</command></title>
   <para>
    <command>virt-viewer</command> is a simple VNC viewer with added
    functionality for displaying &vmguest; consoles. It can, for example, be
    started in <quote>wait</quote> mode, where it waits for a &vmguest; to
    start before it connects. It also supports automatically reconnecting to
    a &vmguest; that is rebooted.
   </para>
   <para>
    <command>virt-viewer</command> addresses &vmguest;s by name, by ID or by
    UUID. Use <command>virsh <option>list --all</option></command> to get
    this data.
   </para>
   <para>
    To connect to a guest that is running or paused, either use the ID,
    UUID, or name. &vmguest;s that are shut off do not have an ID&mdash;you
    can only connect by UUID or name.
   </para>
<screen># local connect to guest with ID 8
virt-viewer -c qemu:///system 8

# local connect to the inactive guest sles11; will connect once
# the guest starts
virt-viewer --wait sles11
virt-viewer -c qemu:///system --wait sles11

# remote connect via ssh
viewer -c qemu+ssh://&exampleuser;@&wsIVname;/system 8

# remote connect via ssh wait / reconnect mode:
virt-viewer -c qemu+ssh://root@&wsIVname;/system -w sles11</screen>
   <para>
    For more information, see <command>virt-viewer
    <option>--help</option></command> or <command>man 1
    virt-viewer</command>.
   </para>
  </sect2>
 </sect1>
 <sect1 id="sec.libvirt.managing.status">
  <title>Changing a &vmguest;'s State: Start, Stop, Pause</title>

  <para>
   Starting, stopping or pausing a &vmguest; can either be done with &vmm;
   or <command>virsh</command>. You can also configure a &vmguest; to be
   automatically started when booting the &vmhost;.
  </para>

  <para>
   When shutting down a &vmguest;, you may either shut it down gracefully,
   or force the shutdown. The latter is equivalent to pulling the power plug
   on a physical host and is only recommended if there are no alternatives.
   Forcing a shutdown may cause file system corruption and loss of data on
   the &vmguest;.
  </para>

  <tip>
   <title>Graceful Shutdown</title>
   <para>
    In order to be able to perform a graceful shutdown, the &vmguest; must
    be configured to support ACPI. If you have created the guest with
    <command>vm-install</command> or with &vmm;, ACPI should be available.
    Use the following procedure in &vmm; to check:
   </para>
   <para>
    Double-click the &vmguest; entry in &vmm;. Choose <menuchoice>
    <guimenu>View</guimenu> <guimenu>Details</guimenu> </menuchoice> and
    then <menuchoice> <guimenu>Overview</guimenu> <guimenu>Machine
    Settings</guimenu></menuchoice>. <guimenu>ACPI</guimenu> should be
    checked.
   </para>
   <para>
    Depending on the guest operating system, enabling ACPI may not be
    sufficient. It is strongly recommended to test shutting down and
    rebooting a guest before releasing it to production. &opensuse; or
    &sled;, for example, may require &pk; authorization for shutdown and
    reboot. Make sure this policy is turned off on all &vmguest;s.
   </para>
   <para>
    If ACPI was enabled during a Windows XP/Server 2003 guest installation,
    turning it on in the &vmguest; configuration alone is not sufficient.
    See the following articles for more information:
   </para>
   <simplelist>
    <member><ulink url="http://support.microsoft.com/kb/314088/EN-US/"/>
    </member>
    <member><ulink url="http://support.microsoft.com/?kbid=309283"/>
    </member>
   </simplelist>
   <para>
    A graceful shutdown is of course always possible from within the guest
    operating system, regardless of the &vmguest;'s configuration.
   </para>
  </tip>

  <sect2 id="sec.libvirt.managing.status.vmm">
   <title>Changing a &vmguest;'s State with &vmm;</title>
   <para>
    Changing a &vmguest;'s state can either be done from &vmm;'s main
    window, or from a VNC window.
   </para>
   <procedure>
    <title>State Change from the &vmm; Window</title>
    <step>
     <para>
      Right-click on a &vmguest; entry.
     </para>
    </step>
    <step>
     <para>
      Choose <guimenu>Run</guimenu>, <guimenu>Pause</guimenu>, or one of the
      <guimenu>Shutdown options</guimenu> from the pop-up menu.
     </para>
    </step>
   </procedure>
   <procedure>
    <title>State change from the VNC Window</title>
    <step>
     <para>
      Open a VNC Window as described in
      <xref
       linkend="sec.libvirt.managing.vnc.vmm"/>.
     </para>
    </step>
    <step>
     <para>
      Choose <guimenu>Run</guimenu>, <guimenu>Pause</guimenu>, or one of the
      <guimenu>Shut Down</guimenu> options either from the toolbar or from
      the <guimenu>Virtual Machine</guimenu> menu.
     </para>
    </step>
   </procedure>
   <sect3 id="sec.libvirt.managing.status.vmm.autostart">
    <title>Autostarting a &vmguest;</title>
    <para>
     Automatically starting a guest when the &vmhost; boots is not enabled
     by default. This feature needs to be turned on for each &vmguest;
     individually. There is no way to activate it globally.
    </para>
    <procedure>
     <step>
      <para>
       Double-click the &vmguest; entry in &vmm; to open its console.
      </para>
     </step>
     <step>
      <para>
       Choose <menuchoice> <guimenu>View</guimenu>
       <guimenu>Details</guimenu></menuchoice> to open the &vmguest;
       configuration window.
      </para>
     </step>
     <step>
      <para>
       Choose <guimenu>Boot Options</guimenu> and check <guimenu>Start
       virtual machine on host boot up</guimenu>.
      </para>
     </step>
     <step>
      <para>
       Save the new configuration with <guimenu>Apply</guimenu>.
      </para>
     </step>
    </procedure>
   </sect3>
  </sect2>

  <sect2 id="sec.libvirt.managing.status.virsh">
   <title>Changing a &vmguest;'s State with <command>virsh</command></title>
   <para>
    In the following examples the state of a &vmguest; named
    <quote>sles11</quote> is changed. All commands are run directly on the
    &vmhost;.
   </para>
<screen>virsh -c qemu:///system start sles11                # start
virsh -c qemu:///system suspend sles11              # pause
virsh -c qemu:///system reboot sles11               # reboot
virsh -c qemu:///system shutdown sles11             # graceful shutdown
virsh -c qemu:///system destroy sles11              # force shutdown
virsh -c qemu:///system autostart sles11            # turn on autostart
virsh -c qemu:///system autostart --disable sles11  # turn off autostart</screen>
  </sect2>
 </sect1>
 <sect1 id="sec.libvirt.manage.save">
  <title>Saving and Restoring &vmguest;s</title>

  <para>
   Saving a &vmguest; preserves the exact state of the guest’s memory. The
   operation is slightly similar to <emphasis>hibernating</emphasis> a
   computer. A saved &vmguest; can be quickly restored to its previously
   saved running condition.
  </para>

  <para>
   When saved, the &vmguest; is paused, its current memory state saved to
   disk, and then the guest is stopped. The operation does not make a copy
   of any portion of the &vmguest;’s virtual disk. The amount of time to
   save the virtual machine depends on the amount of memory allocated. When
   saved, a &vmguest;’s memory is returned to the pool of memory available
   on the &vmhost;.
  </para>

  <para>
   The restore operation loads a &vmguest;’s previously saved memory state
   file and starts it. The guest is not booted but rather resumes at the
   point where it was previously saved. The operation is slightly similar to
   coming out of hibernation.
  </para>

  <para>
   The &vmguest; is saved to a state file. Make sure there is enough space
   on the partition you are going to save to. Issue the following command on
   the guest to get a rough estimation of the file size in megabytes to be
   expected:
  </para>

<screen>free -m | awk '/^Mem:/ {print $3}'</screen>

  <warning>
   <para>
    After using the save operation, do not boot, start, or run the saved
    &vmguest;. Doing so would cause the machine's virtual disk and the saved
    memory state getting out of sync and can result in critical errors when
    restoring the guest.
   </para>
  </warning>

  <sect2 id="sec.libvirt.manage.save.vmm">
   <title>Saving / Restoring with &vmm;</title>
   <procedure>
    <title>Saving a &vmguest;</title>
    <step>
     <para>
      Open a VNC connection window to a &vmguest;. Make sure the guest is
      running.
     </para>
    </step>
    <step>
     <para>
      Choose <menuchoice> <guimenu>Virtual Machine</guimenu>
      <guimenu>Save</guimenu> </menuchoice>
     </para>
    </step>
    <step>
     <para>
      Choose a location and a file name.
     </para>
    </step>
    <step>
     <para>
      Click <guimenu>Save</guimenu>. Saving the guest's state may take some
      time. After the operation has finished, the &vmguest; will
      automatically shut down.
     </para>
    </step>
   </procedure>
   <procedure>
    <title>Restoring a &vmguest;</title>
    <step>
     <para>
      Start the &vmm;.
     </para>
    </step>
    <step>
     <para>
      Type <keycombo> <keycap function="alt"/> <keycap>R</keycap>
      </keycombo> or choose <menuchoice> <guimenu>File</guimenu>
      <guimenu>Restore Saved Machine</guimenu> </menuchoice>.
     </para>
    </step>
    <step>
     <para>
      Choose the file you want to restore and proceed with
      <guimenu>Open</guimenu>. Once the file has been successfully loaded,
      the &vmguest; is up and running.
     </para>
    </step>
   </procedure>
  </sect2>

  <sect2 id="sec.libvirt.manage.save.virsh">
   <title>Saving / Restoring with <command>virsh</command></title>
   <para>
    Save a running &vmguest; with the command <command>virsh
    <option>save</option></command>:
   </para>
<screen># save the guest named opensuse11
virsh save opensuse11 /virtual/saves/opensuse11.vmsave
   
# save the guest with Id 37
virsh save 37 /virtual/saves/opensuse11.vmsave</screen>
   <para>
    To restore it, use <command>virsh <option>restore</option></command>:
   </para>
<screen>virsh restore /virtual/saves/opensuse11.vmsave</screen>
  </sect2>
 </sect1>
 <sect1 id="sec.libvirt.managing.delete">
  <title>Deleting a &vmguest;</title>

  <para>
   Deleting a &vmguest; removes its XML configuration by default. Since the
   attached storage is not deleted, you will be able to use it with another
   &vmguest;. With &vmm; you may also delete a guest's storage files as
   well&mdash;this will completely erase the guest.
  </para>

  <para>
   In order to delete a &vmguest;, it has to be shut down first (refer to
   <xref linkend="sec.libvirt.managing.status"/> for instructions). It is
   not possible to delete a running guest.
  </para>

  <sect2 id="sec.libvirt.managing.delete.vmm">
   <title>Deleting a &vmguest; with &vmm;</title>
   <procedure>
    <step>
     <para>
      In the &vmm;, right-click on a &vmguest; entry.
     </para>
    </step>
    <step>
     <para>
      Choose <guimenu>Delete</guimenu> from the pop-up menu.
     </para>
    </step>
    <step>
     <para>
      A confirmation window opens. Clicking <guimenu>Delete</guimenu> will
      permanently erase the &vmguest;. The deletion is not recoverable.
     </para>
     <para>
      You may also choose to permanently delete the guest's virtual disk by
      ticking <guimenu>Delete Associated Storage Files</guimenu>. The
      deletion is not recoverable either.
     </para>
    </step>
   </procedure>
  </sect2>

  <sect2 id="sec.libvirt.managing.delete.virsh">
   <title>Deleting a &vmguest; with <command>virsh</command></title>
   <para>
    To delete a &vmguest; with <command>virsh</command> run <command>virsh
    <option>undefine</option> <replaceable>VM_NAME</replaceable></command>.
    There is no option to automatically delete the attached storage files.
   </para>
  </sect2>
 </sect1>
</chapter>
