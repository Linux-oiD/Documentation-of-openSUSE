<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//Novell//DTD NovDoc XML V1.0//EN" "novdocx.dtd"
[
  <!ENTITY % NOVDOC.DEACTIVATE.IDREF "INCLUDE">
  <!ENTITY % entities SYSTEM "entity-decl.ent">
  %entities;
]>
<!-- fs 2010-04-26:
     First draft. There is possibly room for improvement e.g. by being more
     verbose ...
-->
<chapter id="cha.tuning.basics">
<!-- fs 2010-04-26: Better title? -->
 <title>General Notes on System Tuning</title>
 <abstract>
  <para>
   This manual discusses how to find the reasons for performance problems
   and provides means to solve these problems. Before you start tuning your
   system, you should make sure you have ruled out common problems and have
   found the cause (bottleneck) for the problem. You should also have a
   detailed plan on how to tune the system, because applying random tuning
   tips will not help (and could make things worse).
  </para>
 </abstract>
 <procedure>
  <title>General Approach When Tuning a System</title>
  <step>
   <para>
    Be sure what problem to solve
   </para>
  </step>
  <step>
   <para>
    Rule out common problems
   </para>
  </step>
  <step>
   <para>
    Find the bottleneck
   </para>
   <substeps>
    <step>
     <para>
      Monitor the system and/or application
     </para>
    </step>
    <step>
     <para>
      Analyze the data
     </para>
    </step>
   </substeps>
  </step>
  <step>
   <para>
    Step-by-step tuning
   </para>
  </step>
 </procedure>
 <sect1 id="sec.tuning.basics.what">
  <title>Be Sure What Problem to Solve</title>

  <para>
   Before you start tuning your system, try to describe the problem as
   exactly as possible. Obviously, a simple and general <quote>The system is
   too slow!</quote> is no helpful problem description. If you plan to tune
   your Web server for faster delivery of static pages, for example, it
   makes a difference whether you need to generally improve the speed or
   whether it only needs to be improved at peak times.
  </para>

  <para>
   Furthermore, make sure you can apply a measurement to your problem,
   otherwise you will not be able to control if the tuning was a success or
   not. You should always be able to compare <quote>before</quote> and
   <quote>after</quote>.
  </para>
 </sect1>
 <sect1 id="sec.tuning.basics.common">
  <title>Rule Out Common Problems</title>

  <para>
   A performance problem often is caused by network or hardware problems,
   bugs, or configuration issues. Make sure to rule out problems such as the
   ones listed below before attempting to tune your system:
  </para>

  <itemizedlist>
   <listitem>
    <para>
     Check <filename>/var/log/warn</filename> and
     <filename>/var/log/messages</filename> for unusual entries.
    </para>
   </listitem>
   <listitem>
    <para>
     Check (using <command>top</command> or <command>ps</command>) whether a
     certain process misbehaves by eating up unusual amounts of CPU time or
     memory.
    </para>
   </listitem>
   <listitem>
    <para>
     Check for network problems by inspecting
     <filename>/proc/net/dev</filename>.
    </para>
   </listitem>
   <listitem>
    <para>
     In case of I/O problems with physical disks, make sure it is not caused
     by hardware problems (check the disk with the
     <systemitem>smartmontools</systemitem>) or by a full disk.
    </para>
   </listitem>
   <listitem>
    <para>
     Ensure that background jobs are scheduled to be carried out in times
     the server load is low. Those jobs should also run with low priority
     (set via <command>nice</command>).
    </para>
   </listitem>
   <listitem>
    <para>
     If the machine runs several services using the same resources, consider
     moving services to another server.
    </para>
   </listitem>
   <listitem>
    <para>
     Last, make sure your software is up-to-date.
    </para>
   </listitem>
  </itemizedlist>
 </sect1>
 <sect1 id="sec.tuning.basics.bottleneck">
  <title>Finding the Bottleneck</title>

  <para>
   Finding the bottleneck very often is the hardest part when tuning a
   system. &productname; offers a lot of tools helping you with this task.
   See <xref linkend="part.tuning.monitoring"/> for detailed information on
   general system monitoring applications and log file analysis. If the
   problem requires a long-time in-depth analysis, the Linux kernel offers
   means to perform such analysis. See
   <xref linkend="part.tuning.kerneltrace"/> for coverage.
  </para>

  <para>
   Once you have collected the data, it needs to be analyzed. First, inspect
   if the server's hardware (memory, CPU, bus) and its I/O capacities (disk,
   network) are sufficient. If these basic conditions are met, the system
   might benefit from tuning.
  </para>
 </sect1>
 <sect1 id="sec.tuning.basics.tuning">
  <title>Step-by-step Tuning</title>

  <para>
   Make sure to carefully plan the tuning itself. It is of vital importance
   to only do one step at a time. Only by doing so you will be able to
   measure if the change provided an improvement or even had a negative
   impact. Each tuning activity should be measured over a sufficient time
   period in order to ensure you can do an analysis based on significant
   data. If you cannot measure a positive effect, do not make the change
   permanent. Chances are, that it might have a negative effect in the
   future.
  </para>
 </sect1>
</chapter>
