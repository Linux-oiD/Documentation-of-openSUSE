<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//Novell//DTD NovDoc XML V1.0//EN" "novdocx.dtd"
[
  <!ENTITY % NOVDOC.DEACTIVATE.IDREF "INCLUDE">
  <!ENTITY % entities SYSTEM "entity-decl.ent">
  %entities;
]>
<chapter id="cha.security.acls">
 <title>Списки управления доступом в Linux</title><indexterm class="startofrange" id="idx.ACLs">
 <primary>ACL</primary></indexterm>
 <abstract>
  <para>
   POSIX ACLs (access control lists - списки управления доступом) могут быть использованы как расширение 
   традиционной концепции привилегий для объектов файловой системы. С помощью ACL
   привилегии могут быть установлены более гибко, чем при помощи традиционной концепции.
  </para>
 </abstract><indexterm id="idx.file_systems_access_control_lists" class="startofrange">
 <primary>файловые системы</primary>
 <secondary>ACL</secondary></indexterm><indexterm id="idx.permissions_ACLs" class="startofrange">
 <primary>привилегии</primary>
 <secondary>ACL</secondary></indexterm>
 <para>
  Термин <emphasis>POSIX ACL</emphasis> предполагает, что это настоящий стандарт POSIX
  (<emphasis>portable operating system interface</emphasis> переносимый интерфейс операционных систем). 
  Соответствующие черновые стандарты POSIX 1003.1e и POSIX 1003.2c были исключены
  по ряду причин. Тем не менее, ACLs (в том виде, в котором они реализованы
  во многих системах, принадлежащих семейству UNIX) основаны на этих черновиках.
  Реализация ACL для файловой системы (описанная в этой главе) также следует
  этим двум стандартам.
 </para>
 <sect1 id="sec.security.acls.traditional">
  <title>Традиционные файловые привилегии</title>

  <para>
   <remark>mdejmek: hm, do we have to capitalize coreutils; what about
    Node?</remark>
   <remark>ke: yes, looks better. "Node" is an structuring entity in the Info system;
    it roughly equals to chapter or section in a printed book. Do we capitalize these
    things?</remark>
   Вы можете найти подробную информацию о традиционных файловых привилегиях 
   на Info странице пакета GNU Coreutils, секция <emphasis>File permissions</emphasis>
   (<command>info coreutils "File permissions"</command>). Существуют также дополнительные 
    аттрибуты setuid, setgid,  sticky bit.
  </para>

  <sect2 id="sec.security.acls.traditional.setuid">
   <title>Бит setuid</title>
   <para>
    В некоторых ситуациях привилегии доступа могут быть слишком строгими.
    Поэтому в Linux существуют дополнительные настройки, позволяющие для определенного действия временно
    сменить идентификатор текущего пользователя или группы.
    Например, программа <command>passwd</command> обычно требует привилегий
    суперпользователя для доступа к файлу <filename>/etc/passwd</filename>. Этот файл
    содержит важную информацию, такую как домашние каталоги пользователей,
    идентификаторы пользователей и групп. Таким образом обычный пользователь не сможет изменить
    <filename>passwd</filename>, потому что предоставлять всем пользователям 
    прямой доступ к этому файлу слишком опасно. Возможным решением этой проблемы является механизм
    <emphasis>setuid</emphasis>. setuid (set user
    ID - установка идентификатора пользователя) это специальный файловый аттрибут, который сообщает системе, что
    программу нужно выполнять используя определенный идентификатор пользователя. Рассмотрим команду <command>passwd</command>:
   </para>
<screen>-rwsr-xr-x  1 root shadow 80036 2004-10-02 11:08 /usr/bin/passwd</screen>
   <para>
    Вы видите <literal>s</literal>, что указывает на установленный бит setuid
    для привилегий пользователя. Согласно ему, все пользователи,
    запускающие команду <command>passwd</command>, выполнят ее от пользователя 
    <systemitem class="username">root</systemitem>.
   </para>
  </sect2>

  <sect2 id="sec.security.acls.traditional.setgid">
   <title>Бит setgid</title>
   <para>
    Бит setuid применяется к пользователям. Однако существует аналогичное 
    свойство для групп: бит <emphasis>setgid</emphasis>. Если этот бит установлен для программы,
    то программа будет использовать при работе идентификатор собственной группы,
    вне зависимости от того, какой пользователь ее запустил. В директории с установленным
    битом setgid, все вновь созданные поддиректории и файлы будут принадлежать к той же группе,
    к которой принадлежит директория. Рассмотрим следующую директорию:
   </para>
<screen>drwxrws--- 2 &exampleuser; archive 48 Nov 19 17:12  backup</screen>
   <para>
    Вы видите <literal>s</literal>, что  указывает на установленный бит setgid
    для привилегий группы. Владелец директории и члены группы
    <systemitem class="groupname">archive</systemitem> будут
    иметь доступ к этой директории. Пользователи, не принадлежащие к этой группе,
    <quote>отразятся</quote> на нее. Эффективным идентификатором группы для
    для всех записанных в директорию файлов будет
    <systemitem class="groupname">archive</systemitem>. Например, 
    программе резервного копирования, работающей с идентификатором группы
    <systemitem class="groupname">archive</systemitem>, не понадобятся привилегии суперпользователя
    для доступа к этой директории.
   </para>
  </sect2>

  <sect2 id="sec.security.acls.traditional.sticky">
   <title>Sticky Bit</title>
   <para>
    Существует также <emphasis>sticky bit</emphasis>. Его поведение отличается
    для файлов и директорий. Если он установлен для исполняемого файла,
    то соответствующая программа не будет выгружаться из оперативной памяти,
    чтобы избежать повторной загрузки с жесткого диска. Поскольку современные жесткие диски
    достаточно производительны, используется это редко. Если этот бит установлен для директории,
    пользователи не смогут удалять из нее чужие файлы. Типичными примерами 
    являются директории <filename>/tmp</filename> и <filename>/var/tmp</filename>:
   </para>
<screen>drwxrwxrwt 2 root root 1160 2002-11-19 17:15 /tmp</screen>
  </sect2>
 </sect1>
 <sect1 id="sec.security.acls.intro">
  <title>Преимущества ACL</title>

  <para>
   Традиционно в Linux для каждого файлового объекта задано три набора 
   привилегий. Они включают в себя права на чтение (<literal>r</literal>), запись
   (<literal>w</literal>) и исполнение (<literal>x</literal>)
   для каждого из трех типов пользователей: владельца файла, группы, и
   остальных пользователей. Помимо этого можно установить <emphasis>set
   user id</emphasis>, <emphasis>set group id</emphasis> и
   <emphasis>sticky</emphasis> бит. Эта скудная концепция вполне применима
   в большинстве ситуаций. Однако для более сложных сценариев или передовых
   приложений системные администраторы должны были использовать обходные пути,
   чтобы преодолеть ограничения традиционной концепции привилегий.
  </para>

  <para>
   ACL могут быть использованы как расширение традиционной концепции привилегий.
   Они позволяют предоставлять доступ индивидуальным пользователям или
   группам даже если те не являются владельцем или группой-владельцем.
   Списки управления доступом &mdash; это компонент ядра Linux, который в настоящее
   время поддерживается ReiserFS, Ext2, Ext3, JFS и XFS. С помощью
   ACL сложные сценарии могут быть реализованы без использования сложных 
   моделей привилегий на уровне приложения.
  </para>

  <para>
   Если Вы хотите заменить Windows сервер на Linux сервер, то преимущества ACL очевидны.
   Некоторые из подключенных рабочих машин могут
   работать под Windows даже после миграции. ОС Linux предоставляет
   службы печати и доступа к файлам клиентам Windows посредством Samba. 
   Поскольку Samba поддерживает списки управления доступом, привилегии 
   пользователя могут быть установлены используя графический интерфейс как на сервере Linux,
   так и в Windows (только для Windows NT и более поздних).
   С помощью части пакета Samba <command>winbindd</command>, возможно также
   назначить привилегии пользователям существующим только в домене
   Windows и не имеющим аккаунта на сервере Linux.
  </para>
 </sect1>
 <sect1 id="sec.security.acls.defs">
  <title>Определения</title><indexterm>

  <primary>ACL</primary>

  <secondary>определения</secondary></indexterm>

  <variablelist>
   <varlistentry>
    <term>Класс пользователя</term>
    <listitem>
     <para>
      Стандартная концепция привилегий POSIX использует три
      <emphasis>класса</emphasis> пользователей для назначения привилегий
      файловой системы: владелец, группа-владелец и другие пользователи. Три
      бита привилегий могут быть установлены для каждого класса пользователей
      предоставляя доступ на чтение (<literal>r</literal>), запись (<literal>w</literal>) и выполнение
      (<literal>x</literal>).
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>ACL</term>
    <listitem>
     <para>
      <indexterm>
      <primary>ACL</primary>
      <secondary>доступ</secondary>
      </indexterm> Привилегии пользователя и группы для всех видов объектов файловой системы 
      (файлов и директорий) определяются посредством ACL.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Неявные ACL</term>
    <listitem><indexterm>
     <primary>ACL</primary>
     <secondary>неявные</secondary></indexterm>
     <para>
      Неявные ACL могут применяться только к директориям. Они определяют привилегии,
      которые объект файловой системы наследует от родительской директории при создании.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Запись ACL</term>
    <listitem>
     <para>
      Каждый список управления доступом состоит из набора записей ACL. Запись ACL содержит
      тип, описатель пользователя или группы, на который ссылается эта запись, и
      набор привилегий. Для некоторых типов записей описатель группы и пользователя 
      не указывается.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </sect1>
 <sect1 id="sec.security.acls.handle">
  <title>Работа с ACL</title><indexterm>

  <primary>ACL</primary>

  <secondary>работа</secondary></indexterm><indexterm>

  <primary>ACL</primary>

  <secondary>структура</secondary></indexterm>

  <para>
   <xref linkend="tab.entrytype"/> отражает 6 существующих типов записей ACL,
    каждый из которых определяет привилегии пользователя или группы пользователей.
   Запись <emphasis>владелец</emphasis> определяет привилегии владельца
   файла или директории. Запись <emphasis>группа-владелец</emphasis> определяет
   привилегии группы, владеющей файлом. Суперпользователь может сменить
   владельца или группу-владельца при помощи команд <command>chown</command> и
   <command>chgrp</command>, в случае чего владелец и группа-владелец
   будут относиться к новому владельцу или группе-владельцу. Каждая запись <emphasis>именованный
   пользователь</emphasis> определяет привилегии пользователя, указанного в поле
   &quot;квалификатор&quot; этой записи. Каждая запись <emphasis>именованная группа</emphasis>
   определяет привилегии группы, указанной в поле &quot;квалификатор&quot; этой записи.
   Поле &quot;квалификатор&quot; заполнено только для записей типа именованный пользователь
   и именованная группа. Запись <emphasis>другие</emphasis> определяет привилегии всех остальных
   пользователей.
  </para>

  <para>
   Запись <emphasis>маска</emphasis> ограничивает привилегии именованного пользователя,
   именованной группы и группы-владельца определяя, какие разрешения этих записей 
   применяться, а какие - маскироваться. Если право существует в одной из этих записей
   и в маске, то оно применяется. Права, содержащиеся только в маске или только в записи
   не применяются, и доступ в этом случае не будет разрешен. Права владельца и группы-владельца
   применяются всегда. <xref linkend="tab.mask"/> демонстрирует этот механизм.
  </para>

  <para>
   Существует два основных класса ACL: <emphasis>минимальный</emphasis> ACL &mdash;
   содержит записи типов <quote>владелец</quote>, <quote>группа-владелец</quote>
   и <quote>другие</quote>, соответствующие традиционным битам доступа для файлов и директорий.
   <emphasis>Расширеннный</emphasis> ACL более продвинут. Он должен содержать
   маску и может включать в себя несколько записей для именованных пользователей и
   именованных групп.
  </para>

  <table
   id="tab.entrytype">
   <title>Типы записей ACL</title>
   <tgroup cols="2">
    <thead>
     <row>
      <entry>
       <para>
        Тип
       </para>
      </entry>
      <entry>
       <para>
        Текстовая форма
       </para>
      </entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry>
       <para>
        владелец
       </para>
      </entry>
      <entry>
       <para>
        <literal>user::rwx</literal>
       </para>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        именованный пользователь
       </para>
      </entry>
      <entry>
       <para>
        <literal>user:name:rwx</literal>
       </para>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        группа-владелец
       </para>
      </entry>
      <entry>
       <para>
        <literal>group::rwx</literal>
       </para>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        именованная группа
       </para>
      </entry>
      <entry>
       <para>
        <literal>group:name:rwx</literal>
       </para>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        маска
       </para>
      </entry>
      <entry>
       <para>
        <literal>mask::rwx</literal>
       </para>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        другие
       </para>
      </entry>
      <entry>
       <para>
        <literal>other::rwx</literal>
       </para>
      </entry>
     </row>
    </tbody>
   </tgroup>
  </table>

  <table id="tab.mask">
   <title>Маскировка привилегий доступа</title>
   <tgroup cols="3">
    <thead>
     <row>
      <entry>
       <para>
        Тип записи
       </para>
      </entry>
      <entry>
       <para>
        Текстовая форма
       </para>
      </entry>
      <entry>
       <para>
        Привилегии
       </para>
      </entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry>
       <para>
        именованный пользователь
       </para>
      </entry>
      <entry>
       <para>
        <literal>user:geeko:r-x</literal>
       </para>
      </entry>
      <entry>
       <para>
        <literal>r-x</literal>
       </para>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        маска
       </para>
      </entry>
      <entry>
       <para>
        <literal>mask::rw-</literal>
       </para>
      </entry>
      <entry>
       <para>
        <literal>rw-</literal>
       </para>
      </entry>
     </row>
     <row>
      <entry>
       <para/>
      </entry>
      <entry>
       <para>
        эффективные привилегии:
       </para>
      </entry>
      <entry>
       <para>
        <literal>r--</literal>
       </para>
      </entry>
     </row>
    </tbody>
   </tgroup>
  </table>

  <sect2 id="sec.security.acls.handle.fmbits">
   <title>Записи ACL и биты доступа</title><indexterm>
   <primary>ACL</primary>
   <secondary>биты доступа</secondary></indexterm>
   <para>
    <xref linkend="fig.acls.map.mini"/> и
    <xref linkend="fig.acls.map.ext"/> соответствуют минимальному и расширенному
    ACL. На рисунках изображены три блока: левый показывает
    тип спецификации записей ACL, центральный отображает пример ACL, и правый блок
    соответствует битам доступа традиционной концепции привилегий (отображаемым, например, 
    командой <command>ls <option>-l</option></command>). В обоих случаях привилегии класса <emphasis>
		владелец</emphasis> отображаются на запись ACL <quote>владелец</quote>.
    Привилегии класса <emphasis>другие</emphasis> отображаются на соответствующую
    запись ACL. Однако отображение прав доступа класса <emphasis>группа</emphasis>
    отличается для каждого из случаев.
   </para>
   <figure id="fig.acls.map.mini">
    <title>Минимальный ACL: Сравнение записей ACL с битами доступа</title>
    <mediaobject>
     <imageobject role="fo">
      <imagedata fileref="acls_map_mini.png" width="75%" format="PNG"/>
     </imageobject>
     <imageobject role="html">
      <imagedata fileref="acls_map_mini.png" width="75%" format="PNG"/>
     </imageobject>
    </mediaobject>
   </figure>
   <para>
    В случае минимального ACL &mdash; без маски &mdash; права доступа группы
    отражаются на запись ACL группа-владелец, как показывает 
    <xref linkend="fig.acls.map.mini"/>. В случае расширенного 
    ACL&mdash; с маской &mdash; права доступа группы отображаются на маску, 
    <xref linkend="fig.acls.map.ext"/>.
   </para>
   <figure
    id="fig.acls.map.ext">
    <title>Расширенный ACL: Сравнение записей ACL с битами доступа</title>
    <mediaobject>
     <imageobject role="fo">
      <imagedata fileref="acls_map_ext.png" width="75%" format="PNG"/>
     </imageobject>
     <imageobject role="html">
      <imagedata fileref="acls_map_ext.png" width="75%" format="PNG"/>
     </imageobject>
    </mediaobject>
   </figure>
   <remark>Oops. We need to change the example users in the pngs! -rwalter</remark>
   <para>
    Это отображение используется для упрощения взаимодействия с приложениями,
    избавляя от небходимости поддержки ACL приложением. Привилегии доступа,
    назначенные посредством битов доступа, задают верхний предел
    для всех <quote>тонких настроек</quote>, сделанных при помощи ACL. Изменение
    битов доступа отражается на ACL и наоборот.
   </para>
  </sect2>

  <sect2 id="sec.security.acls.handle.accacl">
   <title>Директория с ACL</title><indexterm>
   <primary>ACL</primary>
   <secondary>доступ</secondary></indexterm>
   <para>
    Вы можете получить доступ к ACL с помощью команд <command>getfacl</command> 
    и <command>setfacl</command>. Использование этих команд показано в следующем примере.
   </para>
   <para>
    Перед созданием директории используйте команду <command>umask</command>,
    чтобы задать биты доступа маскируемые при создании файлового объекта.
    Команда <command>umask</command> <option>027</option> устанавливает
    привилегии по умолчанию следующим образом: владелец получает полный доступ (<literal>0</literal>),
    группе запрещен доступ на запись (<literal>2</literal>), доступ остальным пользователям 
    закрыт (<literal>7</literal>). В действительности <command>umask</command>
    маскирует соответствующие биты доступа или сбрасывает их. Подробности
    можно узнать на man странице <command>umask</command>.
   </para>
   <para>
    <command>mkdir mydir</command> создает директорию <filename>mydir</filename>
    с привилегиями, установленными командой
    <command>umask</command>. С помощью <command>ls <option>-dl
    mydir</option></command> можно определить правильность установки привилегий.
    Для данного примера вывод будет следующим:
   </para>
<screen>drwxr-x--- ... tux project3 ... mydir</screen>
   <para>
    Используя <command>getfacl <option>mydir</option></command>, проверьте
    исходное состояние ACL. Будет отображена следующая информация:
   </para>
<screen># file: mydir 
# owner: tux 
# group: project3 
user::rwx 
group::r-x 
other::---</screen>
   <para>
    <indexterm>
    <primary>команды</primary>
    <secondary>getfacl</secondary>
    </indexterm> Первые три строки вывода отображают имя, владельца и группу-владельца
    директории. Следующие три строки содержат три записи 
    ACL: <quote>владелец</quote>, <quote>группа-владелец</quote> и <quote>другие</quote>.
    Фактически мы имеет дело с минимальным ACL и команда <command>getfacl</command> не дает дополнительной информации по сравнению с командой <command>ls</command>.
   </para>
   <para>
    Измените ACL, разрешив доступ на чтение, запись и выполнение пользователю
    <literal>geeko</literal> и группе <literal>mascots</literal> командой:
   </para>
<screen>setfacl -m user:geeko:rwx,group:mascots:rwx mydir</screen><indexterm>
   <primary>команды</primary>
   <secondary>setfacl</secondary></indexterm>
   <para>
    Опция <option>-m</option> указывает <command>setfacl</command> 
    изменить существующий ACL. Следующий за ней аргумент определяет записи ACL,
    которые будут изменены (можно указать несколько записей, разделяя из запятыми).
    Последняя часть определяет имя директории, к которой будут применены эти изменения.
    Используйте команду <command>getfacl</command>, чтобы узнать
    полученные ACL.
   </para>
<screen># file: mydir 
# owner: tux 
# group: project3 
user::rwx 
user:geeko:rwx 
group::r-x
group:mascots:rwx 
mask::rwx 
other::---</screen>
   <para>
    <indexterm>
    <primary>ACL</primary>
    <secondary>маски</secondary>
    </indexterm> В дополнение к записям, созданным для пользователя
    <literal>geeko</literal> и группы <literal>mascots</literal>, была
    добавлена запись с маской. Эта запись была создана автоматически,
    таким образом, что все заданные права доступа будут применены. <command>setfacl</command>
    автоматически адаптирует существующие записи с масками к изменяемым битам.
    Это поведение можно изменить используя опцию <literal>-n</literal>. Маска
		определяет максимальные эффективные привилегии для класса <quote>группа</quote>, 
    включая именованного пользователя, именованную группу и группу-владельца.
		Биты доступа класса <quote>группа</quote>, отображаемые командой <command>ls</command>,
    <option>-dl mydir</option> теперь соответствуют записи <literal>маска</literal>.
   </para>
<screen>drwxrwx---+ ... tux project3 ... mydir</screen>
   <para>
    Первый столбец вывода теперь содержит дополнительно знак
    <literal>+</literal>, указывая на существование
    <emphasis>расширенных</emphasis> ACL для этого элемента.
   </para>
   <para>
    Согласно выводу команды <command>ls</command>, маска включает в себя доступ на запись.
    Традиционно эти биты означали бы, что группа-владелец (<literal>project3</literal>)
    также имеет право на запись в директорию <filename>mydir</filename>.
    Однако эффективные права доступа соответствуют сочетанию прав 
    заданных для группы-владельца и маски &mdash; <literal>r-x</literal> в нашем примере 
    (<xref linkend="tab.mask"/>).
    Поэтому в отношении эффективных привилегий группы-владельца, даже после добавления дополнительных записей ACL,
    ничего не изменилось.
   </para>
   <para>
    Измените значение маски с помощью команд <command>setfacl</command> или
    <command>chmod</command>. Например используйте <command>chmod <option>g-w
    mydir</option></command>. <command>ls <option>-dl
    mydir</option></command> покажет:
   </para>
<screen>drwxr-x---+ ... tux project3 ... mydir</screen>
   <para>
    <command>getfacl <option>mydir</option></command> даст следующий
    вывод:
   </para>
<screen># file: mydir 
# owner: tux 
# group: project3 
user::rwx 
user:geeko:rwx          # effective: r-x
group::r-x 
group:mascots:rwx       # effective: r-x 
mask::r-x 
other::---</screen>
   <para>
    После сброса бита доступа на запись для группы командой <command>chmod</command>, 
		вывода команды <command>ls</command> достаточно, чтобы увидеть, что биты маски
    изменились: доступ на запись снова есть только у владельца <filename>mydir</filename>.
    Вывод <command>getfacl</command> подтверждает это. Он включает в себя комментарий
    для всех записей, в которых биты доступа не соответствуют реальным привилегиям
    из-за применения маски. Оригинальные права могут быть восстановлены в любое время командой
    <command>chmod <option>g+w mydir</option></command>.
   </para>
  </sect2>

  <sect2 id="sec.security.acls.handle.defacl">
   <title>Директория с ACL по умолчанию</title><indexterm>
   <primary>ACL</primary>
   <secondary>неявные</secondary></indexterm>
   <para>
    Директории могут иметь ACL по умолчанию, которые являются специальной разновидностью ACL,
    определяющей права доступа, наследуемые объектами в этой 
    директории при их создании. ACL по умолчанию влияет на поддиректории и файлы.
   </para>
   <sect3 id="sec.security.acls.handle.defacl.eff">
    <title>Действия ACL по умолчанию</title><indexterm>
    <primary>ACL</primary>
    <secondary>действия</secondary></indexterm>
    <para>
     Существует два пути передачи ACL по умолчанию файлам и поддиректориям:
    </para>
    <itemizedlist>
     <listitem>
      <para>
       Поддиректория наследует ACL родительской директории 
       как свои ACL по умолчанию и обычные ACL.
      </para>
     </listitem>
     <listitem>
      <para>
       Файл наследует ACL по умолчанию как свои ACL.
      </para>
     </listitem>
    </itemizedlist>
    <para>
     Все системные вызовы, создающие объекты файловой системы, используют 
     параметр <literal>режим</literal>, который определяет режим доступа
     к созданному объекту. Если родительская директория не имеет 
     ACL по умолчанию, заданные <literal>umask</literal> биты доступа 
     вычитаются из битов доступа параметра <literal>режим</literal>,
     а результат устанавливается созданному объекту.
     Если же ACL по умолчанию задан, биты доступа нового объекта 
     соответствуют совпадающим частям параметра <literal>режим</literal>
     и разрешениям ACL по умолчанию. 
     В этом случае <literal>umask</literal> не учитывается.
    </para>
   </sect3>
   <sect3 id="sec.security.acls.handle.defacl.prac">
    <title>Применение ACL по умолчанию</title>
    <para>
     Следующие три примера показывают основные операции для директорий и 
     ACL по умолчанию:
    </para>
    <orderedlist>
     <listitem>
      <para>
       Добавить ACL по умолчанию существующей директории <filename>mydir</filename>:
      </para>
<screen>setfacl -d -m group:mascots:r-x mydir</screen>
      <para>
       Опция <literal>-d</literal> команды <command>setfacl</command>
       указывает <command>setfacl</command> выполнить изменения
       (опция <literal>-m</literal>) для ACL по умолчанию.
      </para>
      <para>
       Взглянем поближе на результат выполнения этой команды:
      </para>
<screen>getfacl mydir

# file: mydir 
# owner: tux 
# group: project3 
user::rwx 
user:geeko:rwx 
group::r-x
group:mascots:rwx 
mask::rwx 
other::--- 
default:user::rwx
default:group::r-x 
default:group:mascots:r-x 
default:mask::r-x
default:other::---</screen>
      <para>
       <command>getfacl</command> возвращает как ACL, так и ACL по умолчанию.
       ACL по умолчанию соответствуют строкам, начинающимся с
       <literal>default</literal>. Несмотря на то, что Вы передали команде
       <command>setfacl</command> только запись ACL по умолчанию для группы
       <literal>mascots</literal>, <command>setfacl</command>
       автоматически скопировала все остальные записи из ACL, чтобы создать 
       валидный ACL по умолчанию. ACL по умолчанию не
       оказывает моментального влияния на доступ к объекту. Они вступают в игру
       при создании новых объектов. Эти новые объекты наследуют привилегии
       только от ACL по умолчанию своей родительской директории.
      </para>
     </listitem>
     <listitem>
      <para>
       В следующем примере используйте команду <command>mkdir</command>, чтобы 
       создать в <filename>mydir</filename> поддиректорию, которая унаследует
       ACL по умолчанию.
      </para>
<screen>mkdir mydir/mysubdir

getfacl mydir/mysubdir 

# file: mydir/mysubdir 
# owner: tux 
# group: project3 
user::rwx 
group::r-x 
group:mascots:r-x 
mask::r-x
other::--- 
default:user::rwx 
default:group::r-x
default:group:mascots:r-x 
default:mask::r-x 
default:other::---</screen>
      <para>
       Как и ожидалось, вновь созданная директория 
       <filename>mysubdir</filename> получила права доступа из 
       ACL по умолчанию родительской директории. ACL директории <filename>mysubdir</filename>
       является точным отражением ACL по умолчанию директории <filename>mydir</filename>.
       Поддиректория передаст эти права вложенным в нее объектам и т.д.
      </para>
     </listitem>
     <listitem>
      <para>
       Используйте <command>touch</command> для создания файла в 
       директории <filename>mydir</filename>, например, <command>touch
       <option>mydir/myfile</option></command>. <command>ls <option>-l
       mydir/myfile</option></command> покажет:
      </para>
<screen>-rw-r-----+ ... tux project3 ... mydir/myfile</screen>
      <para>
       Вывод <command>getfacl
       <option>mydir/myfile</option></command>:
      </para>
<screen># file: mydir/myfile 
# owner: tux 
# group: project3
user::rw- 
group::r-x          # effective:r-- 
group:mascots:r-x   # effective:r-- 
mask::r-- 
other::---</screen>
      <para>
       Если ACL по умолчанию и <command>umask</command> не накладывают никаких ограничений,
       <command>touch</command> при создании новых файлов использует <literal>режим</literal>
       со значением <literal>0666</literal>, создавая файлы с доступом на 
       чтение и запись для всех (<xref linkend="sec.security.acls.handle.defacl.eff"/>). Также
       это означает, что все права доступа, которые не содержит
       значение <literal>режим</literal> будут удалены из соответствующих записей ACL.
       Несмотря на то, что записи для группы не были удалены из ACL, значение маски было 
       модифицировано для маскировки прав не заданных значением <literal>режим</literal>.
      </para>
      <para>
       Эта модель необходима для правильного взаимодействия приложений (например,
       компиляторов) с ACL. Вы можете создавать файлы с ограниченным доступом 
       и затем помечать их как исполняемые. Механизм <command>mask</command>
       гарантирует, что нужные пользователи и группы смогут запускать их
       как им заблагорассудится.
      </para>
     </listitem>
    </orderedlist>
   </sect3>
  </sect2>

  <sect2 id="sec.security.acls.handle.alg">
   <title>Алгоритм проверки ACL</title><indexterm>
   <primary>ACL</primary>
   <secondary>алгоритм проверки</secondary></indexterm>
   <para>
    Алгоритм проверки применяется перед тем, как любому процессу или приложению будет
    предоставлен доступ к защищенному ACL объекту файловой системы. Основное правило проверки
    заключается в том, что записи ACL проверяются в следующем порядке:
    владелец, именованный пользователь, группа-владелец или именованная группа,
    другие пользователи. Доступ предоставляется в соответствии с записью, которая более 
    подходит процессу. Привилегии не накапливаются.
   </para>
   <para>
    Все усложняется, если процесс принадлежит более чем к одной группе
    и потенциально соответствует нескольким групповым записям. В этом случае из множества
    выбирается произвольная запись с требуемыми привилегиями.
    Неважно, какая из записей приведет к результату <quote>доступ
    разрешен</quote>. Аналогично, если ни одна из групповых записей не содержит
    требуемых привилегий, случайно выбранная запись приведет к конечному результату
    <quote>доступ запрещен</quote>.
   </para>
  </sect2>
 </sect1>
 <sect1 id="sec.security.acls.future">
  <title>Поддержка ACL приложениями</title><indexterm>

  <primary>ACL</primary>

  <secondary>поддержка</secondary></indexterm>

  <para>
   ACL могут быть использованы для реализации очень сложных моделей привилегий, 
   которые соответствуют требованиям современных приложений. Традиционная система 
   привилегий и ACL могут эффективно сочетаться. Основные файловые 
   команды (<command>cp</command>, <command>mv</command>,
   <command>ls</command>, и т.д.) поддерживают ACL, равно как Samba и Konqueror.
  </para>

  <para>
   К сожалению множество редакторов и файловых менеджеров до сих пор не поддерживает ACL.
   Например, копирование файлов с помощью Emacs приводит к потере ACL.
   При изменении файлов в редакторе ACL иногда сохраняются, а иногда нет,
   в зависимости от того способа, которым редактор создает резервные копии.
   Если редактор записывает изменения в оригинальный файл, ACL сохраняются.
   Если измененное содержание сохраняется в новый файл, который впоследствии
   получает имя оригинального файла и редактор не поддерживает ACL, они могут быть потеряны.
   За исключением архиватора star в настоящее время не существует программ резервного 
   копирования, сохраняющих ACL.
  </para>
 </sect1>
 <sect1
  id="sec.security.acls.info">
  <title>Дополнительная информация</title>

  <para>
   За подробной информацией об ACL обращайтесь в справку по командам
   <command>getfacl(1)</command>, <command>acl(5)</command> и
   <command>setfacl(1)</command>.
  </para><indexterm class="endofrange" startref="idx.file_systems_access_control_lists"/><indexterm class="endofrange" startref="idx.permissions_ACLs"/><indexterm class="endofrange" startref="idx.ACLs"/>
 </sect1>
</chapter>
