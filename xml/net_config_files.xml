<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sect1 PUBLIC "-//Novell//DTD NovDoc XML V1.0//EN" "novdocx.dtd"
[
  <!ENTITY % NOVDOC.DEACTIVATE.IDREF "INCLUDE">
  <!ENTITY % entities SYSTEM "entity-decl.ent">
  %entities;
]>
<!--
bnc#569609:  Missing -s option in "modify options" of netconfig help text.
2010-06-14, ke: -\-help now explains -s
2010-06-29, ke: DONE
-->
<sect1 id="sec.basicnet.manconf">
 <title>Configuring a Network Connection Manually</title><indexterm id="idx.networks_configuring" class="startofrange">

 <primary>networks</primary>

 <secondary>configuring</secondary></indexterm><indexterm id="idx.configuring_networks_manually" class="startofrange">

 <primary>configuring</primary>

 <secondary>networks</secondary>

 <tertiary>manually</tertiary></indexterm>

 <para>
  Manual configuration of the network software should always be the last
  alternative. Using &yast; is recommended. However, this background
  information about the network configuration can also assist your work with
  &yast;.
 </para>

<!--
mt:
mt: just COMMENT to next two paragraphs:
mt:
mt:   every time the kernel loads a module for a network hardware, it
mt:   assigns the next free interface name for the device and triggers
mt:   an udev event.
mt:   The udev persistent net generator (75-persistent-net-generator.rules)
mt:   generates a rule matching the hardware (by default using hardware
mt:   [MAC] address) and assigns an persistently uniqe interface name for
mt:   this hardware, that is one, that is not already used by any another
mt:   device (unused in 70-persistent-net.rules) and executes the rule
mt:   that renames the kernel interface name to the unique one when needed.
mt:   YaST2 is able to edit/modify the persistent rules.
mt:
 -->

 <para>
  When the Kernel detects a network card and creates a corresponding network
  interface, it assigns the device a name depending on the order of device
  discovery, or order of the loading of the Kernel modules. The default
  Kernel device names are only predictable in very simple or tightly
  controlled hardware environments. Systems which allow adding or removing
  hardware during runtime or support automatic configuration of devices
  cannot expect stable network device names assigned by the Kernel across
  reboots.
 </para>

 <para>
  However, all system configuration tools rely on persistent interface
  names. This problem is solved by udev. The udev persistent net generator
  (<filename>/lib/udev/rules.d/75-persistent-net-generator.rules</filename>)
  generates a rule matching the hardware (using its hardware address by
  default) and assigns a persistently unique interface for the hardware. The
  udev database of network interfaces is stored in the file
  <filename>/etc/udev/rules.d/70-persistent-net.rules</filename>. Every line
  in the file describes one network interface and specifies its persistent
  name. System administrators can change the assigned names by editing the
  <literal>NAME=""</literal> entries. The persistent rules can also be
  modified using &yast;.
 </para>

 <para>
  <xref linkend="tab.net.script.conf"/> summarizes the most important
  scripts involved in the network configuration.
 </para>

 <table id="tab.net.script.conf">
  <title>Manual Network Configuration Scripts</title>
  <tgroup cols="2">
   <thead>
    <row>
     <entry>
      <para>
       Command
      </para>
     </entry>
     <entry>
      <para>
       Function
      </para>
     </entry>
    </row>
   </thead>
   <tbody>
    <row>
     <entry>
      <para>
       <command>ifup, ifdown, ifstatus</command>
      </para>
     </entry>
     <entry>
      <para>
       The <literal>if</literal> scripts start or stop network interfaces,
       or return the status of the specified interface. For more
       information, see the <systemitem>ifup</systemitem> manual page.
      </para>
     </entry>
    </row>
    <row>
     <entry>
      <para>
       <command>rcnetwork</command>
      </para>
     </entry>
     <entry>
      <para>
       The <literal>rcnetwork</literal> script can be used to start, stop or
       restart all network interfaces (or just a specified one). Use
       <command>rcnetwork stop</command> to stop, <command>rcnetwork
       start</command> to start and <command>rcnetwork restart</command> to
       restart network interfaces. If you want to stop, start or restart
       just one interface, use the command followed by the interface name,
       for example <command>rcnetwork restart eth0</command>.
<!--
       If no interface is specified, the firewall is stopped, started, or

       mt: AFAIK no. the firewall is never stopped. Just started again every
       mt: time an interface comes up.

       restarted along with the network interfaces.
       -->
       The <command>rcnetwork status</command> command displays the state of
       the interfaces, their IP addresses and whether a DHCP client is
       running. With <command>rcnetwork stop-all-dhcp-clients</command> and
       <command>rcnetwork restart-all-dhcp-clients</command> you can stop or
       restart DHCP clients running on network interfaces.
      </para>
     </entry>
    </row>
   </tbody>
  </tgroup>
 </table>

 <para>
  For more information about udev and persistent device names, see
  <xref linkend="cha.udev"/>.
 </para>

 <sect2 id="sec.basicnet.manconf.files">
  <title>Configuration Files</title><indexterm>
  <primary>configuration files</primary></indexterm><indexterm id="idx.networks_configuration_files" class="startofrange">
  <primary>networks</primary>
  <secondary>configuration files</secondary></indexterm>
  <para>
   This section provides an overview of the network configuration files and
   explains their purpose and the format used.
  </para>
  <sect3 id="sec.basicnet.manconf.files.ifcfg">
   <title><filename>/etc/sysconfig/network/ifcfg-*</filename></title>
   <para>
    These files contain the configurations for network interfaces. They
    include information such as the start mode and the IP address. Possible
    parameters are described in the manual page of
    <systemitem>ifup</systemitem>. Additionally, most variables from the
    <filename>dhcp</filename> and <filename>wireless</filename> files can be
    used in the <filename>ifcfg-*</filename> files if a general setting
    should be used for only one interface. However, most of the
    <filename>/etc/sysconfig/network/config</filename> variables are global
    and cannot be overridden in ifcfg-files. For example
    <systemitem>NETWORKMANAGER</systemitem> or
    <systemitem>NETCONFIG_*</systemitem> variables are global.
   </para>
   <para>
    For <filename>ifcfg.template</filename>, see
    <xref
   linkend="sec.basicnet.manconf.files.config-etc"/>.
   </para><indexterm>
   <primary>configuration files</primary>
   <secondary>ifcfg-*</secondary></indexterm>
   <para arch="zseries" os="sles">
    IBM &zseries; do not support USB. The names of the interface files and
    network aliases contain &zseries;-specific elements like
    <literal>qeth</literal>.
   </para>
  </sect3>
  <sect3 id="sec.basicnet.manconf.files.config-etc">
   <title><filename>/etc/sysconfig/network/config</filename>, <filename>/etc/sysconfig/network/dhcp</filename>, and <filename>/etc/sysconfig/network/wireless</filename></title><indexterm>
   <primary>configuration files</primary>
   <secondary>network</secondary></indexterm><indexterm>
   <primary>configuration files</primary>
   <secondary>dhcp</secondary></indexterm><indexterm>
   <primary>configuration files</primary>
   <secondary>wireless</secondary></indexterm>
   <para>
    The file <filename>config</filename> contains general settings for the
    behavior of <command>ifup</command>, <command>ifdown</command> and
    <command>ifstatus</command>. <filename>dhcp</filename> contains settings
    for DHCP and <filename>wireless</filename> for wireless LAN cards. The
    variables in all three configuration files are commented. Some of the
    variables from <filename>/etc/sysconfig/network/config</filename> can
    also be used in <filename>ifcfg-*</filename> files, where they are given
    a higher priority. The
    <filename>/etc/sysconfig/network/ifcfg.template</filename> file lists
    variables that can be specified in a per interface scope. However, most
    of the <filename>/etc/sysconfig/network/config</filename> variables are
    global and cannot be overridden in ifcfg-files. For example,
    <systemitem>NETWORKMANAGER</systemitem> or
    <systemitem>NETCONFIG_*</systemitem> variables are global.
   </para>
  </sect3>
  <sect3>
   <title><filename>/etc/sysconfig/network/routes</filename> and <filename>/etc/sysconfig/network/ifroute-*</filename></title><indexterm id="idx.routing" class="startofrange">
   <primary>routing</primary></indexterm><indexterm>
   <primary>routing</primary>
   <secondary>routes</secondary></indexterm><indexterm>
   <primary>configuration files</primary>
   <secondary>routes</secondary></indexterm><indexterm>
   <primary>configuring</primary>
   <secondary>routing</secondary></indexterm>
   <para>
    The static routing of TCP/IP packets is determined here. All the static
    routes required by the various system tasks can be entered in the
    <filename>/etc/sysconfig/network/routes</filename> file: routes to a
    host, routes to a host via a gateway and routes to a network. For each
    interface that needs individual routing, define an additional
    configuration file:
    <filename>/etc/sysconfig/network/ifroute-*</filename>. Replace
    <literal>*</literal> with the name of the interface. The entries in the
    routing configuration files look like this: <indexterm>
    <primary>routing</primary>
    <secondary>static</secondary>
    </indexterm>
   </para>
<screen># Destination     Dummy/Gateway     Netmask            Device
#
127.0.0.0         0.0.0.0           255.255.255.0      lo
204.127.235.0     0.0.0.0           255.255.255.0      eth0
default           204.127.235.41    0.0.0.0            eth0
207.68.156.51     207.68.145.45     255.255.255.255    eth1
192.168.0.0       207.68.156.51     255.255.0.0        eth1</screen>
   <para>
    The route's destination is in the first column. This column may contain
    the IP address of a network or host or, in the case of
    <emphasis>reachable</emphasis> name servers, the fully qualified network
    or hostname.
   </para>
   <para>
    The second column contains the default gateway or a gateway through
    which a host or network can be accessed. The third column contains the
    netmask for networks or hosts behind a gateway. For example, the mask is
    <systemitem
     class="netmask">255.255.255.255</systemitem> for a host
    behind a gateway.
   </para>
   <para>
    The fourth column is only relevant for networks connected to the local
    host such as loopback, Ethernet, ISDN, PPP and dummy device. The device
    name must be entered here.
   </para>
   <para>
    An (optional) fifth column can be used to specify the type of a route.
    Columns that are not needed should contain a minus sign
    <literal>-</literal> to ensure that the parser correctly interprets the
    command. For details, refer to the <systemitem>routes(5)</systemitem>
    man page.
   </para>
   <para>
    The unified format for IPv4 and IPv6 now looks as follows:
   </para>
<screen>
<replaceable>prefix</replaceable>/<replaceable>length</replaceable>     <replaceable>gateway</replaceable> -            [<replaceable>interface</replaceable>]
</screen>
   <para>
    And the so-called compatibility format looks accordingly:
   </para>
<screen><replaceable>prefix</replaceable>            <replaceable>gateway</replaceable> <replaceable>length</replaceable>       [<replaceable>interface</replaceable>]
</screen>
   <para>
    For IPv4 you still can use the old format with netmask:
   </para>
<screen><replaceable>ipv4-network</replaceable>      <replaceable>gateway</replaceable> <replaceable>ipv4-netmask</replaceable> [<replaceable>interface</replaceable>]
</screen>
   <para>
    The following examples are equivalent:
   </para>
<screen
>2001:db8:abba:cafe::/64 2001:db8:abba:cafe::dead  -            eth0
208.77.188.0/24         208.77.188.166            -            eth0

2001:db8:abba:cafe::    2001:db8:abba:cafe::dead 64            eth0
208.77.188.0            208.77.188.166           24            eth0

208.77.188.0            208.77.188.166           255.255.255.0 eth0
</screen>
<!-- see bug 467165, with ipv6 example routes --><indexterm class="endofrange" startref="idx.routing"/>
  </sect3>
  <sect3>
   <title><filename>/etc/resolv.conf</filename></title><indexterm>
   <primary>configuration files</primary>
   <secondary>resolv.conf</secondary></indexterm>
   <para>
    The domain to which the host belongs is specified in this file (keyword
    <systemitem>search</systemitem>). Also listed is the status of the name
    server address to access (keyword <systemitem>nameserver</systemitem>).
    Multiple domain names can be specified in the file. When resolving a
    name that is not fully qualified, an attempt is made to generate one by
    attaching the individual <systemitem>search</systemitem> entries.
    Multiple name servers can be specified in multiple lines, each beginning
    with <systemitem>nameserver</systemitem>. Comments are preceded by
    <literal>#</literal> signs. <xref linkend="dat.netz.etc.resolv.conf"/>
    shows what <filename>/etc/resolv.conf</filename> could look like.
    <indexterm>
    <primary>DNS</primary>
    <secondary>domains</secondary>
    </indexterm> <indexterm>
    <primary>DNS</primary>
    <secondary>name servers</secondary>
    </indexterm>
   </para>
   <para>
    However, the <filename>/etc/resolv.conf</filename> should not be edited
    by hand. Instead, it is generated by the <command>netconfig</command>
    script. To define static DNS configuration without using &yast;, edit
    the appropriate variables manually in the
    <filename>/etc/sysconfig/network/config</filename> file:
   </para>
   <variablelist>
    <varlistentry>
     <term><systemitem>NETCONFIG_DNS_STATIC_SEARCHLIST</systemitem>
     </term>
     <listitem>
      <para>
       list of DNS domain names used for hostname lookup
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>NETCONFIG_DNS_STATIC_SERVERS</systemitem>
     </term>
     <listitem>
      <para>
       list of name server IP addresses to use for hostname lookup
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>NETCONFIG_DNS_FORWARDER</systemitem>
     </term>
     <listitem>
      <para>
       defines the name of the DNS forwarder that has to be configured
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
   <para>
    To disable DNS configuration using netconfig, set
    <literal>NETCONFIG_DNS_POLICY=''</literal>. For more information about
    <command>netconfig</command>, see <command>man 8 netconfig</command>.
   </para>
   <example id="dat.netz.etc.resolv.conf">
    <title><filename>/etc/resolv.conf</filename></title>
<screen># Our domain
search &exampledomain;
#
# We use &dnsname; (&dnsip;) as nameserver
nameserver &dnsip;</screen>
   </example>
  </sect3>
<!-- ============================================================== -->
  <sect3 id="sec.basicnet.manconf.netconfig">
   <title><filename>/sbin/netconfig</filename></title>
   <para>
    <command>netconfig</command> is a modular tool to manage additional
    network configuration settings. It merges statically defined settings
    with settings provided by autoconfiguration mechanisms as DHCP or PPP
    according to a predefined policy. The required changes are applied to
    the system by calling the netconfig modules that are responsible for
    modifying a configuration file and restarting a service or a similar
    action.
   </para>
   <para>
    <command>netconfig</command> recognizes three main actions. The
    <command>netconfig modify</command> and <command>netconfig
    remove</command> commands are used by daemons such as DHCP or PPP to
    provide or remove settings to netconfig. Only the <command>netconfig
    update</command> command is available for the user:
   </para>
   <variablelist>
    <varlistentry>
     <term><command>modify</command>
     </term>
     <listitem>
      <para>
       The <command>netconfig modify</command> command modifies the current
       interface and service specific dynamic settings and updates the
       network configuration. Netconfig reads settings from standard input
       or from a file specified with the <option>--lease-file
       <replaceable>filename</replaceable></option> option and internally
       stores them until a system reboot (or the next modify or remove
       action). Already existing settings for the same interface and service
       combination are overwritten. The interface is specified by the
       <option>-i <replaceable>interface_name</replaceable></option>
       parameter. The service is specified by the <option>-s
       <replaceable>service_name</replaceable></option> parameter.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><command>remove</command>
     </term>
     <listitem>
      <para>
       The <command>netconfig remove</command> command removes the dynamic
       settings provided by a modificatory action for the specified
       interface and service combination and updates the network
       configuration. The interface is specified by the <option>-i
       <replaceable>interface_name</replaceable></option> parameter. The
       service is specified by the <option>-s
       <replaceable>service_name</replaceable></option> parameter.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><command>update</command>
     </term>
     <listitem>
      <para>
<!-- fate#306274 -->
       The <command>netconfig update</command> command updates the network
       configuration using current settings. This is useful when the policy
       or the static configuration has changed. Use the <option>-m
       <replaceable>module_type</replaceable></option> parameter, if you
       want to update a specified service only
       (<systemitem>dns</systemitem>, <systemitem>nis</systemitem>, or
       <systemitem>ntp</systemitem>).
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
<!--
   mt: NetworkManager does not read or write _any_ sysconfig variables
   anymore!
   -->
   <para>
    The netconfig policy and the static configuration settings are defined
    either manually or using &yast; in the
    <filename>/etc/sysconfig/network/config</filename> file. The dynamic
    configuration settings provided by autoconfiguration tools as DHCP or
    PPP are delivered directly by these tools with the <command>netconfig
    modify</command> and <command>netconfig remove</command> actions. &nm;
    also uses <command>netconfig modify</command> and <command>netconfig
    remove</command> actions. When &nm; is enabled, netconfig (in policy
    mode <literal>auto</literal>) uses only &nm; settings, ignoring settings
    from any other interfaces configured using the traditional ifup method.
    If &nm; does not provide any setting, static settings are used as a
    fallback. A mixed usage of &nm; and the traditional ifup method is not
    supported.
   </para>
   <para>
    For more information about <command>netconfig</command>, see
    <command>man 8 netconfig</command>.
   </para>
  </sect3>
  <sect3 id="sec.basicnet.manconf.hosts">
   <title><filename>/etc/hosts</filename></title><indexterm>
   <primary>configuration files</primary>
   <secondary>hosts</secondary></indexterm>
   <para>
    In this file, shown in <xref linkend="dat.netz.etc.hosts"/>, IP
    addresses are assigned to hostnames. If no name server is implemented,
    all hosts to which an IP connection will be set up must be listed here.
    For each host, enter a line consisting of the IP address, the fully
    qualified hostname, and the hostname into the file. The IP address must
    be at the beginning of the line and the entries separated by blanks and
    tabs. Comments are always preceded by the <literal>#</literal> sign.
   </para>
   <example id="dat.netz.etc.hosts">
    <title><filename>/etc/hosts</filename></title>
<screen>127.0.0.1 localhost
&wsIip; &wsIname; &wsI;
&wsIIip; &wsIIname; &wsII;</screen>
   </example>
  </sect3>
  <sect3>
   <title><filename>/etc/networks</filename></title><indexterm>
   <primary>configuration files</primary>
   <secondary>networks</secondary></indexterm>
   <para>
    Here, network names are converted to network addresses. The format is
    similar to that of the <filename>hosts</filename> file, except the
    network names precede the addresses. See
    <xref linkend="dat.netz.networks"/>.
   </para>
   <example id="dat.netz.networks">
    <title><filename>/etc/networks</filename></title>
<screen>loopback     127.0.0.0
localnet     192.168.0.0</screen>
   </example>
  </sect3>
  <sect3>
   <title><filename>/etc/host.conf</filename></title><indexterm>
   <primary>configuration files</primary>
   <secondary>host.conf</secondary></indexterm>
   <para>
    Name resolution&mdash;the translation of host and network names via the
    <emphasis>resolver</emphasis> library&mdash;is controlled by this file.
    This file is only used for programs linked to libc4 or libc5. For
    current glibc programs, refer to the settings in
    <filename>/etc/nsswitch.conf</filename>. A parameter must always stand
    alone in its own line. Comments are preceded by a <literal>#</literal>
    sign. <xref linkend="tab.netz.param.hostconf"/> shows the parameters
    available. A sample <filename>/etc/host.conf</filename> is shown in
    <xref linkend="dat.netz.etc.hostconf"/>.
   </para>
   <table id="tab.netz.param.hostconf">
    <title>Parameters for /etc/host.conf</title>
    <tgroup cols="2" align="left">
     <tbody>
      <row>
       <entry>
        <para>
         order <emphasis>hosts</emphasis>, <emphasis>bind</emphasis>
        </para>
       </entry>
       <entry>
        <para>
         Specifies in which order the services are accessed for the name
         resolution. Available arguments are (separated by blank spaces or
         commas):
        </para>
       </entry>
      </row>
      <row>
       <entry>
        <para/>
       </entry>
       <entry>
        <para>
         <emphasis>hosts</emphasis>: searches the
         <filename>/etc/hosts</filename> file
        </para>
       </entry>
      </row>
      <row>
       <entry>
        <para/>
       </entry>
       <entry>
        <para>
         <emphasis>bind</emphasis>: accesses a name server
        </para>
       </entry>
      </row>
      <row>
       <entry>
        <para/>
       </entry>
       <entry>
        <para>
         <emphasis>nis</emphasis>: uses NIS
        </para>
       </entry>
      </row>
      <row>
       <entry>
        <para>
         multi <emphasis>on</emphasis>/<emphasis>off</emphasis>
        </para>
       </entry>
       <entry>
        <para>
         Defines if a host entered in <filename>/etc/hosts</filename> can
         have multiple IP addresses.
        </para>
       </entry>
      </row>
      <row>
       <entry>
        <para>
         nospoof <emphasis>on</emphasis> spoofalert
         <emphasis>on</emphasis>/<emphasis>off</emphasis>
        </para>
       </entry>
       <entry>
        <para>
         These parameters influence the name server
         <emphasis>spoofing</emphasis> but do not exert any influence on the
         network configuration.
        </para>
       </entry>
      </row>
      <row>
       <entry>
        <para>
         trim <emphasis>domainname</emphasis>
        </para>
       </entry>
       <entry>
        <para>
         The specified domain name is separated from the hostname after
         hostname resolution (as long as the hostname includes the domain
         name). This option is useful only if names from the local domain
         are in the <filename>/etc/hosts</filename> file, but should still
         be recognized with the attached domain names.
        </para>
       </entry>
      </row>
     </tbody>
    </tgroup>
   </table>
   <example id="dat.netz.etc.hostconf">
    <title><filename>/etc/host.conf</filename></title>
<screen># We have named running
order hosts bind
# Allow multiple address
multi on</screen>
   </example>
  </sect3>
  <sect3>
   <title><filename>/etc/nsswitch.conf</filename></title><indexterm>
   <primary>configuration files</primary>
   <secondary>nsswitch.conf</secondary></indexterm>
   <para>
    The introduction of the GNU C&nbsp;Library 2.0 was accompanied by the
    introduction of the <emphasis>Name Service Switch</emphasis> (NSS).
    Refer to the <systemitem>nsswitch.conf(5)</systemitem> man page and
    <emphasis>The GNU C Library Reference Manual</emphasis> for details.
    <indexterm>
    <primary>NSS</primary>
    </indexterm>
   </para>
   <para>
    The order for queries is defined in the file
    <filename>/etc/nsswitch.conf</filename>. A sample
    <filename>nsswitch.conf</filename> is shown in
    <xref linkend="dat.netz.nsswitchconf"/>. Comments are preceded by
    <literal>#</literal> signs. In this example, the entry under the
    <filename>hosts</filename> database means that a request is sent to
    <filename>/etc/hosts</filename> (<option>files</option>) via
    DNS<phrase os="sles"> (see <xref linkend="cha.dns"/>)</phrase>.
   </para>
   <example id="dat.netz.nsswitchconf">
    <title><filename>/etc/nsswitch.conf</filename></title>
<screen>passwd:     compat
group:      compat

hosts:      files dns
networks:   files dns

services:   db files
protocols:  db files
rpc:        files
ethers:     files
netmasks:   files
netgroup:   files nis
publickey:  files

bootparams: files
automount:  files nis
aliases:    files nis
shadow:     compat
</screen>
   </example>
   <para>
    The <quote>databases</quote> available over NSS are listed in
    <xref linkend="tab.netz.nnswitch.db"/>. <indexterm>
    <primary>NSS</primary>
    <secondary>databases</secondary>
    </indexterm> The configuration options for NSS databases are listed in
    <xref linkend="tab.netz.nnswitch.conf"/>.
   </para>
   <table id="tab.netz.nnswitch.db">
    <title>Databases Available via /etc/nsswitch.conf</title>
    <tgroup cols="2" align="left">
     <tbody>
      <row>
       <entry>
        <para>
         <option>aliases</option>
        </para>
       </entry>
       <entry>
        <para>
         Mail aliases implemented by <filename>sendmail</filename>; see
         <command>man</command>&nbsp;<option>5 aliases</option>.
        </para>
       </entry>
      </row>
      <row>
       <entry>
        <para>
         <option>ethers</option>
        </para>
       </entry>
       <entry>
        <para>
         Ethernet addresses.
        </para>
       </entry>
      </row>
      <row>
       <entry>
        <para>
         <option>netmasks</option>
        </para>
       </entry>
       <entry>
        <para>
         List of network and their subnet masks. Only needed, if you use
         subnetting.
        </para>
       </entry>
      </row>
      <row>
       <entry>
        <para>
         <option>group</option>
        </para>
       </entry>
       <entry>
        <para>
         For user groups used by <filename>getgrent</filename>. See also the
         man page for <command>group</command>.
        </para>
       </entry>
      </row>
      <row>
       <entry>
        <para>
         <option>hosts</option>
        </para>
       </entry>
       <entry>
        <para>
         For hostnames and IP addresses, used by
         <filename>gethostbyname</filename> and similar functions.
        </para>
       </entry>
      </row>
      <row>
       <entry>
        <para>
         <option>netgroup</option>
        </para>
       </entry>
       <entry>
        <para>
         Valid host and user lists in the network for the purpose of
         controlling access permissions; see the
         <systemitem>netgroup(5)</systemitem> man page.
        </para>
       </entry>
      </row>
      <row>
       <entry>
        <para>
         <option>networks</option>
        </para>
       </entry>
       <entry>
        <para>
         Network names and addresses, used by
         <filename>getnetent</filename>.
        </para>
       </entry>
      </row>
      <row>
       <entry>
        <para>
         <option>publickey</option>
        </para>
       </entry>
       <entry>
        <para>
         Public and secret keys for Secure_RPC used by NFS and NIS+..
        </para>
       </entry>
      </row>
      <row>
       <entry>
        <para>
         <option>passwd</option>
        </para>
       </entry>
       <entry>
        <para>
         User passwords, used by <filename>getpwent</filename>; see the
         <systemitem>passwd(5)</systemitem> man page.
        </para>
       </entry>
      </row>
      <row>
       <entry>
        <para>
         <option>protocols</option>
        </para>
       </entry>
       <entry>
        <para>
         Network protocols, used by <filename>getprotoent</filename>; see
         the <systemitem>protocols(5)</systemitem> man page.
        </para>
       </entry>
      </row>
      <row>
       <entry>
        <para>
         <option>rpc</option>
        </para>
       </entry>
       <entry>
        <para>
         Remote procedure call names and addresses, used by
         <filename>getrpcbyname</filename> and similar functions.
        </para>
       </entry>
      </row>
      <row>
       <entry>
        <para>
         <option>services</option>
        </para>
       </entry>
       <entry>
        <para>
         Network services, used by <filename>getservent</filename>.
        </para>
       </entry>
      </row>
      <row>
       <entry>
        <para>
         <option>shadow</option>
        </para>
       </entry>
       <entry>
        <para>
         Shadow passwords of users, used by <filename>getspnam</filename>;
         see the <option>shadow(5)</option> man page.
        </para>
       </entry>
      </row>
<!--
          automount:  files nis
          aliases:    files nis
      -->
     </tbody>
    </tgroup>
   </table>
   <table id="tab.netz.nnswitch.conf">
    <title>Configuration Options for NSS <quote>Databases</quote></title>
    <tgroup cols="2" align="left">
     <tbody>
      <row>
       <entry>
        <para>
         <option>files</option>
        </para>
       </entry>
       <entry>
        <para>
         directly access files, for example,
         <filename>/etc/aliases</filename>
        </para>
       </entry>
      </row>
      <row>
       <entry>
        <para>
         <option>db</option>
        </para>
       </entry>
       <entry>
        <para>
         access via a database
        </para>
       </entry>
      </row>
      <row>
       <entry>
        <para>
         <option>nis</option>, <option>nisplus</option>
        </para>
       </entry>
       <entry>
        <para>
         NIS, see also <xref linkend="cha.nis"/>
        </para>
       </entry>
      </row>
      <row>
       <entry>
        <para>
         <option>dns</option>
        </para>
       </entry>
       <entry>
        <para>
         can only be used as an extension for <option>hosts</option> and
         <option>networks</option>
        </para>
       </entry>
      </row>
      <row>
       <entry>
        <para>
         <option>compat</option>
        </para>
       </entry>
       <entry>
        <para>
         can only be used as an extension for <option>passwd</option>,
         <option>shadow</option> and <option>group</option>
        </para>
       </entry>
      </row>
     </tbody>
    </tgroup>
   </table>
  </sect3>
  <sect3>
   <title><filename>/etc/nscd.conf</filename></title><indexterm>
   <primary>configuration files</primary>
   <secondary>nscd.conf</secondary></indexterm>
   <para>
    This file is used to configure nscd (name service cache daemon). See the
    <systemitem>nscd(8)</systemitem> and
    <systemitem>nscd.conf(5)</systemitem> man pages. By default, the system
    entries of <option>passwd</option> and <option>groups</option> are
    cached by nscd. This is important for the performance of directory
    services, like NIS and LDAP, because otherwise the network connection
    needs to be used for every access to names or groups.
    <option>hosts</option> is not cached by default, because the mechanism
    in nscd to cache hosts makes the local system unable to trust forward
    and reverse lookup checks. Instead of asking nscd to cache names, set up
    a caching DNS server.
   </para>
   <para>
    If the caching for <option>passwd</option> is activated, it usually
    takes about fifteen seconds until a newly added local user is
    recognized. Reduce this waiting time by restarting nscd with the command
    <command>rcnscd</command>&nbsp;<option>restart</option>.
   </para>
  </sect3>
  <sect3>
   <title><filename>/etc/HOSTNAME </filename></title><indexterm>
   <primary>configuration files</primary>
   <secondary>HOSTNAME</secondary></indexterm>
   <para>
    This contains the fully qualified hostname with the domain name
    attached. This file is read by several scripts while the machine is
    booting. It must contain only one line (in which the hostname is set).
   </para><indexterm class="endofrange"
    startref="idx.networks_configuration_files"/>
  </sect3>
 </sect2>

 <sect2 id="sec.basicnet.manconf.testing">
  <title>Testing the Configuration</title>
  <para>
   Before you write your configuration to the configuration files, you can
   test it. To set up a test configuration, use the <command>ip</command>
   command. To test the connection, use the <command>ping</command> command.
   Older configuration tools, <command>ifconfig</command> and
   <command>route</command>, are also available.
  </para>
  <para>
   The commands <command>ip</command>, <command>ifconfig</command> and
   <command>route</command> change the network configuration directly
   without saving it in the configuration file. Unless you enter your
   configuration in the correct configuration files, the changed network
   configuration is lost on reboot.
  </para>
  <sect3 id="sec.basicnet.manconf.ip">
   <title>Configuring a Network Interface with <command>ip</command></title><indexterm>
   <primary>commands</primary>
   <secondary>ip</secondary></indexterm>
   <remark>
From: Marius Tomaschewski mt@suse.de>
Subject: Re: Manual Network Config
To: Karl Eichwalder ke@suse.de>
Date: Mon, 24 Aug 2009 14:21:44 +0200

Das ifconfig utility ist obsolete und unterstützt nur Interface-
Namen bis 9 Zeichen, z.B. "foo012345". Die restlichen Zeichen
werden abgeschnitten und nicht angezeigt.
Das "ip" utility unterstützt hingegen die derzeit volle Länge von
15 Zeichen, z.B. "foo012345678901".

Statt "ifconfig" sollte "ip addr" und "ip link" verwendet werden,
um routing zu konfigurieren, sollte nicht "route", sondern "ip route"
verwendendet werden.

...

IMO besser wäre es die Beispiel-Ausgaben von route und ifconfig zu
entfernen und stattdessen Beispiel-Ausgaben von:

"ip link show", "ip addr show",
"ip -4 route show", "ip -6 route show"
(und ggf. auch "ip rule show")

im "Configuring a Network Interface with ip" zu bringen. Eventuell
mit ein Paar Beispielen als eine Art Kurzanleitung, in etwa:

ip link set up dev eth0

ip addr add 192.168.0.100/24 dev eth0
ip addr add 2001:DB8:cafe::dead/64 dev eth0

ip route add 192.168.1.0/24 via 192.168.0.200 dev eth0
ip route add 2001:DB8:cafe:1::/64 via 2001:DB8:cafe::feed dev eth0

ip route add default via 192.168.0.254 dev eth0
ip route add default via 2001:DB8:cafe::beef dev eth0

ip addr show dev eth0
ip -4 route show # dev eth0
ip -6 route show # dev eth0

ip route del 192.168.1.0/24 via 192.168.0.200 dev eth0
ip route del 2001:DB8:cafe:1::/64 via 2001:DB8:cafe::feed dev eth0

ip route del default via 192.168.0.254 dev eth0
ip route del default via 2001:DB8:cafe::beef dev eth0

ip addr del 192.168.0.100/24 dev eth0
ip addr del 2001:DB8:cafe::dead/64 dev eth0

ip link set down dev eth0
</remark>
   <para>
    <command>ip</command> is a tool to show and configure network devices,
    routing, policy routing, and tunnels.
   </para>
   <para>
    <command>ip</command> is a very complex tool. Its common syntax is
    <command>ip</command>&nbsp;<option><replaceable>options</replaceable>
    <replaceable>object</replaceable>
    <replaceable>command</replaceable></option>. You can work with the
    following objects:
   </para>
   <variablelist>
    <varlistentry>
     <term>link</term>
     <listitem>
      <para>
       This object represents a network device.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>address</term>
     <listitem>
      <para>
       This object represents the IP address of device.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>neighbor</term>
     <listitem>
      <para>
       This object represents a ARP or NDISC cache entry.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>route</term>
     <listitem>
      <para>
       This object represents the routing table entry.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>rule</term>
     <listitem>
      <para>
       This object represents a rule in the routing policy database.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>maddress</term>
     <listitem>
      <para>
       This object represents a multicast address.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>mroute</term>
     <listitem>
      <para>
       This object represents a multicast routing cache entry.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>tunnel</term>
     <listitem>
      <para>
       This object represents a tunnel over IP.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
   <para>
    If no command is given, the default command is used (usually
    <command>list</command>).
   </para>
   <para>
    Change the state of a device with the command <command>ip link
    set</command>&nbsp;<option><replaceable>device_name</replaceable></option>&nbsp;<command><replaceable>command</replaceable></command>.
    For example, to deactivate device eth0, enter <command>ip link
    set</command> <option>eth0 down</option>. To activate it again, use
    <command>ip link set</command> <option>eth0 up</option>.
   </para>
   <para>
    After activating a device, you can configure it. To set the IP address,
    use <command>ip addr
    add</command>&nbsp;<option><replaceable>ip_address</replaceable> + dev
    <replaceable>device_name</replaceable></option>. For example, to set the
    address of the interface eth0 to 192.168.12.154/30 with standard
    broadcast (option <option>brd</option>), enter <command>ip
    addr</command>&nbsp;<option>add 192.168.12.154/30 brd + dev
    eth0</option>.
   </para>
   <para>
    To have a working connection, you must also configure the default
    gateway. To set a gateway for your system, enter <command>ip route
    add</command>&nbsp;<option>gateway_ip_address</option>. To translate one
    IP address to another, use <command>nat</command>: <command>ip route add
    nat</command>&nbsp;<option>ip_address</option>&nbsp;<command>via</command>&nbsp;<option>other_ip_address</option>.
   </para>
   <para>
    To display all devices, use <command>ip link ls</command>. To display
    the running interfaces only, use <command>ip link ls up</command>. To
    print interface statistics for a device, enter <command>ip -s link
    ls</command>&nbsp;<option>device_name</option>. To view addresses of
    your devices, enter <command>ip addr</command>. In the output of the
    <command>ip addr</command>, also find information about MAC addresses of
    your devices. To show all routes, use <command>ip route show</command>.
   </para>
   <para>
    For more information about using <command>ip</command>, enter
    <command>ip</command>&nbsp;<option>help</option> or see the
    <systemitem>ip(8)</systemitem> man page. The <option>help</option>
    option is also available for all <command>ip</command> subcommands. If,
    for example, you need help for
    <command>ip</command>&nbsp;<option>addr</option>, enter
    <command>ip</command>&nbsp;<option>addr help</option>. Find the
    <command>ip</command> manual in
    <filename>/usr/share/doc/packages/iproute2/ip-cref.pdf</filename>.
   </para>
  </sect3>
  <sect3 id="sec.basicnet.manconf.testingping">
   <title>Testing a Connection with ping</title><indexterm>
   <primary>commands</primary>
   <secondary>ping</secondary></indexterm><indexterm>
   <primary>ping</primary></indexterm>
   <para>
    The <command>ping</command> command is the standard tool for testing
    whether a TCP/IP connection works. It uses the ICMP protocol to send a
    small data packet, ECHO_REQUEST datagram, to the destination host,
    requesting an immediate reply. If this works, <command>ping</command>
    displays a message to that effect, which indicates that the network link
    is basically functioning.
   </para>
   <para>
    <command>ping</command> does more than only test the function of the
    connection between two computers: it also provides some basic
    information about the quality of the connection. In
    <xref
     linkend="ex.basicnet.manconf.ping"/>, you can see an example
    of the <command>ping</command> output. The second-to-last line contains
    information about the number of transmitted packets, packet loss, and
    total time of <command>ping</command> running.
   </para>
   <para>
    As the destination, you can use a hostname or IP address, for example,
    <command>ping</command>&nbsp;<option>&exampledomain;</option> or
    <command>ping</command>&nbsp;<option>&wwwip;</option>. The program sends
    packets until you press
    <keycombo><keycap>Ctrl</keycap><keycap>C</keycap></keycombo>.
   </para>
   <para>
    If you only need to check the functionality of the connection, you can
    limit the number of the packets with the <option>-c</option> option. For
    example to limit ping to three packets, enter
    <command>ping</command>&nbsp;<option>-c 3 &exampledomain;</option>.
   </para>
   <example id="ex.basicnet.manconf.ping">
    <title>Output of the Command ping</title>
<screen>ping -c 3 &exampledomain;
PING &exampledomain; (&wwwip;) 56(84) bytes of data.
64 bytes from &exampledomain; (&wwwip;): icmp_seq=1 ttl=49 time=188 ms
64 bytes from &exampledomain; (&wwwip;): icmp_seq=2 ttl=49 time=184 ms
64 bytes from &exampledomain; (&wwwip;): icmp_seq=3 ttl=49 time=183 ms
--- &exampledomain; ping statistics ---
3 packets transmitted, 3 received, 0% packet loss, time 2007ms
rtt min/avg/max/mdev = 183.417/185.447/188.259/2.052 ms</screen>
   </example>
   <para>
    The default interval between two packets is one second. To change the
    interval, ping provides the option <option>-i</option>. For example, to
    increase the ping interval to ten seconds, enter
    <command>ping</command>&nbsp;<option>-i 10 &exampledomain;</option>.
   </para>
   <para>
    In a system with multiple network devices, it is sometimes useful to
    send the ping through a specific interface address. To do so, use the
    <option>-I</option> option with the name of the selected device, for
    example, <command>ping</command>&nbsp;<option>-I wlan1
    &exampledomain;</option>.
   </para>
   <para>
    For more options and information about using ping, enter
    <command>ping</command>&nbsp;<option>-h</option> or see the
    <systemitem>ping (8)</systemitem> man page.
   </para>
   <tip>
    <title>Pinging IPv6 Addresses</title>
    <para>
     For IPv6 addresses use the <command>ping6</command> command. Note, to
     ping link-local addresses, you must specify the interface with
     <option>-I</option>. The following command works, if the address is
     reachable via <literal>eth1</literal>:
    </para>
<screen>ping6 -I eth1 fe80::117:21ff:feda:a425</screen>
   </tip>
  </sect3>
  <sect3 id="sec.basicnet.manconf.testingifconfig">
   <title>Configuring the Network with ifconfig</title><indexterm>
   <primary>commands</primary>
   <secondary>ifconfig</secondary></indexterm>
   <para>
    <command>ifconfig</command> is a network configuration tool.
   </para>
   <note>
    <title><command>ifconfig</command> and <command>ip</command></title>
    <para>
     The <command>ifconfig</command> tool is obsolete. Use
     <command>ip</command> instead. In contrast to <command>ip</command>,
     you can use <command>ifconfig</command> only for interface
     configuration. It limits interface names to 9 characters.
    </para>
   </note>
   <para>
    Without arguments, <command>ifconfig</command> displays the status of
    the currently active interfaces. As you can see in
    <xref
     linkend="ex.basicnet.manconf.ifconfig"/>,
    <command>ifconfig</command> has very well-arranged and detailed output.
    The output also contains information about the MAC address of your
    device (the value of <option>HWaddr</option>) in the first line.
   </para>
   <example id="ex.basicnet.manconf.ifconfig">
    <title>Output of the <command>ifconfig</command> Command</title>
<screen>eth0      Link encap:Ethernet  HWaddr 00:08:74:98:ED:51
          inet6 addr: fe80::208:74ff:fe98:ed51/64 Scope:Link
          UP BROADCAST MULTICAST  MTU:1500  Metric:1
          RX packets:634735 errors:0 dropped:0 overruns:4 frame:0
          TX packets:154779 errors:0 dropped:0 overruns:0 carrier:1
          collisions:0 txqueuelen:1000
          RX bytes:162531992 (155.0 Mb)  TX bytes:49575995 (47.2 Mb)
          Interrupt:11 Base address:0xec80

lo        Link encap:Local Loopback
          inet addr:127.0.0.1  Mask:255.0.0.0
          inet6 addr: ::1/128 Scope:Host
          UP LOOPBACK RUNNING  MTU:16436  Metric:1
          RX packets:8559 errors:0 dropped:0 overruns:0 frame:0
          TX packets:8559 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:0
          RX bytes:533234 (520.7 Kb)  TX bytes:533234 (520.7 Kb)    

wlan1     Link encap:Ethernet  HWaddr 00:0E:2E:52:3B:1D
          inet addr:192.168.2.4  Bcast:192.168.2.255  Mask:255.255.255.0
          inet6 addr: fe80::20e:2eff:fe52:3b1d/64 Scope:Link
          UP BROADCAST NOTRAILERS RUNNING MULTICAST  MTU:1500  Metric:1
          RX packets:50828 errors:0 dropped:0 overruns:0 frame:0
          TX packets:43770 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:1000
          RX bytes:45978185 (43.8 Mb)  TX bytes:7526693 (7.1 MB)</screen>
   </example>
   <para>
    For more options and information about using
    <command>ifconfig</command>, enter
    <command>ifconfig</command>&nbsp;<option>-h</option> or see the
    <systemitem>ifconfig (8)</systemitem> man page.
   </para>
  </sect3>
  <sect3>
   <title>Configuring Routing with <command>route</command></title><indexterm>
   <primary>commands</primary>
   <secondary>route</secondary></indexterm>
   <para>
    <command>route</command> is a program for manipulating the IP routing
    table. You can use it to view your routing configuration and to add or
    remove routes.
   </para>
   <note>
    <title><command>route</command> and <command>ip</command></title>
    <para>
     The program <command>route</command> is obsolete. Use
     <command>ip</command> instead.
    </para>
   </note>
   <para>
    <command>route</command> is especially useful if you need quick and
    comprehensible information about your routing configuration to determine
    problems with routing. To view your current routing configuration, enter
    <command>route</command> <option>-n</option> as &rootuser;.
   </para>
   <example id="ex.basicnet.manconf.route">
    <title>Output of the <command>route <option>-n</option></command> Command</title>
<screen><?dbsuse-fo font-size="7pt"?>route -n
Kernel IP routing table
Destination     Gateway         Genmask         Flags   MSS Window  irtt Iface
10.20.0.0       *               255.255.248.0   U         0 0          0 eth0
link-local      *               255.255.0.0     U         0 0          0 eth0
loopback        *               255.0.0.0       U         0 0          0 lo
default         styx.exam.com   0.0.0.0         UG        0 0          0 eth0</screen>
   </example>
   <para>
    For more options and information about using route, enter
    <command>route</command>&nbsp;<option>-h</option> or see the
    <systemitem>route (8)</systemitem> man page.
   </para>
  </sect3>
 </sect2>

 <sect2 id="sec.basicnet.manconf.scripts">
  <title>Start-Up Scripts</title><indexterm>
  <primary>scripts</primary>
  <secondary>init.d</secondary></indexterm>
  <para>
   Apart from the configuration files described above, there are also
   various scripts that load the network programs while the machine is
   booting. These are started as soon as the system is switched to one of
   the <emphasis>multiuser runlevels</emphasis>. Some of these scripts are
   described in <xref linkend="tab.netz.start.skripte"/>.
  </para>
  <table id="tab.netz.start.skripte">
<?dbsuse-latex tablehead="p{.4\linewidth}p{.55\linewidth}"?>
   <title>Some Start-Up Scripts for Network Programs</title>
   <tgroup cols="2" align="left">
    <tbody>
     <row>
      <entry>
       <para>
        <filename>/etc/init.d/network</filename> <indexterm>
        <primary>scripts</primary>
        <secondary>init.d</secondary>
        <tertiary>network</tertiary>
        </indexterm>
       </para>
      </entry>
      <entry>
       <para>
        This script handles the configuration of the network interfaces. If
        the <command>network</command> service was not started, no network
        interfaces are implemented.
       </para>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        <filename>/etc/init.d/xinetd</filename> <indexterm>
        <primary>scripts</primary>
        <secondary>init.d</secondary>
        <tertiary>xinetd</tertiary>
        </indexterm>
       </para>
      </entry>
      <entry>
       <para>
        Starts xinetd. xinetd can be used to make server services available
        on the system. For example, it can start vsftpd whenever an FTP
        connection is initiated.
       </para>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        <filename>/etc/init.d/rpcbind</filename> <indexterm>
        <primary>scripts</primary>
        <secondary>init.d</secondary>
        <tertiary>rpcbind</tertiary>
        </indexterm>
       </para>
      </entry>
      <entry>
       <para>
        Starts the rpcbind utility that converts RPC program numbers to
        universal addresses. It is needed for RPC services, such as an NFS
        server.
       </para>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        <filename>/etc/init.d/nfsserver</filename> <indexterm>
        <primary>scripts</primary>
        <secondary>init.d</secondary>
        <tertiary>nfsserver</tertiary>
        </indexterm>
       </para>
      </entry>
      <entry>
       <para>
        Starts the NFS server.
       </para>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        <filename>/etc/init.d/postfix</filename> <indexterm>
        <primary>scripts</primary>
        <secondary>init.d</secondary>
        <tertiary>postfix</tertiary>
        </indexterm>
       </para>
      </entry>
      <entry>
       <para>
        Controls the postfix process.
       </para>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        <filename>/etc/init.d/ypserv</filename> <indexterm>
        <primary>scripts</primary>
        <secondary>init.d</secondary>
        <tertiary>ypserv</tertiary>
        </indexterm>
       </para>
      </entry>
      <entry>
       <para>
        Starts the NIS server.
       </para>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        <filename>/etc/init.d/ypbind</filename> <indexterm>
        <primary>scripts</primary>
        <secondary>init.d</secondary>
        <tertiary>ypbind</tertiary>
        </indexterm>
       </para>
      </entry>
      <entry>
       <para>
        Starts the NIS client.
       </para>
      </entry>
     </row>
    </tbody>
   </tgroup>
  </table><indexterm startref="idx.networks_configuring" class="endofrange"/><indexterm startref="idx.configuring_networks_manually" class="endofrange"/>
 </sect2>
</sect1>
