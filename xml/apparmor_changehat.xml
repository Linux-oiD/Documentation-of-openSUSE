<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//Novell//DTD NovDoc XML V1.0//EN" "novdocx.dtd"
[
  <!ENTITY % NOVDOC.DEACTIVATE.IDREF "INCLUDE">
  <!ENTITY % entities SYSTEM "entity-decl.ent">
  %entities;
]>
<chapter id="cha.apparmor.hat">
 <title>Profiling Your Web Applications Using ChangeHat</title>
 <para>
  A &naareg; profile represents the security policy for an individual
  program instance or process. It applies to an executable program, but if a
  portion of the program needs different access permissions than other
  portions, the program can <quote>change hats</quote> to use a different
  security context, distinctive from the access of the main program. This is
  known as a <emphasis>hat</emphasis> or <emphasis>subprofile</emphasis>.
 </para>
 <para>
  ChangeHat enables programs to change to or from a <emphasis>hat</emphasis>
  within a &naa; profile. It enables you to define security at a finer level
  than the process. This feature requires that each application be made
  <quote>ChangeHat aware</quote>, meaning that it is modified to make a
  request to the &naa; module to switch security domains at arbitrary times
  during the application execution. Two examples for ChangeHat-aware
  applications are the Apache Web server and Tomcat.
 </para>
 <para>
  A profile can have an arbitrary number of subprofiles, but there are only
  two levels: a subprofile cannot have further sub-subprofiles. A subprofile
  is written as a separate profile and named as the containing profile
  followed by the subprofile name, separated by a <literal>^</literal>.
  Subprofiles must be stored in the same file as the parent profile.
 </para>
 <para>
  Note that the security of hats is considerably weaker than that of full
  profiles. That is to say, if attackers can find just the right kind of bug
  in a program, they may be able to escape from a hat into the containing
  profile. This is because the security of hats is determined by a secret
  key handled by the containing process, and the code running in the hat
  must not have access to the key. Thus change_hat is most useful in
  conjunction with application servers, where a language interpreter (such
  as PERL, PHP, or Java) is isolating pieces of code such that they do not
  have direct access to the memory of the containing process.
 </para>
 <para>
  The rest of this chapter describes using change_hat in conjunction with
  Apache, to contain web server components run using mod_perl and mod_php.
  Similar approaches can be used with any application server by providing an
  application module similar to the mod_apparmor described next in
  <xref
   linkend="sec.apparmor.hat.config.directives"/>.
 </para>
 <note>
  <title>For More Information</title>
  <para>
   For more information, see the <command>change_hat</command> man page.
  </para>
 </note>
 <sect1 id="sec.apparmor.hat.apache" role="General">
  <title>Apache ChangeHat</title>

  <para>
   <phrase os="sles;sled">&naa; provides a <literal>mod_apparmor</literal>
   module (package
   <systemitem class="resource">apache2-mod-apparmor</systemitem>) for the
   Apache program (only included in &sls;).</phrase>
   <phrase os="osuse">&naa; provides a <literal>mod_apparmor</literal>
   module (package
   <systemitem
     class="resource">apache2-mod_apparmor</systemitem>) for
   the Apache program.</phrase> This module makes the Apache Web server
   ChangeHat aware. Install it along with Apache.
  </para>

  <para>
   When Apache is ChangeHat aware, it checks for the following customized
   &naa; security profiles in the order given for every URI request that it
   receives.
  </para>

  <itemizedlist>
   <listitem>
    <para>
     URI-specific hat. For example,
     <filename>^phpsysinfo/templates/classic/images/bar_left.gif</filename>
    </para>
   </listitem>
   <listitem>
    <para>
     <literal>DEFAULT_URI</literal>
    </para>
   </listitem>
   <listitem>
    <para>
     <literal>HANDLING_UNTRUSTED_INPUT</literal>
    </para>
   </listitem>
  </itemizedlist>

  <note>
   <title>Apache Configuration</title>
   <para>
    If you install
    <phrase os="sles;sled;slert"><systemitem class="resource"
      >apache2-mod-apparmor</systemitem></phrase><phrase os="osuse"><systemitem class="resource"
      >apache2-mod_apparmor</systemitem></phrase>,
    make sure the module gets loaded in Apache by executing the following
    command:
   </para>
<screen>a2enmod apparmor</screen>
  </note>

  <sect2 id="sec.apparmor.hat.apache.managing">
   <title>Managing ChangeHat-Aware Applications</title>
   <para>
    As with most of the &naa; tools, you can use two methods for managing
    ChangeHat, &yast; or the command line interface. Managing
    ChangeHat-aware applications from the command line is much more
    flexible, but the process is also more complicated. Both methods allow
    you to manage the hats for your application and populate them with
    profile entries.
   </para>
   <para>
    The following steps are a demonstration that adds hats to an Apache
    profile using &yast;. In the <guimenu>Add Profile Wizard</guimenu>, the
    &naa; profiling utilities prompt you to create new hats for distinct URI
    requests. Choosing to create a new hat allows you to create individual
    profiles for each URI. You can create very tight rules for each request.
   </para>
   <para>
    If the URI that is processed does not represent significant processing
    or otherwise does not represent a significant security risk, safely
    select <guimenu>Use Default Hat</guimenu> to process this URI in the
    default hat, which is the default security profile.
   </para>
   <para>
    This example creates a new hat for the URI
    <filename>phpsysinfo</filename> and its subsequent accesses. Using the
    profiling utilities, delegate what to add to this new hat. The resulting
    hat becomes a tight-security container that encompasses all the
    processing on the server that occurs when the
    <filename>phpsysinfo</filename> URI is passed to the Apache Web server.
   </para>
   <para>
    The URI runs the application phpsysinfo (refer to
    <ulink
     url="http://phpsysinfo.sourceforge.net"/> for more
    information). The
    <systemitem
     class="resource">phpsysinfo</systemitem> package is
    assumed to be installed in
    <filename>/srv/www/htdocs/phpsysinfo</filename> in a clean (new)
    installation of
    <phrase
     os="sles;sled;osuse">&productname;</phrase><phrase os="slert">&slert;</phrase>
    and &aa;.
   </para>
   <procedure>
    <step>
     <para>
      Once <systemitem class="resource">phpsysinfo</systemitem> is
      installed, you are ready to add hats to the Apache profile. From the
      &naa; GUI, select <guimenu>Add Profile Wizard</guimenu>.
     </para>
    </step>
    <step>
     <para>
      In <guimenu>Application to Profile</guimenu>, enter
      <command>httpd2-prefork</command>.
     </para>
    </step>
    <step>
     <para>
      Click <guimenu>Create Profile</guimenu>.
     </para>
     <informalfigure>
      <mediaobject>
       <textobject role="description"><phrase>Add Profile Wizard</phrase>
       </textobject>
       <imageobject role="fo">
        <imagedata format="PNG" fileref="sd_profilecreationwizard_1.png" width="75%" />
       </imageobject>
       <imageobject role="html">
        <imagedata fileref="sd_profilecreationwizard_1.png" width="40%"
	 format="PNG"/>
       </imageobject>
      </mediaobject>
     </informalfigure>
    </step>
    <step>
     <para>
      Restart Apache by entering <command>rcapache2 restart</command> in a
      terminal window.
     </para>
     <para>
      Restart any program you are profiling at this point.
     </para>
    </step>
    <step>
     <para>
      Open <filename>http://localhost/phpsysinfo/</filename> in a Web
      browser window. The browser window should display network usage and
      system information.
     </para>
     <note>
      <title>Data Caching</title>
      <para>
       To ensure that this request is processed by the server and you do not
       review cached data in your browser, refresh the page. To do this,
       click the browser <guimenu>Refresh</guimenu> button to make sure that
       Apache processes the request for the <literal>phpsysinfo</literal>
       URI.
      </para>
     </note>
    </step>
    <step>
     <para>
      Click <guimenu>Scan System Log for Entries to Add to
      Profiles</guimenu>. &naa; launches the <command>aa-logprof</command>
      tool, which scans the information learned in the previous step. It
      begins to prompt you with profile questions.
     </para>
    </step>
    <step>
     <para>
      <command>aa-logprof</command> first prompts with <guimenu>Add
      Requested Hat</guimenu> or <guimenu>Use Default Hat</guimenu> because
      it noticed that the <literal>phpsysinfo</literal> URI was accessed.
      Select <guimenu>Add Requested Hat</guimenu>.
     </para>
<!-- fs 2008-06-06: Couldn't get this screenshot for 11.0

     <informalfigure>
      <mediaobject>
       <textobject role="description"><phrase>&aa; Profile Wizard: Add
	 requested hat</phrase>
       </textobject>
       <imageobject role="fo">
        <imagedata format="PNG" fileref="sd_profilecreationwizard_3hatadduse.png" width="75%"/>
       </imageobject>
       <imageobject role="html">
        <imagedata fileref="sd_profilecreationwizard_3hatadduse.png" width="75%"
	 format="PNG"/>
       </imageobject>
      </mediaobject>
     </informalfigure>
-->
    </step>
    <step>
     <para>
      Click <guimenu>Allow</guimenu>.
     </para>
     <para>
      Choosing <guimenu>Add Requested Hat</guimenu> in the previous step
      creates a new hat in the profile and specifies that the results of
      subsequent questions about the script's actions are added to the newly
      created hat rather than the default hat for this application.
     </para>
     <para>
      In the next screen, &naa; displays an external program that the script
      executed. You can specify that the program should run confined by the
      phpsysinfo hat (choose <guimenu>Inherit</guimenu>), confined by a
      separate profile (choose <guimenu>Profile</guimenu>), or that it
      should run unconfined or without any security profile (choose
      <guimenu>Unconfined</guimenu>). For the case of the
      <guimenu>Profile</guimenu> option, a new profile is created for the
      program if one does not already exist.
     </para>
     <note>
      <title>Security Considerations</title>
      <para>
       Selecting <guimenu>Unconfined</guimenu> can create a significant
       security hole and should be done with caution.
      </para>
     </note>
     <substeps>
      <step>
       <para>
        Select <guimenu>Inherit</guimenu> for the
        <filename>/bin/bash</filename> path. This adds
        <filename>/bin/bash</filename> (accessed by Apache) to the
        phpsysinfo hat profile with the necessary permissions.
       </para>
      </step>
      <step>
       <para>
        Click <guimenu>Allow</guimenu>.
       </para>
      </step>
     </substeps>
    </step>
    <step>
     <para>
      The remaining questions prompt you to generate new hats and add
      entries to your profile and its hats. The process of adding entries to
      profiles is covered in detail in the
      <xref xrefstyle="SectTitleOnPage" linkend="sec.apparmor.yast.wizard"/>.
     </para>
     <para>
      When all profiling questions are answered, click
      <guimenu>Finish</guimenu> to save your changes and exit the wizard.
     </para>
    </step>
   </procedure>
   <para>
    The following is an example phpsysinfo hat.
   </para>
   <example id="ex.hat.apache.managing.phpsysinfo">
    <title>Example phpsysinfo Hat</title>
<screen>/usr/sbin/httpd2-prefork {
  ...
  ^phpsysinfo {
    #include &lt;abstractions/bash>
    #include &lt;abstractions/nameservice>

    /bin/basename                        ixr,
    /bin/bash                            ixr,
    /bin/df                              ixr,
    /bin/grep                            ixr,
    /bin/mount                           Ux,
    /bin/sed                             ixr,
    /dev/bus/usb/                        r,
    /dev/bus/usb/**                      r,
    /dev/null                            w,
    /dev/tty                             rw,
    /dev/urandom                         r,
    /etc/SuSE-release                    r,
    /etc/ld.so.cache                     r,
    /etc/lsb-release                     r,
    /etc/lsb-release.d/                  r,
    /lib/ld-2.6.1.so                     ixr,
    /proc/**                             r,
    /sbin/lspci                          ixr,
    /srv/www/htdocs/phpsysinfo/**        r,
    /sys/bus/pci/**                      r,
    /sys/bus/scsi/devices/               r,
    /sys/devices/**                      r,
    /usr/bin/cut                         ixr,
    /usr/bin/getopt                      ixr,
    /usr/bin/head                        ixr,
    /usr/bin/lsb_release                 ixr,
    /usr/bin/lsscsi                      ixr,
    /usr/bin/tr                          ixr,
    /usr/bin/who                         ixr,
    /usr/lib/lib*so*                     mr,
    /usr/lib/locale/**                   r,
    /usr/sbin/lsusb                      ixr,
    /usr/share/locale/**                 r,
    /usr/share/pci.ids                   r,
    /usr/share/usb.ids                   r,
    /var/log/apache2/access_log          w,
    /var/run/utmp                        kr,
   }
}</screen>
   </example>
   <note>
    <title>Hat and Parent Profile Relationship</title>
    <para>
     The profile <filename>^phpsysinfo</filename> is only valid in the
     context of a process running under the parent profile
     <filename>httpd2-prefork</filename>.
    </para>
   </note>
  </sect2>

  <sect2 id="sec.apparmor.hat.apache.managing.add">
   <title>Adding Hats and Entries to Hats</title>
   <para>
    When you use the <guimenu>Edit Profile</guimenu> dialog (for
    instructions, refer to
    <xref xrefstyle="SectTitleOnPage" linkend="sec.apparmor.yast.edit"/>) or
    when you add a new profile using <guimenu>Manually Add Profile</guimenu>
    (for instructions, refer to
    <xref xrefstyle="SectTitleOnPage" linkend="sec.apparmor.yast.add"/>),
    you are given the option of adding hats (subprofiles) to your &naa;
    profiles. Add a ChangeHat subprofile from the <guimenu>&aa; Profile
    Dialog</guimenu> window as in the following.
   </para>
   <informalfigure>
    <mediaobject>
     <textobject role="description"><phrase>&aa; profile dialog</phrase>
     </textobject>
     <imageobject role="fo">
      <imagedata format="PNG" fileref="hats_in_profiles.png" width="75%"/>
     </imageobject>
     <imageobject role="html">
      <imagedata fileref="hats_in_profiles.png" width="75%" format="PNG"/>
     </imageobject>
    </mediaobject>
   </informalfigure>
   <procedure>
    <step>
     <para>
      From the <guimenu>&aa; Profile Dialog</guimenu> window, click
      <guimenu>Add Entry</guimenu> then select <guimenu>Hat</guimenu>. The
      <guimenu>Enter Hat Name</guimenu> dialog box opens:
     </para>
     <informalfigure>
      <mediaobject>
       <textobject role="description"><phrase>Enter hat name</phrase>
       </textobject>
       <imageobject role="fo">
        <imagedata format="PNG" fileref="hat_createhat.png" width="50%"/>
       </imageobject>
       <imageobject role="html">
        <imagedata fileref="hat_createhat.png" width="35%" format="PNG"/>
       </imageobject>
      </mediaobject>
     </informalfigure>
    </step>
    <step>
     <para>
      Enter the name of the hat to add to the &naa; profile. The name is the
      URI that, when accessed, receives the permissions set in the hat.
     </para>
    </step>
    <step>
     <para>
      Click <guimenu>Create Hat</guimenu>. You are returned to the
      <guimenu>&aa; Profile Dialog</guimenu> screen.
     </para>
    </step>
    <step>
     <para>
      After adding the new hat, click <guimenu>Done</guimenu>.
     </para>
    </step>
   </procedure>
   <note>
    <title>For More Information</title>
    <para>
     For an example of an &naa; profile, refer to
     <xref xrefstyle="SectTitleOnPage" linkend="ex.hat.apache.managing.phpsysinfo"/>.
    </para>
   </note>
  </sect2>
 </sect1>
 <sect1 id="sec.apparmor.hat.config" role="General">
  <title>Configuring Apache for mod_apparmor</title>

  <para>
   Apache is configured by placing directives in plain text configuration
   files. The main configuration file is usually
   <filename>httpd.conf</filename>. When you compile Apache, you can
   indicate the location of this file. Directives can be placed in any of
   these configuration files to alter the way Apache behaves. When you make
   changes to the main configuration files, you need to start or restart
   Apache, so the changes are recognized.
  </para>

  <sect2 id="sec.apparmor.hat.config.vhost">
   <title>Virtual Host Directives</title>
   <para>
    Virtual host directives control whether requests that contain trailing
    pathname information following an actual filename (or that refer to a
    nonexistent file in an existing directory) are accepted or rejected. For
    Apache documentation on virtual host directives, refer to
    <ulink
     url="http://httpd.apache.org/docs/2.2/mod/core.html#virtualhost"/>.
   </para>
   <para>
    The ChangeHat-specific configuration keyword is
    <literal>AADefaultHatName</literal>. It is used similarly to
    <literal>AAHatName</literal>, for example, <literal>AADefaultHatName
    My_Funky_Default_Hat</literal>.
   </para>
   <para>
    The configuration option is actually based on a server directive, which
    enables you to use the keyword outside of other options, setting it for
    the default server. Virtual hosts are considered internally within
    Apache to be separate <quote>servers,</quote> so you can set a default
    hat name for the default server as well as one for each virtual host, if
    desired.
   </para>
   <para>
    When a request comes in, the following steps reflect the sequence in
    which <literal>mod_apparmor</literal> attempts to apply hats.
   </para>
   <orderedlist>
    <listitem>
     <para>
      A location or directory hat as specified by the
      <literal>AAHatName</literal> keyword
     </para>
    </listitem>
    <listitem>
     <para>
      A hat named by the entire URI path
     </para>
    </listitem>
    <listitem>
     <para>
      A default server hat as specified by the
      <literal>AADefaultHatName</literal> keyword
     </para>
    </listitem>
    <listitem>
     <para>
      <literal>DEFAULT_URI</literal> (if none of those exist, it goes back
      to the <quote>parent</quote> Apache hat)
     </para>
    </listitem>
   </orderedlist>
  </sect2>

  <sect2 id="sec.apparmor.hat.config.directives">
   <title>Location and Directory Directives</title>
   <para>
    Location and directory directives specify hat names in the program
    configuration file so the program calls the hat regarding its security.
    For Apache, you can find documentation about the location and directory
    directives at
    <ulink
     url="http://httpd.apache.org/docs/2.2/sections.html"/>.
   </para>
   <para>
    The location directive example below specifies that, for a given
    location, <literal>mod_apparmor</literal> should use a specific hat:
   </para>
<screen>&lt;Location /foo/&gt; AAHatName MY_HAT_NAME &lt;/Location&gt;
   </screen>
   <para>
    This tries to use <literal>MY_HAT_NAME</literal> for any URI beginning
    with <filename>/foo/</filename> (<filename>/foo/</filename>,
    <filename>/foo/bar</filename>,
    <filename>/foo/cgi/path/blah_blah/blah</filename>, etc.).
   </para>
   <para>
    The directory directive works similarly to the location directive,
    except it refers to a path in the file system as in the following
    example:
   </para>
<screen>
&lt;Directory "/srv/www/www.immunix.com/docs"&gt; 
  # Note lack of trailing slash 
  AAHatName immunix.com 
&lt;/Directory&gt;</screen>
   <formalpara>
    <title>Example:</title>
    <para>
     The program phpsysinfo is used to illustrate a location directive in
     the following example. The tarball can be downloaded from
     <ulink
      url="http://phpsysinfo.sourceforge.net"/>.
    </para>
   </formalpara>
   <procedure>
    <step>
     <para>
      After downloading the tarball, install it into
      <filename>/srv/www/htdocs/phpsysinfo</filename>.
     </para>
    </step>
    <step>
     <para>
      Create <filename>/etc/apache2/conf.d/phpsysinfo.conf</filename> and
      add the following text to it:
     </para>
<screen>
&lt;Location "/phpsysinfo"&gt; 
  AAHatName phpsysinfo
&lt;/Location&gt;</screen>
     <para>
      The following hat should then work for phpsysinfo:
     </para>
<screen>/usr/sbin/httpd2-prefork {
  ...
  ^phpsysinfo {
    #include &lt;abstractions/bash>
    #include &lt;abstractions/nameservice>

    /bin/basename                        ixr,
    /bin/bash                            ixr,
    /bin/df                              ixr,
    /bin/grep                            ixr,
    /bin/mount                           Ux,
    /bin/sed                             ixr,
    /dev/bus/usb/                        r,
    /dev/bus/usb/**                      r,
    /dev/null                            w,
    /dev/tty                             rw,
    /dev/urandom                         r,
    /etc/SuSE-release                    r,
    /etc/ld.so.cache                     r,
    /etc/lsb-release                     r,
    /etc/lsb-release.d/                  r,
    /lib/ld-2.6.1.so                     ixr,
    /proc/**                             r,
    /sbin/lspci                          ixr,
    /srv/www/htdocs/phpsysinfo/**        r,
    /sys/bus/pci/**                      r,
    /sys/bus/scsi/devices/               r,
    /sys/devices/**                      r,
    /usr/bin/cut                         ixr,
    /usr/bin/getopt                      ixr,
    /usr/bin/head                        ixr,
    /usr/bin/lsb_release                 ixr,
    /usr/bin/lsscsi                      ixr,
    /usr/bin/tr                          ixr,
    /usr/bin/who                         ixr,
    /usr/lib/lib*so*                     mr,
    /usr/lib/locale/**                   r,
    /usr/sbin/lsusb                      ixr,
    /usr/share/locale/**                 r,
    /usr/share/pci.ids                   r,
    /usr/share/usb.ids                   r,
    /var/log/apache2/access_log          w,
    /var/run/utmp                        kr,
   }
}
     </screen>
    </step>
    <step>
     <para>
      Reload &naa; profiles by entering <command>rcapparmor
      restart</command> at a terminal window as &rootuser;.
     </para>
    </step>
    <step>
     <para>
      Restart Apache by entering <command>rcapache2 restart</command> at a
      terminal window as &rootuser;.
     </para>
    </step>
    <step>
     <para>
      Enter <filename>http://hostname/phpsysinfo/</filename> into a browser
      to receive the system information that phpsysinfo delivers.
     </para>
    </step>
    <step>
     <para>
      Locate configuration errors by going to
      <filename>/var/log/audit/audit.log</filename> or running
      <command>dmesg</command> and looking for any rejections in the output.
     </para>
    </step>
   </procedure>
  </sect2>
 </sect1>
</chapter>
