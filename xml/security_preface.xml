<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//Novell//DTD NovDoc XML V1.0//EN" "novdocx.dtd"
[
  <!ENTITY % NOVDOC.DEACTIVATE.IDREF "INCLUDE">
  <!ENTITY % entities SYSTEM "entity-decl.ent">
  %entities;
]>
<chapter id="cha.security">
 <title>Безопасность и конфиденциальность</title><indexterm class="startofrange" id="idx.security">
 <primary>security</primary></indexterm>
 <para>
  Одной из главных характеристик UNIX/Linux систем является возможность обслуживать
  несколько пользователей (многопользовательские системы), а так же предоставлять
  им возможность выполнять несколько задач одновременно (многозадачность).
  Более того, операционная система прозрачна для сети. Пользователи часто даже не
  знают находятся ли данные или программы, которые они используют,
  локально или доступны через сеть.
 </para>
 <para>
  Так как системы многопользовательские, данные разных пользователей должны
  храниться раздельно, а так же должна быть обеспечена их безопасность и приватность.
  Безопасность данных всегда была важной проблемой, и даже до того, как появилась
  возможность объединять компьютеры через сеть. На много большее беспокойство вызывает
  несанкционированный доступ к информации, нежели ее потеря или даже поломка
  носителя информации (например жесткого диска).
 </para>
 <para>
  Этот раздел фокусируется на проблемах конфиденциальности и на способах защиты
  личных пользовательских данных. Концепция безопасности включает в себя
  регулярно обновляемую, рабочую и проверяемую резервную копию, хранящуюся в безопасном
  месте. Без этих мер Вам придется потратить много времени, возвращая информацию&mdash;
  притом не только в случае поломки или дефекта носителя, но и в случае
  несанкционированного доступа.
 </para>
<?dbfo-need height="20em"?>
 <sect1 id="sec.security.general.overview">
  <title>Локальная и сетевая безопасность</title>

  <para>
   Возможны несколько способов доступа к данным:
  </para>

  <itemizedlist>
   <listitem>
    <para>
     личное общение с людьми, имеющим нужную информацию или доступ к данным на компьютере
    </para>
   </listitem>
   <listitem>
    <para>
     напрямую, путем физического доступа к терминалу
    </para>
   </listitem>
   <listitem>
    <para>
     через последовательный интерфейс
    </para>
   </listitem>
   <listitem>
    <para>
     используя сетевое соединение
    </para>
   </listitem>
  </itemizedlist>

  <para>
   В каждом из этих способов пользователь должен пройти проверку подлинности 
   перед тем, как получит доступ к ресурсам или данным о которых идет речь.
   При этом веб сервер может накладывать меньше ограничений, но в любом случае
   Вы вряд ли захотите давать анонимному пользователю доступ к своим личным данным. 
  </para><indexterm>

  <primary>безопасность</primary>

  <secondary>инженерия</secondary></indexterm>

  <para>
   В приведенном выше списке самый первый способ использует наибольшее 
   количество межличностного взаимодействия (например, когда Вы связываетесь с
   сотрудником банка, Вам требуется подтвердить, что Вы являетесь владельцем счета).
   Для этого Вас просят предоставить подпись, ПИН-код или пароль, чтобы 
   удостовериться, что Вы тот, за кого себя выдаете. В некоторых случаях простого
   упоминания уже известных Вам фрагментов и кусочков информации достаточно, чтобы 
   расположить к себе осведомленного человека и выведать ее полностью.
   Ничего не подозревающую жертву можно подвести постепенному раскрытию все больших
   объемов информации. Среди хакеров это называется <emphasis>социальной инженерией</emphasis>.
   Единственной защитой от этого является подготовка людей и осознанное распределение 
   информации.
   Перед взломом компьютерной системы атакующие часто пытаются использовать секретарей,
   обслуживающий персонал компании или даже членов семей ее сотрудников.
   Во многих случаях о такой основанной на социальной инженерии атаке становится известно 
   гораздо позже.
  </para><indexterm>

  <primary>безопасность</primary>

  <secondary>загрузка</secondary></indexterm><indexterm>

  <primary>безопасность</primary>

  <secondary>устройства последовательного доступа</secondary></indexterm>

  <para>
   Человек, желающий получить несанкционированный доступ к Вашим данным, может 
   также попытаться использовать традиционный способ прямого доступа к Вашему 
   компьютеру. Из этого следует, что система должна быть защищена от любых манипуляций, 
   и никто не мог удалить, изменить или повредить ее компоненты. Это относится и к 
   резервным копиям, и даже к сетевым кабелям и кабелям питания. Также необходимо 
   обезопасить этап загрузки, поскольку существует несколько широко распространенных
   клавиатурных комбинаций, способных вызвать нестандарное поведение. Защитите себя от этого,
   установив пароли на BIOS и системный загрузчик.
   <indexterm>
   <primary>безопасность</primary>
   <secondary>загрузка</secondary>
   </indexterm>
  </para>

  <para>
   <indexterm>
   <primary>безопасность</primary>
   <secondary>устройства последовательного доступа</secondary>
   </indexterm> 
   Устройства, подключаемые к последовательным портам повсеместно используются 
   до сих пор. В отличие от сетевых интерфейсов, они не используют сетевых протоколов для 
   взаимодействия с системой, к которой подключены. Для обмена данными
   между устройствами используется обычный кабель или инфракрасный порт, по 
   которому в обе стороны передаются обычные символы. 
   Кабель является самым слабым звеном такой системы: передаваемые по нему данные
   могут быть перехвачены путем подключения к этому кабелю обычного старого принтера. 
   Кроме принтера для перехвата можно использовать все что угодно, в зависимости от
   технической оснащённости атакующего.
  </para>

  <para>
   Чтение локального файла требует дополнительных правил доступа в сравнении с 
   открытием сетевого подключения к другому компьютеру. Существует четкое разграничение
   между локальной и сетевой безопасностью и черта проходит там, где данные
   инкапсулируются в пакеты для отправки куда-либо.
  </para>

  <sect2 id="sec.security.general.overview.local">
   <title>Локальная безопасность</title><indexterm id="idx.security_local" class="startofrange">
   <primary>безопасность</primary>
   <secondary>локальная</secondary></indexterm>
   <para>
    Локальная безопасность начинается с физического окружения того места, где
    установлен Ваш компьютер. Устанавливайте свою машину в  месте, безопасность
    которого соответствует Вашим потребностям и ожиданиям. Главная задача локальной
    безопасности - разделение пользователей таким образом, чтобы ни один из них не 
    смог использовать привилегии или идентификационные данные другого. Это
    наиболее общее правило, которое необходимо соблюдать, и оно особенно 
    касается пользователя <systemitem class="username">root</systemitem>, 
    обладающего привилегиями системного администратора.
    <systemitem class="username">root</systemitem>  может работать от имени
    любого другого локального пользователя не вводя его пароля и читать любые локальные файлы.
   </para>
   <sect3 id="sec.security.general.overview.local.passwords">
    <title>Пароли</title><indexterm id="idx.security_passwords" class="startofrange">
    <primary>безопасность</primary>
    <secondary>пароли</secondary></indexterm>
    <para>
     Linux-система не хранит пароли в текстовом виде, используя для их валидации
     простое сравнение введенного текста с сохраненным образцом.
     Если бы это было так, то все аккаунты системы были бы под угрозой при получении
     кем-либо доступа к соответствующему файлу. Именно поэтому все сохраненные 
     пароли зашифрованы, перед сравнением введенный текст также шифруется, после 
     чего сравниваются две зашифрованных строки. Этот метод будет более безопасным
     только в том случае, если зашифрованный пароль не может быть восстановлен 
     в оригинальную текстовую строку.
    </para>
    <para>
     Это достигается при помощи алгоритма особого рода, так же называемого
     <emphasis>алгоритмом с потайным ходом</emphasis>, поскольку он работает 
     только в одном направлении. Злоумышленник, заполучив Ваш пароль в зашифрованном виде,
     не сможет восстановить его используя этот алгоритм повторно.
     Вместо этого ему придется перебирать все возможные комбинации символов до тех
     пор, пока он не получит комбинацию, которая после шифрования совпадет с 
     зашифрованным паролем. При длине пароля в восемь символов ему прийдется 
     перебрать значительное количество таких комбинаций.
    </para>
    <para>
     В семидесятых годах прошлого века утверждалось, что данный метод безопаснее
     других, поскольку алгоритм работал довольно медленно и на шифрование одного 
     пароля требовалось несколько секунд. Однако в настоящее время компьютеры стали
     достаточно мощными для шифрования сотен тысяч или даже миллионов паролей 
     в секунду. Поэтому даже зашифрованные пароли не должны быть доступны обычному
     пользователю (обычные пользователи не должны иметь доступа к файлу 
     <filename>/etc/shadow</filename>). Еще более важным является невозможность
     угадать пароль в случае, если файл паролей доступен по ошибке.
     Следовательно, <quote>перевод</quote> пароля вида <quote>tantalize</quote> в 
     <quote>t@nt@1lz3</quote> не повышает уровеня безопасности.
    </para>
    <para>
     Замены нескольких букв в слове похожими на них цифрами (наподобие
     записи <quote>tantalize</quote> как <quote>t@nt@1lz3</quote>) недостаточно.
     Программы, использующие словари для взлома паролей, также могут производить
     такие замены. Гораздо лучший способ - составить слово не имеющее смысла ни для кого,
     кроме Вас лично, например из первых букв предложения или названия книги.
     Возьмем к примеру фразу о книге <quote>Имя Розы</quote> Умберто Эко - 
     <quote>The Name of the Rose</quote> by Umberto Eco. В результате получится
     следующий безопасный пароль: <quote>TNotRbUE9</quote>. Напротив, 
     пароли наподобие <quote>beerbuddy</quote> или <quote>jasmine76</quote> 
     могут быть легко подобраны кем-либо, кто знает Вас хоть немного.
    </para><indexterm class="endofrange" startref="idx.security_passwords"/>
   </sect3>
   <sect3 id="sec.security.general.overview.local.boot">
    <title>Процесс загрузки</title><indexterm id="idx.security_booting" class="startofrange">
    <primary>безопасность</primary>
    <secondary>загрузка</secondary></indexterm>
    <para>
     Настройте свою систему так, чтобы ее нельзя было загрузить с 
     дискеты или компакт-диска - либо физически удалив эти устройства,
     либо разрешив в BIOS загрузку только с жесткого диска и установив пароль на BIOS.
     Linux-системы обычно запускаются при помощи системного загрузчика, позволяющего
     передать дополнительные параметры загружаемому ядру. Заблокируйте эту
     возможность для посторонних, установив дополнительный пароль в файле 
     <filename>/boot/grub/menu.lst</filename> (  <xref linkend="cha.grub"/>). 
     Это необходимо для безопасности вашей системы: поскольку ядро стартует с привилегиями 
     <systemitem class="username">root</systemitem>, существует возможность получить 
     привилегии <systemitem class="username">root</systemitem>  при старте системы.
    </para><indexterm class="endofrange" startref="idx.security_booting"/>
   </sect3>
   <sect3 id="sec.security.general.overview.local.permissions">
    <title>Права доступа к файлам</title><indexterm id="idx.security_permissions" class="startofrange">
    <primary>безопасность</primary>
    <secondary>права доступа</secondary></indexterm>
    <para>
     Основным правилом является установка максимально строгих привилегий достаточных для
     выполнения конкретной задачи. Например, нет никакой необходимости использовать
     пользователя <systemitem class="username">root</systemitem> для чтения и отправки
     электронной почты. Любой баг почтовой программы можно использовать для атаки, 
     которая будет произведена с правами доступа этой программы.
     Изложенное выше правило сводит к минимуму потенциальный урон, нанесенный системе
     подобной атакой.
    </para>
    <para>
     Права доступа ко всем файлам входящим в состав дистрибутива &productname; 
     были выбраны очень тщательно. При установке дополнительного программного обеспечения или 
     других файлов системный администратор должен быть очень внимателен, особенно 
     при установке битов доступа. Опытные системные администраторы уделяющие внимание
     безопасности системы, всегда используют опцию <option>-l</option> команды <command>ls</command>
     для получения дополнительной информации о файлах и обнаружении неверно 
     заданных привилегий. Неправильно установленные биты доступа не просто позволяют
     изменять или удалять файлы. Модифицированные файлы могут быть выполнены пользователем
     <systemitem class="username">root</systemitem> или,
     если это конфигурационные файлы, программа может использовать эти файлы с 
     привилегиями <systemitem class="username">root</systemitem>, что 
     значительно увеличивает уязвимость системы. Подобные атаки носят название "кукушкино яйцо",
     поскольку программа (яйцо) выполняется (появляется на свет из скорлупы) у другого пользователя
     (птицы), в точности как кукушка дурачит остальных птиц, подбрасывая им свои яйца.
    </para>
    <para>
     Система &productnamereg; включает в себя файлы
     <filename>permissions</filename>,
     <filename>permissions.easy</filename>,
     <filename>permissions.secure</filename> и
     <filename>permissions.paranoid</filename>, расположенные в директории
     <filename>/etc</filename>. Эти файлы нужны для задания особых привилегий, 
     таких как разрешение всем пользователям изменять директории и установка бита setuser ID 
     (программы с битом setuser ID запускаются не с привилегиями пользователя, а с привилегиями 
     владельца данной программы, в большинсте случаев им является <systemitem class="username">root</systemitem>).
     Администратор системы может использовать файл <filename>/etc/permissions.local</filename> для 
     установки собственных настроек.
    </para>
    <para>
     Чтобы задать какие из вышеперечисленных файлов используются программами конфигурации &productname;
     для установки битов доступа, выберите пункт <guimenu>Локальная безопасность</guimenu> в секции
     <guimenu>Безопасность и пользователи</guimenu> &yast;. Для получения дополнительной информации 
     обратитесь к комментариям <filename>/etc/permissions</filename> или справочному руководству по команде
     <command>chmod</command>
     (<command>man</command>&nbsp;<option>chmod</option>).
    </para><indexterm class="endofrange" startref="idx.security_permissions"/>
   </sect3>
   <sect3 id="sec.security.general.overview.local.bugs">
    <title>Баги переполнения буффера и строки формата</title><indexterm>
    <primary>безопасность</primary>
    <secondary>баги</secondary></indexterm>
    <para>
     Следует быть особенно осторожным в случае, если программе необходимо
     обрабатывать данные, доступные пользователю для изменения.
     Это правило адресовано в первую очередь разработчику программы, а
     не рядовым пользователям. Разработчик должен быть уверен, что его
     приложение корректно обрабатывает данные и не пытается их сохранить в участки
     памяти недостаточного размера. Помимо этого, приложение должно обрабатывать данные
     последовательным образом, используя определенные для этих целей интерфейсы.
    </para>
    <para>
     <emphasis>Переполнение буффера</emphasis> может произойти, если реальный размер буффера
     памяти не учитывается при записи в буффер. Возможна ситуация, когда эти данные
     (созданные пользователем) используют требуют больше памяти, чем ее доступно в
     буффере. В результате при некоторых обстоятельствах вместо обычной обработки 
     введенных пользователем данных их часть, записанная за пределы буффера,
     может быть выполнена. Это мжет быть использовано для выполнения кода заданного
     пользователем, а не программистом. Подобный баг может иметь очень серьезные последствия, 
     особенно при выполнении программ с особыми правами доступа (см
     <xref linkend="sec.security.general.overview.local.permissions"/>).
    </para>
    <para>
     <emphasis>Баги формата строки</emphasis> немного отличаются, но
     суть их по-прежнему в том, что ввод пользователя способен ввести программу в 
     заблуждение. В большинстве случаев эти ошибки могут быть использованы 
     для программ, обладающими особыми привилегиями &mdash;setuid и setgid
     &mdash; таким образом, для защиты системы и данных Вы можете отменить
     соответствующие привилегии для программ. Повторимся, политика предоставления
     наименьших возможных привилегий является наилучшей (см.
     <xref linkend="sec.security.general.overview.local.permissions"/>).
    </para>
    <para>
     Поскольку баги переполнения буффера и строки формата относятся к 
     обработке пользовательских данных, они могут быть использованы не только 
     пользователем, имеющим локальный доступ. Множество известных багов можно было
     воспроизвести как локально, так и по сети (например, используя особым образом 
     сформированную ссылку). Соответственно, баги строки формата и переполнения буффера
     следует классифицировать как относящиеся и к локальной и к сетевой безопасности.
    </para>
   </sect3>
   <sect3 id="sec.security.general.overview.local.virus">
    <title>Вирусы</title><indexterm>
    <primary>безопасность</primary>
    <secondary>вирусы</secondary></indexterm>
    <para>
     Вопреки распространенному мнению, существуют вирусы работающие под Linux.
     Однако, известные вирусы были написаны своими авторами в качестве
     <emphasis>доказательства концепции</emphasis>, что техника работает 
     по назначению. До настоящего времени ни один из этих вирусов не был обнаружен
     в <emphasis>дикой природе</emphasis>.
    </para>
    <para>
     Вирусы не могут существовать и распространяться без своего хозяина.
     Хозяином может быть программа или важное хранилище системы, такое как
     основная загрузочная запись, для записи в которую код вируса должен 
     иметь соответствующие привилегии. Благодаря своим многопользовательским 
     возможностям, Linux позволяет ограничить доступ на запись к пределенным файлам 
     (это особенно важно для файлов системы). таким образом, если Вы имеете привычку
     работать с привилегиями <systemitem class="username">root</systemitem>,
     вы увеличиваете шансы системы быть зараженной вирусом. И напротив, 
     следование упомянутому выше принципу наименьших возможных привилегий, 
     значительно снижает такую возможность.
    </para>
    <para>
     Кроме того, никогда не торопитесь запускать программу, скачанную с 
     первого попавшегося интернет сайта. RPM пакеты &productname;
     содержать криптографическую подпись, как знак того, что они были собраны с
     должным вниманием. Наличие вирусов является типичным признаком того,
     что администратор или пользователь не обладают достаточными знаниями о безопасности,
     поскольку им удалось подвергнуть риску систему, спроектированную с высоким 
     уровнем безопасности.
    </para>
    <para>
     Не следует путать вирусы с червями, принадлежащими исключительно к миру
     сетей. Отличие состоит в том, что червю не нужен хозяин для распространения.
    </para><indexterm class="endofrange" startref="idx.security_local"/>
   </sect3>
  </sect2>

  <sect2 id="sec.security.general.overview.network">
   <title>Сетевая безопасность</title><indexterm id="idx.security_network" class="startofrange">
   <primary>безопасность</primary>
   <secondary>сеть</secondary></indexterm>
   <para>
    Сетевая безопасность важна для защиты от атак, источник которых
    находится за пределами сети. Типичная процедура входа в систему, требующая 
    для авторизации имени пользователя и пароля, все так же является объектом
    локальной безопасности. В частном случае удаленного входа в систему
    следует отмечать два аспекта безопасности. Все, что происходит до входа в систему,
    относится к сетевой безопасности, а все, что происходит после - к локальной.
   </para>
   <sect3 id="sec.security.general.overview.network.x11">
    <title>Система X Window и авторизация в X</title><indexterm>
    <primary>безопасность</primary>
    <secondary>X</secondary></indexterm><indexterm>
    <primary>X</primary>
    <secondary>безопасность</secondary></indexterm>
    <para>
     Как упоминалось в самом начале, сетевая прозрачность - одна из центральных 
     характеристик систем семейства UNIX. X, оконная система UNIX систем,
     пользуется этой собенностью для достижения довольно внушительного эффекта.
     С помощью X абсолютно несложно подключиться к удаленному компьютеру и 
     запустить программу с графическим интерфейсом, которая затем будет отправлена
     по сети и отображена на Вашем компьютере.
    </para>
    <para>
     Когда клиент X требуется отобразить удаленно используя X сервер, 
     последний должен защищать свои ресурсы (экран) от несанкционированного
     доступа. Точнее,клиентская программа должна обладать строго заданными
     правами доступа. С помощью системы X Window это может быть реализовано 
     двумя способами: доступ, основанный на хосте или доступ, основанный на 
     cookie. Первый полагается на IP адрес хоста, где запущена клиентская программа.
     Для управления им используется программа xhost. xhost
     сохраняет IP адреса имеющих доступ клиентов,  в базу данных X сервера.
     Однако полагаться на IP адреса для авторизаации не слишком безопасно.
     К примеру, если на клиентском компьютере работает еще один пользователь,
     то он также получит доступ к X серверу &mdash; точно также, как любой, кто присвоит
     себе IP этого компьютера. Вследствие изложенных выше недостатков этот метод не
     будет детально описан в данном руководстве, однако Вы можете воспользоваться
     <command>man</command>&nbsp;<option>xhost</option> для получения более подробной 
     информации.
    </para>
    <para>
     В случае управления доступом при помощи cookie, генерируется строка символов, 
     известная только X серверу и авторизованному пользователю, подобно любой
     идентификационной карте. Эта cookie сохраняется после логина в файле
     <filename>.Xauthority</filename> в домашнем каталоге пользователя и 
     доступна любому X клиенту, желающему воспользоваться X сервером
     для отображения окна. Файл <filename>.Xauthority</filename> может быть
     исследован пользователем при помощи утилиты <command>xauth</command>. Если Вы
     переименуете <filename>.Xauthority</filename>, или удалите этот файл из Вашей
     домашней директории, то больше не сможете открыть новых окон или X клиентов.
    </para>
    <para>
     SSH (безопасная оболочка) может быть использована для полного шифрования 
     сетевого соединения и прозрачной переадресации его X серверу, 
     без вмешательства пользователя в механизм шифрования.
     Также это называется X forwarding. X forwarding достигается имитацией X сервера на 
     серверной стороне и установкой переменной DISPLAY для оболочки на удаленном компьютере.
     Больше информации о SSH можно найти в главе <xref linkend="cha.ssh"/>.
    </para>
    <warning>
     <para>
      Если Вы не считаете безопасным удаленный компьютер, к которому подключены,
      не используйте X forwarding. Будучи включенным, он позволяет авторизоваться 
      используя Ваше SSH соединения для проникновения на Ваш X сервер и 
      произвести различные манипуляции (чтение, сниффинг, например того, что Вы печатаете на 
      клавиатуре).
     </para>
    </warning>
   </sect3>
   <sect3 id="sec.security.general.overview.network.bugs">
    <title>Buffer Overflows and Format String Bugs</title><indexterm>
    <primary>security</primary>
    <secondary>bugs and</secondary></indexterm>
    <para>
     As discussed in
     <xref linkend="sec.security.general.overview.local.bugs"/>, buffer
     overflows and format string bugs should be classified as issues
     applying to both local and network security. As with the local variants
     of such bugs, buffer overflows in network programs, when successfully
     exploited, are mostly used to obtain
     <systemitem class="username">root</systemitem> permissions. Even if
     that is not the case, an attacker could use the bug to gain access to
     an unprivileged local account to exploit other vulnerabilities that
     might exist on the system.
    </para>
    <para>
     Buffer overflows and format string bugs exploitable over a network link
     are certainly the most frequent form of remote attacks, in general.
     Exploits for these&mdash;programs to exploit these newly-found security
     holes&mdash;are often posted on security mailing lists. They can be
     used to target the vulnerability without knowing the details of the
     code. Over the years, experience has shown that the availability of
     exploit codes has contributed to more secure operating systems,
     obviously due to the fact that operating system makers were forced to
     fix the problems in their software. With free software, anyone has
     access to the source code (&productname; comes with all available
     source codes) and anyone who finds a vulnerability and its exploit code
     can submit a patch to fix the corresponding bug.
    </para>
   </sect3>
   <sect3 id="sec.security.general.overview.network.dos">
    <title>Denial of Service</title><indexterm id="idx.security_attacks" class="startofrange">
    <primary>security</primary>
    <secondary>attacks</secondary></indexterm>
    <para>
     The purpose of a denial of service (DoS) attack is to block a server
     program or even an entire system, something that could be achieved by
     various means: overloading the server, keeping it busy with garbage
     packets, or exploiting a remote buffer overflow. Often, a DoS attack is
     made with the sole purpose of making the service disappear. However,
     once a given service has become unavailable, communications could
     become vulnerable to <emphasis>man-in-the-middle attacks</emphasis>
     (sniffing, TCP connection hijacking, spoofing) and DNS poisoning.
    </para>
   </sect3>
   <sect3 id="sec.security.general.overview.network.mitm">
    <title>Man in the Middle: Sniffing, Hijacking, Spoofing</title>
    <para>
     In general, any remote attack performed by an attacker who puts himself
     between the communicating hosts is called a <emphasis>man-in-the-middle
     attack</emphasis>. What almost all types of man-in-the-middle attacks
     have in common is that the victim is usually not aware that there is
     something happening. There are many possible variants. For example, the
     attacker could pick up a connection request and forward that to the
     target machine. Now the victim has unwittingly established a connection
     with the wrong host, because the other end is posing as the legitimate
     destination machine.
    </para>
    <para>
     The simplest form of a man-in-the-middle attack is called
     <emphasis>sniffer</emphasis> (the attacker is <quote>just</quote>
     listening to the network traffic passing by). As a more complex attack,
     the <quote>man in the middle</quote> could try to take over an already
     established connection (hijacking). To do so, the attacker would need
     to analyze the packets for some time to be able to predict the TCP
     sequence numbers belonging to the connection. When the attacker finally
     seizes the role of the target host, the victims notice this, because
     they get an error message saying the connection was terminated due to a
     failure. The fact that there are protocols not secured against
     hijacking through encryption (which only perform a simple
     authentication procedure upon establishing the connection) makes it
     easier for attackers.
    </para>
    <para>
     <emphasis>Spoofing</emphasis> is an attack where packets are modified
     to contain counterfeit source data, usually the IP address. Most active
     forms of attack rely on sending out such fake packets (something that,
     on a Linux machine, can only be done by the superuser
     (<systemitem
     class="username">root</systemitem>)).
    </para>
    <para>
     Many of the attacks mentioned are carried out in combination with a
     DoS. If an attacker sees an opportunity to bring down a certain host
     abruptly, even if only for a short time, it makes it easier for him to
     push the active attack, because the host will not be able to interfere
     with the attack for some time.
    </para>
   </sect3>
   <sect3 id="sec.security.general.overview.network.dns">
    <title>DNS Poisoning</title><indexterm>
    <primary>DNS</primary>
    <secondary>security and</secondary></indexterm><indexterm>
    <primary>security</primary>
    <secondary>DNS</secondary></indexterm>
    <para>
     DNS poisoning means that the attacker corrupts the cache of a DNS
     server by replying to it with spoofed DNS reply packets, trying to get
     the server to send certain data to a victim who is requesting
     information from that server. Many servers maintain a trust
     relationship with other hosts, based on IP addresses or hostnames. The
     attacker needs a good understanding of the actual structure of the
     trust relationships among hosts to disguise itself as one of the
     trusted hosts. Usually, the attacker analyzes some packets received
     from the server to get the necessary information. The attacker often
     needs to target a well-timed DoS attack at the name server as well.
     Protect yourself by using encrypted connections that are able to verify
     the identity of the hosts to which to connect.
    </para>
   </sect3>
   <sect3 id="sec.security.general.overview.network.worms">
    <title>Worms</title><indexterm>
    <primary>security</primary>
    <secondary>worms</secondary></indexterm>
    <para>
     Worms are often confused with viruses, but there is a clear difference
     between the two. Unlike viruses, worms do not need to infect a host
     program to live. Instead, they are specialized to spread as quickly as
     possible on network structures. The worms that appeared in the past,
     such as Ramen, Lion, or Adore, make use of well-known security holes in
     server programs like bind8 or lprNG. Protection against worms is
     relatively easy. Given that some time elapses between the discovery of
     a security hole and the moment the worm hits your server, there is a
     good chance that an updated version of the affected program is
     available on time. That is only useful if the administrator actually
     installs the security updates on the systems in question.
     <indexterm class="endofrange" startref="idx.security_attacks"/>
     <indexterm class="endofrange" startref="idx.security_network"/>
    </para>
   </sect3>
  </sect2>
 </sect1>
 <sect1 id="sec.security.general.tips">
  <title>Some General Security Tips and Tricks</title><indexterm>

  <primary>security</primary>

  <secondary>tips and tricks</secondary></indexterm>

  <remark condition="clarity"> 2007-07-27 - jjaeger: please use profiling for mailinglists and
   websites if they change from SLE to opensuse, next time. </remark>

  <para>
   To handle security competently, it is important to observe some
   recommendations. You may find the following list of rules useful in
   dealing with basic security concerns:
  </para>

  <itemizedlist>
   <listitem>
    <para>
     Get and install the updated packages recommended by security
     announcements as quickly as possible.
    </para>
   </listitem>
   <listitem>
    <para>
     Stay informed about the latest security issues:
    </para>
    <itemizedlist>
     <listitem>
      <para>
       <ulink url="opensuse-security-announce@opensuse.org"/> is the &suse;
       mailinglist for security announcements. It is a first-hand source of
       information regarding updated packages and includes members of
       &suse;'s security team among its active contributors. You can
       subscribe to this list on page
       <ulink
      url="http://en.opensuse.org/Communicate/Mailinglists"/>.
      </para>
     </listitem>
     <listitem>
      <para>
       Find &suse; security advisories as a news feed at
       <ulink
        url="http://www.novell.com/linux/security/suse_security.xml"/>.
      </para>
     </listitem>
     <listitem>
      <para>
       <ulink url="bugtraq@securityfocus.com"/> is one of the best-known
       security mailing lists worldwide. Reading this list, which receives
       between 15 and 20 postings per day, is recommended. More information
       can be found at <ulink url="http://www.securityfocus.com"/>.
      </para>
     </listitem>
    </itemizedlist>
   </listitem>
   <listitem>
    <para>
     Discuss any security issues of interest on our mailinglist
     <ulink url="opensuse-security@opensuse.org"/>.
    </para>
   </listitem>
   <listitem>
    <para>
     According to the rule of using the most restrictive set of permissions
     possible for every job, avoid doing your regular jobs as
     <systemitem class="username">root</systemitem>. This reduces the risk
     of getting a cuckoo egg or a virus and protects you from your own
     mistakes.
    </para>
   </listitem>
   <listitem>
    <para>
     If possible, always try to use encrypted connections to work on a
     remote machine. Using <command>ssh</command> (secure shell) to replace
     <command>telnet</command>, <command>ftp</command>,
     <command>rsh</command>, and <command>rlogin</command> should be
     standard practice.
    </para>
   </listitem>
   <listitem>
    <para>
     Avoid using authentication methods based solely on IP addresses.
    </para>
   </listitem>
   <listitem>
    <para>
     Try to keep the most important network-related packages up-to-date and
     subscribe to the corresponding mailing lists to receive announcements
     on new versions of such programs (bind, postfix, ssh, etc.). The same
     should apply to software relevant to local security.
    </para>
   </listitem>
   <listitem><indexterm>
    <primary>configuration files</primary>
    <secondary>permissions</secondary></indexterm>
    <para>
     Change the <filename>/etc/permissions</filename> file to optimize the
     permissions of files crucial to your system's security. If you remove
     the setuid bit from a program, it might well be that it cannot do its
     job anymore in the intended way. On the other hand, consider that, in
     most cases, the program will also have ceased to be a potential
     security risk. You might take a similar approach with world-writable
     directories and files.
    </para>
   </listitem>
   <listitem>
    <para>
     Disable any network services you do not absolutely require for your
     server to work properly. This makes your system safer. Open ports, with
     the socket state LISTEN, can be found with the program
     <literal>netstat</literal>. As for the options, it is recommended to
     use <command>netstat</command>&nbsp;<option>-ap</option> or
     <command>netstat</command>&nbsp;<option>-anp</option>. The
     <option>-p</option> option allows you to see which process is occupying
     a port under which name.
    </para>
    <para>
     Compare the <literal>netstat</literal> results with those of a thorough
     port scan done from outside your host. An excellent program for this
     job is <literal>nmap</literal>, which not only checks out the ports of
     your machine, but also draws some conclusions as to which services are
     waiting behind them. However, port scanning may be interpreted as an
     aggressive act, so do not do this on a host without the explicit
     approval of the administrator. Finally, remember that it is important
     not only to scan TCP ports, but also UDP ports (options
     <option>-sS</option> and <option>-sU</option>).
    </para>
   </listitem>
   <listitem>
    <para>
     To monitor the integrity of the files of your system in a reliable way,
     use the program <literal>AIDE</literal> (Advanced Intrusion Detection
     Environment), available on &productname;. Encrypt the database created
     by AIDE to prevent someone from tampering with it. Furthermore, keep a
     backup of this database available outside your machine, stored on an
     external data medium not connected to it by a network link.
    </para>
   </listitem>
   <listitem>
    <para>
     Take proper care when installing any third-party software. There have
     been cases where a hacker had built a trojan horse into the tar archive
     of a security software package, which was fortunately discovered very
     quickly. If you install a binary package, have no doubts about the site
     from which you downloaded it.
    </para><indexterm>
    <primary>security</primary>
    <secondary>RPM signatures</secondary></indexterm><indexterm>
    <primary>RPM</primary>
    <secondary>security</secondary></indexterm>
    <para>
     &suse;'s RPM packages are gpg-signed. The key used by &suse; for
     signing is:
    </para>
<screen>ID:9C800ACA 2000-10-19 SUSE Package Signing Key &lt;build@suse.de&gt;
     Key fingerprint = 79C1 79B2 E1C8 20C1 890F 9994 A84E DAE8 9C80 0ACA</screen>
    <para>
     The command <command>rpm</command>&nbsp;<option>--checksig
     package.rpm</option> shows whether the checksum and the signature of an
     uninstalled package are correct. Find the key on the first CD of the
     distribution and on most key servers worldwide.
    </para>
   </listitem>
   <listitem>
    <para>
     Check backups of user and system files regularly. Consider that if you
     do not test whether the backup works, it might actually be worthless.
    </para>
   </listitem>
   <listitem>
    <para>
     Check your log files. Whenever possible, write a small script to search
     for suspicious entries. Admittedly, this is not exactly a trivial task.
     In the end, only you can know which entries are unusual and which are
     not.
    </para>
   </listitem>
   <listitem>
    <para>
     Use <literal>tcp_wrapper</literal> to restrict access to the individual
     services running on your machine, so you have explicit control over
     which IP addresses can connect to a service. For further information
     regarding <literal>tcp_wrapper</literal>, consult the manual pages of
     tcpd and hosts_access (<command>man</command>&nbsp;<option>8
     tcpd</option>,
     <command>man</command>&nbsp;<option>hosts_access</option>).
    </para><indexterm>
    <primary>security</primary>
    <secondary>tcpd</secondary></indexterm>
   </listitem>
   <listitem>
    <para>
     Use SuSEfirewall to enhance the security provided by
     <literal>tcpd</literal> (<literal>tcp_wrapper</literal>).
    </para>
   </listitem>
   <listitem>
    <para>
     Design your security measures to be redundant: a message seen twice is
     much better than no message at all.
    </para>
   </listitem>
   <listitem>
    <para>
     If you use suspend to disk, consider configuring the suspend image
     encryption using the <command>configure-suspend-encryption.sh</command>
     script. The program creates the key, copies it to
     <filename>/etc/suspend.key</filename>, and modifies
     <filename>/etc/suspend.conf</filename> to use encryption for suspend
     images.
    </para>
   </listitem>
  </itemizedlist>
 </sect1>
 <sect1 id="sec.security.general.report">
  <title>Using the Central Security Reporting Address</title><indexterm>

  <primary>security</primary>

  <secondary>reporting problems</secondary></indexterm>

  <para>
   If you discover a security-related problem (please check the available
   update packages first), write an e-mail to
   <ulink url="security@suse.de"/>. Please include a detailed description of
   the problem and the version number of the package concerned. &suse; will
   try to send a reply as soon as possible. You are encouraged to
   pgp-encrypt your e-mail messages. &suse;'s pgp key is:
  </para>

<screen>ID:3D25D3D9 1999-03-06 SUSE Security Team &lt;security@suse.de&gt;
Key fingerprint = 73 5F 2E 99 DF DB 94 C4 8F 5A A3 AE AF 22 F2 D5</screen>

  <para>
   This key is also available for download from
   <ulink
    url="http://www.novell.com/linux/security/securitysupport.html"/>.
  </para><indexterm class="endofrange" startref="idx.security"/>
 </sect1>
</chapter>
